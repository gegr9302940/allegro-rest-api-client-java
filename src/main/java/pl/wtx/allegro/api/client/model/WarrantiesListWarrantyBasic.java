/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.WarrantyBasic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * WarrantiesListWarrantyBasic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class WarrantiesListWarrantyBasic {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  @javax.annotation.Nullable
  private Integer count;

  public static final String SERIALIZED_NAME_WARRANTIES = "warranties";
  @SerializedName(SERIALIZED_NAME_WARRANTIES)
  @javax.annotation.Nullable
  private List<WarrantyBasic> warranties = new ArrayList<>();

  public WarrantiesListWarrantyBasic() {
  }

  public WarrantiesListWarrantyBasic count(@javax.annotation.Nullable Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * minimum: 0
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(@javax.annotation.Nullable Integer count) {
    this.count = count;
  }


  public WarrantiesListWarrantyBasic warranties(@javax.annotation.Nullable List<WarrantyBasic> warranties) {
    this.warranties = warranties;
    return this;
  }

  public WarrantiesListWarrantyBasic addWarrantiesItem(WarrantyBasic warrantiesItem) {
    if (this.warranties == null) {
      this.warranties = new ArrayList<>();
    }
    this.warranties.add(warrantiesItem);
    return this;
  }

  /**
   * Get warranties
   * @return warranties
   */
  @javax.annotation.Nullable
  public List<WarrantyBasic> getWarranties() {
    return warranties;
  }

  public void setWarranties(@javax.annotation.Nullable List<WarrantyBasic> warranties) {
    this.warranties = warranties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WarrantiesListWarrantyBasic warrantiesListWarrantyBasic = (WarrantiesListWarrantyBasic) o;
    return Objects.equals(this.count, warrantiesListWarrantyBasic.count) &&
        Objects.equals(this.warranties, warrantiesListWarrantyBasic.warranties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, warranties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WarrantiesListWarrantyBasic {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    warranties: ").append(toIndentedString(warranties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("warranties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WarrantiesListWarrantyBasic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WarrantiesListWarrantyBasic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WarrantiesListWarrantyBasic is not found in the empty JSON string", WarrantiesListWarrantyBasic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WarrantiesListWarrantyBasic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WarrantiesListWarrantyBasic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("warranties") != null && !jsonObj.get("warranties").isJsonNull()) {
        JsonArray jsonArraywarranties = jsonObj.getAsJsonArray("warranties");
        if (jsonArraywarranties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warranties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warranties` to be an array in the JSON string but got `%s`", jsonObj.get("warranties").toString()));
          }

          // validate the optional field `warranties` (array)
          for (int i = 0; i < jsonArraywarranties.size(); i++) {
            WarrantyBasic.validateJsonElement(jsonArraywarranties.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WarrantiesListWarrantyBasic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WarrantiesListWarrantyBasic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WarrantiesListWarrantyBasic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WarrantiesListWarrantyBasic.class));

       return (TypeAdapter<T>) new TypeAdapter<WarrantiesListWarrantyBasic>() {
           @Override
           public void write(JsonWriter out, WarrantiesListWarrantyBasic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WarrantiesListWarrantyBasic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WarrantiesListWarrantyBasic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WarrantiesListWarrantyBasic
   * @throws IOException if the JSON string is invalid with respect to WarrantiesListWarrantyBasic
   */
  public static WarrantiesListWarrantyBasic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WarrantiesListWarrantyBasic.class);
  }

  /**
   * Convert an instance of WarrantiesListWarrantyBasic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

