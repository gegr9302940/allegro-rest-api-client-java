/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.BaseSaleProductResponseDto;
import pl.wtx.allegro.api.client.model.GetSaleProductsResponseNextPage;
import pl.wtx.allegro.api.client.model.ListingResponseFilters;
import pl.wtx.allegro.api.client.model.SaleProductResponseCategoriesDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * GetSaleProductsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class GetSaleProductsResponse {
  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  @javax.annotation.Nonnull
  private List<BaseSaleProductResponseDto> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  @javax.annotation.Nullable
  private SaleProductResponseCategoriesDto categories;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  @javax.annotation.Nullable
  private List<ListingResponseFilters> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGE = "nextPage";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE)
  @javax.annotation.Nullable
  private GetSaleProductsResponseNextPage nextPage;

  public GetSaleProductsResponse() {
  }

  public GetSaleProductsResponse products(@javax.annotation.Nonnull List<BaseSaleProductResponseDto> products) {
    this.products = products;
    return this;
  }

  public GetSaleProductsResponse addProductsItem(BaseSaleProductResponseDto productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nonnull
  public List<BaseSaleProductResponseDto> getProducts() {
    return products;
  }

  public void setProducts(@javax.annotation.Nonnull List<BaseSaleProductResponseDto> products) {
    this.products = products;
  }


  public GetSaleProductsResponse categories(@javax.annotation.Nullable SaleProductResponseCategoriesDto categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public SaleProductResponseCategoriesDto getCategories() {
    return categories;
  }

  public void setCategories(@javax.annotation.Nullable SaleProductResponseCategoriesDto categories) {
    this.categories = categories;
  }


  public GetSaleProductsResponse filters(@javax.annotation.Nullable List<ListingResponseFilters> filters) {
    this.filters = filters;
    return this;
  }

  public GetSaleProductsResponse addFiltersItem(ListingResponseFilters filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List<ListingResponseFilters> getFilters() {
    return filters;
  }

  public void setFilters(@javax.annotation.Nullable List<ListingResponseFilters> filters) {
    this.filters = filters;
  }


  public GetSaleProductsResponse nextPage(@javax.annotation.Nullable GetSaleProductsResponseNextPage nextPage) {
    this.nextPage = nextPage;
    return this;
  }

  /**
   * Get nextPage
   * @return nextPage
   */
  @javax.annotation.Nullable
  public GetSaleProductsResponseNextPage getNextPage() {
    return nextPage;
  }

  public void setNextPage(@javax.annotation.Nullable GetSaleProductsResponseNextPage nextPage) {
    this.nextPage = nextPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSaleProductsResponse getSaleProductsResponse = (GetSaleProductsResponse) o;
    return Objects.equals(this.products, getSaleProductsResponse.products) &&
        Objects.equals(this.categories, getSaleProductsResponse.categories) &&
        Objects.equals(this.filters, getSaleProductsResponse.filters) &&
        Objects.equals(this.nextPage, getSaleProductsResponse.nextPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(products, categories, filters, nextPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSaleProductsResponse {\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    nextPage: ").append(toIndentedString(nextPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("products");
    openapiFields.add("categories");
    openapiFields.add("filters");
    openapiFields.add("nextPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("products");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSaleProductsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSaleProductsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSaleProductsResponse is not found in the empty JSON string", GetSaleProductsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSaleProductsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSaleProductsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSaleProductsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }

      JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
      // validate the required field `products` (array)
      for (int i = 0; i < jsonArrayproducts.size(); i++) {
        BaseSaleProductResponseDto.validateJsonElement(jsonArrayproducts.get(i));
      };
      // validate the optional field `categories`
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        SaleProductResponseCategoriesDto.validateJsonElement(jsonObj.get("categories"));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            ListingResponseFilters.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // validate the optional field `nextPage`
      if (jsonObj.get("nextPage") != null && !jsonObj.get("nextPage").isJsonNull()) {
        GetSaleProductsResponseNextPage.validateJsonElement(jsonObj.get("nextPage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSaleProductsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSaleProductsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSaleProductsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSaleProductsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSaleProductsResponse>() {
           @Override
           public void write(JsonWriter out, GetSaleProductsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSaleProductsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSaleProductsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSaleProductsResponse
   * @throws IOException if the JSON string is invalid with respect to GetSaleProductsResponse
   */
  public static GetSaleProductsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSaleProductsResponse.class);
  }

  /**
   * Convert an instance of GetSaleProductsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

