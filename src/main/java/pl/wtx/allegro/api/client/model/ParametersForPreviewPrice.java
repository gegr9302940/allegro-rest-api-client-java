/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.Category;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ParametersForPreviewPrice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ParametersForPreviewPrice {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nonnull
  private Category category;

  /**
   * Offer condition, if is new, used or other.
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    NEW("NEW"),
    
    USED("USED"),
    
    OTHER("OTHER");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String value) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  @javax.annotation.Nullable
  private ConditionEnum condition;

  /**
   * Gets or Sets duration
   */
  @JsonAdapter(DurationEnum.Adapter.class)
  public enum DurationEnum {
    PT72_H("PT72H"),
    
    PT120_H("PT120H"),
    
    PT168_H("PT168H"),
    
    PT240_H("PT240H"),
    
    PT336_H("PT336H"),
    
    PT480_H("PT480H"),
    
    PT720_H("PT720H");

    private String value;

    DurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DurationEnum fromValue(String value) {
      for (DurationEnum b : DurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DurationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DurationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private DurationEnum duration;

  public static final String SERIALIZED_NAME_HAS_ANY_QUANTITY = "hasAnyQuantity";
  @SerializedName(SERIALIZED_NAME_HAS_ANY_QUANTITY)
  @javax.annotation.Nullable
  private Boolean hasAnyQuantity;

  public static final String SERIALIZED_NAME_NUMBER_OF_BIG_PHOTOS = "numberOfBigPhotos";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_BIG_PHOTOS)
  @javax.annotation.Nullable
  private Integer numberOfBigPhotos;

  public static final String SERIALIZED_NAME_NUMBER_OF_PHOTOS = "numberOfPhotos";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PHOTOS)
  @javax.annotation.Nullable
  private Integer numberOfPhotos;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nullable
  private Integer quantity;

  public static final String SERIALIZED_NAME_SHOP = "shop";
  @SerializedName(SERIALIZED_NAME_SHOP)
  @javax.annotation.Nullable
  private Boolean shop;

  public static final String SERIALIZED_NAME_SOLD_QUANTITY = "soldQuantity";
  @SerializedName(SERIALIZED_NAME_SOLD_QUANTITY)
  @javax.annotation.Nullable
  private Integer soldQuantity;

  /**
   * Offer type. &#39;type&#39; or &#39;shop&#39; fields must be provided. Takes precedence over &#39;shop&#39; field. **Note:** if type &#x3D; &#39;advertisement&#39; then either &#39;quantity&#39; or &#39;soldQuantity&#39; field must be set.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SHOP("shop"),
    
    OFFER("offer"),
    
    ADVERTISEMENT("advertisement");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  @javax.annotation.Nonnull
  private BigDecimal unitPrice;

  public static final String SERIALIZED_NAME_BOLD = "bold";
  @SerializedName(SERIALIZED_NAME_BOLD)
  @javax.annotation.Nullable
  private Boolean bold;

  public static final String SERIALIZED_NAME_HIGHLIGHT = "highlight";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT)
  @javax.annotation.Nullable
  private Boolean highlight;

  public static final String SERIALIZED_NAME_DEPARTMENT_PAGE = "departmentPage";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_PAGE)
  @javax.annotation.Nullable
  private Boolean departmentPage;

  public static final String SERIALIZED_NAME_EMPHASIZED = "emphasized";
  @SerializedName(SERIALIZED_NAME_EMPHASIZED)
  @javax.annotation.Nullable
  private Boolean emphasized;

  public static final String SERIALIZED_NAME_EMPHASIZED_HIGHLIGHT_BOLD_PACKAGE = "emphasizedHighlightBoldPackage";
  @SerializedName(SERIALIZED_NAME_EMPHASIZED_HIGHLIGHT_BOLD_PACKAGE)
  @javax.annotation.Nullable
  private Boolean emphasizedHighlightBoldPackage;

  public static final String SERIALIZED_NAME_MULTI_VARIANT = "multiVariant";
  @SerializedName(SERIALIZED_NAME_MULTI_VARIANT)
  @javax.annotation.Nullable
  private Boolean multiVariant;

  public ParametersForPreviewPrice() {
  }

  public ParametersForPreviewPrice category(@javax.annotation.Nonnull Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public Category getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nonnull Category category) {
    this.category = category;
  }


  public ParametersForPreviewPrice condition(@javax.annotation.Nullable ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Offer condition, if is new, used or other.
   * @return condition
   */
  @javax.annotation.Nullable
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(@javax.annotation.Nullable ConditionEnum condition) {
    this.condition = condition;
  }


  public ParametersForPreviewPrice duration(@javax.annotation.Nullable DurationEnum duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public DurationEnum getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable DurationEnum duration) {
    this.duration = duration;
  }


  public ParametersForPreviewPrice hasAnyQuantity(@javax.annotation.Nullable Boolean hasAnyQuantity) {
    this.hasAnyQuantity = hasAnyQuantity;
    return this;
  }

  /**
   * Get hasAnyQuantity
   * @return hasAnyQuantity
   */
  @javax.annotation.Nullable
  public Boolean getHasAnyQuantity() {
    return hasAnyQuantity;
  }

  public void setHasAnyQuantity(@javax.annotation.Nullable Boolean hasAnyQuantity) {
    this.hasAnyQuantity = hasAnyQuantity;
  }


  public ParametersForPreviewPrice numberOfBigPhotos(@javax.annotation.Nullable Integer numberOfBigPhotos) {
    this.numberOfBigPhotos = numberOfBigPhotos;
    return this;
  }

  /**
   * If set, minimum value 0
   * minimum: 0
   * @return numberOfBigPhotos
   */
  @javax.annotation.Nullable
  public Integer getNumberOfBigPhotos() {
    return numberOfBigPhotos;
  }

  public void setNumberOfBigPhotos(@javax.annotation.Nullable Integer numberOfBigPhotos) {
    this.numberOfBigPhotos = numberOfBigPhotos;
  }


  public ParametersForPreviewPrice numberOfPhotos(@javax.annotation.Nullable Integer numberOfPhotos) {
    this.numberOfPhotos = numberOfPhotos;
    return this;
  }

  /**
   * If set, minimum value 0
   * minimum: 0
   * @return numberOfPhotos
   */
  @javax.annotation.Nullable
  public Integer getNumberOfPhotos() {
    return numberOfPhotos;
  }

  public void setNumberOfPhotos(@javax.annotation.Nullable Integer numberOfPhotos) {
    this.numberOfPhotos = numberOfPhotos;
  }


  public ParametersForPreviewPrice quantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of items to be sold. If set, minimum value 1
   * minimum: 1
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
  }


  public ParametersForPreviewPrice shop(@javax.annotation.Nullable Boolean shop) {
    this.shop = shop;
    return this;
  }

  /**
   * Deprecated. Value &#39;true&#39; sets the &#39;offer.type&#39; field to &#39;shop&#39;, value &#39;false&#39; to &#39;offer&#39;. This field is ignored if &#39;offer.type&#39; field is set.
   * @return shop
   */
  @javax.annotation.Nullable
  public Boolean getShop() {
    return shop;
  }

  public void setShop(@javax.annotation.Nullable Boolean shop) {
    this.shop = shop;
  }


  public ParametersForPreviewPrice soldQuantity(@javax.annotation.Nullable Integer soldQuantity) {
    this.soldQuantity = soldQuantity;
    return this;
  }

  /**
   * Quantity of sold items. Relates to commission success fee. If set, minimum value 1
   * minimum: 0
   * @return soldQuantity
   */
  @javax.annotation.Nullable
  public Integer getSoldQuantity() {
    return soldQuantity;
  }

  public void setSoldQuantity(@javax.annotation.Nullable Integer soldQuantity) {
    this.soldQuantity = soldQuantity;
  }


  public ParametersForPreviewPrice type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Offer type. &#39;type&#39; or &#39;shop&#39; fields must be provided. Takes precedence over &#39;shop&#39; field. **Note:** if type &#x3D; &#39;advertisement&#39; then either &#39;quantity&#39; or &#39;soldQuantity&#39; field must be set.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public ParametersForPreviewPrice unitPrice(@javax.annotation.Nonnull BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * minimum: 0
   * @return unitPrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(@javax.annotation.Nonnull BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ParametersForPreviewPrice bold(@javax.annotation.Nullable Boolean bold) {
    this.bold = bold;
    return this;
  }

  /**
   * Get bold
   * @return bold
   */
  @javax.annotation.Nullable
  public Boolean getBold() {
    return bold;
  }

  public void setBold(@javax.annotation.Nullable Boolean bold) {
    this.bold = bold;
  }


  public ParametersForPreviewPrice highlight(@javax.annotation.Nullable Boolean highlight) {
    this.highlight = highlight;
    return this;
  }

  /**
   * Get highlight
   * @return highlight
   */
  @javax.annotation.Nullable
  public Boolean getHighlight() {
    return highlight;
  }

  public void setHighlight(@javax.annotation.Nullable Boolean highlight) {
    this.highlight = highlight;
  }


  public ParametersForPreviewPrice departmentPage(@javax.annotation.Nullable Boolean departmentPage) {
    this.departmentPage = departmentPage;
    return this;
  }

  /**
   * Get departmentPage
   * @return departmentPage
   */
  @javax.annotation.Nullable
  public Boolean getDepartmentPage() {
    return departmentPage;
  }

  public void setDepartmentPage(@javax.annotation.Nullable Boolean departmentPage) {
    this.departmentPage = departmentPage;
  }


  public ParametersForPreviewPrice emphasized(@javax.annotation.Nullable Boolean emphasized) {
    this.emphasized = emphasized;
    return this;
  }

  /**
   * Get emphasized
   * @return emphasized
   */
  @javax.annotation.Nullable
  public Boolean getEmphasized() {
    return emphasized;
  }

  public void setEmphasized(@javax.annotation.Nullable Boolean emphasized) {
    this.emphasized = emphasized;
  }


  public ParametersForPreviewPrice emphasizedHighlightBoldPackage(@javax.annotation.Nullable Boolean emphasizedHighlightBoldPackage) {
    this.emphasizedHighlightBoldPackage = emphasizedHighlightBoldPackage;
    return this;
  }

  /**
   * Get emphasizedHighlightBoldPackage
   * @return emphasizedHighlightBoldPackage
   */
  @javax.annotation.Nullable
  public Boolean getEmphasizedHighlightBoldPackage() {
    return emphasizedHighlightBoldPackage;
  }

  public void setEmphasizedHighlightBoldPackage(@javax.annotation.Nullable Boolean emphasizedHighlightBoldPackage) {
    this.emphasizedHighlightBoldPackage = emphasizedHighlightBoldPackage;
  }


  public ParametersForPreviewPrice multiVariant(@javax.annotation.Nullable Boolean multiVariant) {
    this.multiVariant = multiVariant;
    return this;
  }

  /**
   * Get multiVariant
   * @return multiVariant
   */
  @javax.annotation.Nullable
  public Boolean getMultiVariant() {
    return multiVariant;
  }

  public void setMultiVariant(@javax.annotation.Nullable Boolean multiVariant) {
    this.multiVariant = multiVariant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParametersForPreviewPrice parametersForPreviewPrice = (ParametersForPreviewPrice) o;
    return Objects.equals(this.category, parametersForPreviewPrice.category) &&
        Objects.equals(this.condition, parametersForPreviewPrice.condition) &&
        Objects.equals(this.duration, parametersForPreviewPrice.duration) &&
        Objects.equals(this.hasAnyQuantity, parametersForPreviewPrice.hasAnyQuantity) &&
        Objects.equals(this.numberOfBigPhotos, parametersForPreviewPrice.numberOfBigPhotos) &&
        Objects.equals(this.numberOfPhotos, parametersForPreviewPrice.numberOfPhotos) &&
        Objects.equals(this.quantity, parametersForPreviewPrice.quantity) &&
        Objects.equals(this.shop, parametersForPreviewPrice.shop) &&
        Objects.equals(this.soldQuantity, parametersForPreviewPrice.soldQuantity) &&
        Objects.equals(this.type, parametersForPreviewPrice.type) &&
        Objects.equals(this.unitPrice, parametersForPreviewPrice.unitPrice) &&
        Objects.equals(this.bold, parametersForPreviewPrice.bold) &&
        Objects.equals(this.highlight, parametersForPreviewPrice.highlight) &&
        Objects.equals(this.departmentPage, parametersForPreviewPrice.departmentPage) &&
        Objects.equals(this.emphasized, parametersForPreviewPrice.emphasized) &&
        Objects.equals(this.emphasizedHighlightBoldPackage, parametersForPreviewPrice.emphasizedHighlightBoldPackage) &&
        Objects.equals(this.multiVariant, parametersForPreviewPrice.multiVariant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, condition, duration, hasAnyQuantity, numberOfBigPhotos, numberOfPhotos, quantity, shop, soldQuantity, type, unitPrice, bold, highlight, departmentPage, emphasized, emphasizedHighlightBoldPackage, multiVariant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParametersForPreviewPrice {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    hasAnyQuantity: ").append(toIndentedString(hasAnyQuantity)).append("\n");
    sb.append("    numberOfBigPhotos: ").append(toIndentedString(numberOfBigPhotos)).append("\n");
    sb.append("    numberOfPhotos: ").append(toIndentedString(numberOfPhotos)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    shop: ").append(toIndentedString(shop)).append("\n");
    sb.append("    soldQuantity: ").append(toIndentedString(soldQuantity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    highlight: ").append(toIndentedString(highlight)).append("\n");
    sb.append("    departmentPage: ").append(toIndentedString(departmentPage)).append("\n");
    sb.append("    emphasized: ").append(toIndentedString(emphasized)).append("\n");
    sb.append("    emphasizedHighlightBoldPackage: ").append(toIndentedString(emphasizedHighlightBoldPackage)).append("\n");
    sb.append("    multiVariant: ").append(toIndentedString(multiVariant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("condition");
    openapiFields.add("duration");
    openapiFields.add("hasAnyQuantity");
    openapiFields.add("numberOfBigPhotos");
    openapiFields.add("numberOfPhotos");
    openapiFields.add("quantity");
    openapiFields.add("shop");
    openapiFields.add("soldQuantity");
    openapiFields.add("type");
    openapiFields.add("unitPrice");
    openapiFields.add("bold");
    openapiFields.add("highlight");
    openapiFields.add("departmentPage");
    openapiFields.add("emphasized");
    openapiFields.add("emphasizedHighlightBoldPackage");
    openapiFields.add("multiVariant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("unitPrice");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParametersForPreviewPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParametersForPreviewPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParametersForPreviewPrice is not found in the empty JSON string", ParametersForPreviewPrice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParametersForPreviewPrice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParametersForPreviewPrice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParametersForPreviewPrice.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `category`
      Category.validateJsonElement(jsonObj.get("category"));
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        ConditionEnum.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `duration`
      if (jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) {
        DurationEnum.validateJsonElement(jsonObj.get("duration"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParametersForPreviewPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParametersForPreviewPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParametersForPreviewPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParametersForPreviewPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<ParametersForPreviewPrice>() {
           @Override
           public void write(JsonWriter out, ParametersForPreviewPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParametersForPreviewPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParametersForPreviewPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParametersForPreviewPrice
   * @throws IOException if the JSON string is invalid with respect to ParametersForPreviewPrice
   */
  public static ParametersForPreviewPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParametersForPreviewPrice.class);
  }

  /**
   * Convert an instance of ParametersForPreviewPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

