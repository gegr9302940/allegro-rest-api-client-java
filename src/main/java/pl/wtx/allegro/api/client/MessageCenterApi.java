/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import pl.wtx.allegro.api.client.model.Message;
import pl.wtx.allegro.api.client.model.MessageAttachmentId;
import pl.wtx.allegro.api.client.model.MessagesList;
import pl.wtx.allegro.api.client.model.NewAttachmentDeclaration;
import pl.wtx.allegro.api.client.model.NewMessage;
import pl.wtx.allegro.api.client.model.NewMessageInThread;
import java.time.OffsetDateTime;
import pl.wtx.allegro.api.client.model.Thread;
import pl.wtx.allegro.api.client.model.ThreadReadFlag;
import pl.wtx.allegro.api.client.model.ThreadsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageCenterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageCenterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageCenterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeReadFlagOnThreadPUT
     * @param threadId Identifier of thread to be marked. (required)
     * @param threadReadFlag Updated read flag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread marked as read successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to update thread read flag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors - missing flag in the request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeReadFlagOnThreadPUTCall(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull ThreadReadFlag threadReadFlag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = threadReadFlag;

        // create path and map variables
        String localVarPath = "/messaging/threads/{threadId}/read"
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeReadFlagOnThreadPUTValidateBeforeCall(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull ThreadReadFlag threadReadFlag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling changeReadFlagOnThreadPUT(Async)");
        }

        // verify the required parameter 'threadReadFlag' is set
        if (threadReadFlag == null) {
            throw new ApiException("Missing the required parameter 'threadReadFlag' when calling changeReadFlagOnThreadPUT(Async)");
        }

        return changeReadFlagOnThreadPUTCall(threadId, threadReadFlag, _callback);

    }

    /**
     * Mark a particular thread as read
     * Use this resource to mark thread with provided identifier as read. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to be marked. (required)
     * @param threadReadFlag Updated read flag (required)
     * @return Thread
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread marked as read successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to update thread read flag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors - missing flag in the request body </td><td>  -  </td></tr>
     </table>
     */
    public Thread changeReadFlagOnThreadPUT(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull ThreadReadFlag threadReadFlag) throws ApiException {
        ApiResponse<Thread> localVarResp = changeReadFlagOnThreadPUTWithHttpInfo(threadId, threadReadFlag);
        return localVarResp.getData();
    }

    /**
     * Mark a particular thread as read
     * Use this resource to mark thread with provided identifier as read. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to be marked. (required)
     * @param threadReadFlag Updated read flag (required)
     * @return ApiResponse&lt;Thread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread marked as read successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to update thread read flag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors - missing flag in the request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Thread> changeReadFlagOnThreadPUTWithHttpInfo(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull ThreadReadFlag threadReadFlag) throws ApiException {
        okhttp3.Call localVarCall = changeReadFlagOnThreadPUTValidateBeforeCall(threadId, threadReadFlag, null);
        Type localVarReturnType = new TypeToken<Thread>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a particular thread as read (asynchronously)
     * Use this resource to mark thread with provided identifier as read. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to be marked. (required)
     * @param threadReadFlag Updated read flag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread marked as read successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to update thread read flag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors - missing flag in the request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeReadFlagOnThreadPUTAsync(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull ThreadReadFlag threadReadFlag, final ApiCallback<Thread> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeReadFlagOnThreadPUTValidateBeforeCall(threadId, threadReadFlag, _callback);
        Type localVarReturnType = new TypeToken<Thread>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessageDELETE
     * @param messageId Identifier of the message to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Message successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to delete particular message </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageDELETECall(@javax.annotation.Nonnull String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/messages/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageDELETEValidateBeforeCall(@javax.annotation.Nonnull String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMessageDELETE(Async)");
        }

        return deleteMessageDELETECall(messageId, _callback);

    }

    /**
     * Delete single message
     * Use this resource to delete message with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#usuniecie-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#delete-a-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param messageId Identifier of the message to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Message successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to delete particular message </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMessageDELETE(@javax.annotation.Nonnull String messageId) throws ApiException {
        deleteMessageDELETEWithHttpInfo(messageId);
    }

    /**
     * Delete single message
     * Use this resource to delete message with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#usuniecie-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#delete-a-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param messageId Identifier of the message to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Message successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to delete particular message </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMessageDELETEWithHttpInfo(@javax.annotation.Nonnull String messageId) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageDELETEValidateBeforeCall(messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete single message (asynchronously)
     * Use this resource to delete message with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#usuniecie-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#delete-a-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param messageId Identifier of the message to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Message successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to delete particular message </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageDELETEAsync(@javax.annotation.Nonnull String messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageDELETEValidateBeforeCall(messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadAttachmentGET
     * @param attachmentId Identifier of the attachment that will be downloaded. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment file returned successfully </td><td>  * Content-Disposition -  <br>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAttachmentGETCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/message-attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAttachmentGETValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadAttachmentGET(Async)");
        }

        return downloadAttachmentGETCall(attachmentId, _callback);

    }

    /**
     * Download attachment
     * Use this resource to download attachment with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#pobranie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-related-to-the-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Identifier of the attachment that will be downloaded. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment file returned successfully </td><td>  * Content-Disposition -  <br>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment not found </td><td>  -  </td></tr>
     </table>
     */
    public File downloadAttachmentGET(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        ApiResponse<File> localVarResp = downloadAttachmentGETWithHttpInfo(attachmentId);
        return localVarResp.getData();
    }

    /**
     * Download attachment
     * Use this resource to download attachment with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#pobranie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-related-to-the-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Identifier of the attachment that will be downloaded. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment file returned successfully </td><td>  * Content-Disposition -  <br>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadAttachmentGETWithHttpInfo(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = downloadAttachmentGETValidateBeforeCall(attachmentId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download attachment (asynchronously)
     * Use this resource to download attachment with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#pobranie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-related-to-the-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Identifier of the attachment that will be downloaded. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment file returned successfully </td><td>  * Content-Disposition -  <br>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAttachmentGETAsync(@javax.annotation.Nonnull String attachmentId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAttachmentGETValidateBeforeCall(attachmentId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessageGET
     * @param messageId Identifier of message to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessageGETCall(@javax.annotation.Nonnull String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/messages/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageGETValidateBeforeCall(@javax.annotation.Nonnull String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageGET(Async)");
        }

        return getMessageGETCall(messageId, _callback);

    }

    /**
     * Get single message
     * Use this resource to get message with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param messageId Identifier of message to be returned. (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public Message getMessageGET(@javax.annotation.Nonnull String messageId) throws ApiException {
        ApiResponse<Message> localVarResp = getMessageGETWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * Get single message
     * Use this resource to get message with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param messageId Identifier of message to be returned. (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Message> getMessageGETWithHttpInfo(@javax.annotation.Nonnull String messageId) throws ApiException {
        okhttp3.Call localVarCall = getMessageGETValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get single message (asynchronously)
     * Use this resource to get message with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-wiadomosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param messageId Identifier of message to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessageGETAsync(@javax.annotation.Nonnull String messageId, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageGETValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThreadGET
     * @param threadId Identifier of thread to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThreadGETCall(@javax.annotation.Nonnull String threadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/threads/{threadId}"
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThreadGETValidateBeforeCall(@javax.annotation.Nonnull String threadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling getThreadGET(Async)");
        }

        return getThreadGETCall(threadId, _callback);

    }

    /**
     * Get user thread
     * Use this resource to get thread with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-danym-watku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-thread\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to get. (required)
     * @return Thread
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
     </table>
     */
    public Thread getThreadGET(@javax.annotation.Nonnull String threadId) throws ApiException {
        ApiResponse<Thread> localVarResp = getThreadGETWithHttpInfo(threadId);
        return localVarResp.getData();
    }

    /**
     * Get user thread
     * Use this resource to get thread with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-danym-watku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-thread\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to get. (required)
     * @return ApiResponse&lt;Thread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Thread> getThreadGETWithHttpInfo(@javax.annotation.Nonnull String threadId) throws ApiException {
        okhttp3.Call localVarCall = getThreadGETValidateBeforeCall(threadId, null);
        Type localVarReturnType = new TypeToken<Thread>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user thread (asynchronously)
     * Use this resource to get thread with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#szczegolowe-informacje-o-danym-watku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#information-about-a-particular-thread\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThreadGETAsync(@javax.annotation.Nonnull String threadId, final ApiCallback<Thread> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThreadGETValidateBeforeCall(threadId, _callback);
        Type localVarReturnType = new TypeToken<Thread>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessagesGET
     * @param threadId Identifier of thread to get messages from. (required)
     * @param limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param offset Index of the first returned message from all results. (optional, default to 0)
     * @param before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param after Message creation date after filter parameter (exclusive). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread message list returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit, offset, after or before </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesGETCall(@javax.annotation.Nonnull String threadId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/threads/{threadId}/messages"
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagesGETValidateBeforeCall(@javax.annotation.Nonnull String threadId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling listMessagesGET(Async)");
        }

        return listMessagesGETCall(threadId, limit, offset, before, after, _callback);

    }

    /**
     * List messages in thread
     * Use this resource to list messages in thread with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-wiadomosci-dla-wybranego-watku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-the-messages-for-the-particular-thread\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to get messages from. (required)
     * @param limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param offset Index of the first returned message from all results. (optional, default to 0)
     * @param before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param after Message creation date after filter parameter (exclusive). (optional)
     * @return MessagesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread message list returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit, offset, after or before </td><td>  -  </td></tr>
     </table>
     */
    public MessagesList listMessagesGET(@javax.annotation.Nonnull String threadId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime after) throws ApiException {
        ApiResponse<MessagesList> localVarResp = listMessagesGETWithHttpInfo(threadId, limit, offset, before, after);
        return localVarResp.getData();
    }

    /**
     * List messages in thread
     * Use this resource to list messages in thread with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-wiadomosci-dla-wybranego-watku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-the-messages-for-the-particular-thread\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to get messages from. (required)
     * @param limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param offset Index of the first returned message from all results. (optional, default to 0)
     * @param before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param after Message creation date after filter parameter (exclusive). (optional)
     * @return ApiResponse&lt;MessagesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread message list returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit, offset, after or before </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagesList> listMessagesGETWithHttpInfo(@javax.annotation.Nonnull String threadId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime after) throws ApiException {
        okhttp3.Call localVarCall = listMessagesGETValidateBeforeCall(threadId, limit, offset, before, after, null);
        Type localVarReturnType = new TypeToken<MessagesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List messages in thread (asynchronously)
     * Use this resource to list messages in thread with provided identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-wiadomosci-dla-wybranego-watku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-the-messages-for-the-particular-thread\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to get messages from. (required)
     * @param limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param offset Index of the first returned message from all results. (optional, default to 0)
     * @param before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param after Message creation date after filter parameter (exclusive). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread message list returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit, offset, after or before </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesGETAsync(@javax.annotation.Nonnull String threadId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime after, final ApiCallback<MessagesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagesGETValidateBeforeCall(threadId, limit, offset, before, after, _callback);
        Type localVarReturnType = new TypeToken<MessagesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listThreadsGET
     * @param limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param offset Index of the first returned thread from all results. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit or offset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listThreadsGETCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/threads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listThreadsGETValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, final ApiCallback _callback) throws ApiException {
        return listThreadsGETCall(limit, offset, _callback);

    }

    /**
     * List user threads
     * Use this resource to get the list of user threads sorted by last message date, starting from newest. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-watkow-na-koncie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-threads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param offset Index of the first returned thread from all results. (optional, default to 0)
     * @return ThreadsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit or offset </td><td>  -  </td></tr>
     </table>
     */
    public ThreadsList listThreadsGET(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset) throws ApiException {
        ApiResponse<ThreadsList> localVarResp = listThreadsGETWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * List user threads
     * Use this resource to get the list of user threads sorted by last message date, starting from newest. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-watkow-na-koncie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-threads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param offset Index of the first returned thread from all results. (optional, default to 0)
     * @return ApiResponse&lt;ThreadsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit or offset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThreadsList> listThreadsGETWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset) throws ApiException {
        okhttp3.Call localVarCall = listThreadsGETValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ThreadsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List user threads (asynchronously)
     * Use this resource to get the list of user threads sorted by last message date, starting from newest. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#lista-watkow-na-koncie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#list-of-threads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param offset Index of the first returned thread from all results. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect limit or offset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listThreadsGETAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, final ApiCallback<ThreadsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listThreadsGETValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ThreadsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newAttachmentDeclarationPOST
     * @param newAttachmentDeclaration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment declaration successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newAttachmentDeclarationPOSTCall(@javax.annotation.Nonnull NewAttachmentDeclaration newAttachmentDeclaration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newAttachmentDeclaration;

        // create path and map variables
        String localVarPath = "/messaging/message-attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newAttachmentDeclarationPOSTValidateBeforeCall(@javax.annotation.Nonnull NewAttachmentDeclaration newAttachmentDeclaration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newAttachmentDeclaration' is set
        if (newAttachmentDeclaration == null) {
            throw new ApiException("Missing the required parameter 'newAttachmentDeclaration' when calling newAttachmentDeclarationPOST(Async)");
        }

        return newAttachmentDeclarationPOSTCall(newAttachmentDeclaration, _callback);

    }

    /**
     * Add attachment declaration
     * Use this resource to add attachment declaration before uploading. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#deklaracja-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-declaration\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param newAttachmentDeclaration  (required)
     * @return MessageAttachmentId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment declaration successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public MessageAttachmentId newAttachmentDeclarationPOST(@javax.annotation.Nonnull NewAttachmentDeclaration newAttachmentDeclaration) throws ApiException {
        ApiResponse<MessageAttachmentId> localVarResp = newAttachmentDeclarationPOSTWithHttpInfo(newAttachmentDeclaration);
        return localVarResp.getData();
    }

    /**
     * Add attachment declaration
     * Use this resource to add attachment declaration before uploading. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#deklaracja-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-declaration\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param newAttachmentDeclaration  (required)
     * @return ApiResponse&lt;MessageAttachmentId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment declaration successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageAttachmentId> newAttachmentDeclarationPOSTWithHttpInfo(@javax.annotation.Nonnull NewAttachmentDeclaration newAttachmentDeclaration) throws ApiException {
        okhttp3.Call localVarCall = newAttachmentDeclarationPOSTValidateBeforeCall(newAttachmentDeclaration, null);
        Type localVarReturnType = new TypeToken<MessageAttachmentId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add attachment declaration (asynchronously)
     * Use this resource to add attachment declaration before uploading. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#deklaracja-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#attachment-declaration\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param newAttachmentDeclaration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment declaration successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newAttachmentDeclarationPOSTAsync(@javax.annotation.Nonnull NewAttachmentDeclaration newAttachmentDeclaration, final ApiCallback<MessageAttachmentId> _callback) throws ApiException {

        okhttp3.Call localVarCall = newAttachmentDeclarationPOSTValidateBeforeCall(newAttachmentDeclaration, _callback);
        Type localVarReturnType = new TypeToken<MessageAttachmentId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newMessageInThreadPOST
     * @param threadId Identifier of thread to write message to. (required)
     * @param newMessageInThread  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message in thread successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newMessageInThreadPOSTCall(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull NewMessageInThread newMessageInThread, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newMessageInThread;

        // create path and map variables
        String localVarPath = "/messaging/threads/{threadId}/messages"
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newMessageInThreadPOSTValidateBeforeCall(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull NewMessageInThread newMessageInThread, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling newMessageInThreadPOST(Async)");
        }

        // verify the required parameter 'newMessageInThread' is set
        if (newMessageInThread == null) {
            throw new ApiException("Missing the required parameter 'newMessageInThread' when calling newMessageInThreadPOST(Async)");
        }

        return newMessageInThreadPOSTCall(threadId, newMessageInThread, _callback);

    }

    /**
     * Write a new message in thread
     * Use this resource to write new message in existing thread. This resource is rate limited to 1 request per second for a user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to write message to. (required)
     * @param newMessageInThread  (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message in thread successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public Message newMessageInThreadPOST(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull NewMessageInThread newMessageInThread) throws ApiException {
        ApiResponse<Message> localVarResp = newMessageInThreadPOSTWithHttpInfo(threadId, newMessageInThread);
        return localVarResp.getData();
    }

    /**
     * Write a new message in thread
     * Use this resource to write new message in existing thread. This resource is rate limited to 1 request per second for a user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to write message to. (required)
     * @param newMessageInThread  (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message in thread successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Message> newMessageInThreadPOSTWithHttpInfo(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull NewMessageInThread newMessageInThread) throws ApiException {
        okhttp3.Call localVarCall = newMessageInThreadPOSTValidateBeforeCall(threadId, newMessageInThread, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Write a new message in thread (asynchronously)
     * Use this resource to write new message in existing thread. This resource is rate limited to 1 request per second for a user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param threadId Identifier of thread to write message to. (required)
     * @param newMessageInThread  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message in thread successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not allowed to list messages in selected thread </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Thread not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newMessageInThreadPOSTAsync(@javax.annotation.Nonnull String threadId, @javax.annotation.Nonnull NewMessageInThread newMessageInThread, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = newMessageInThreadPOSTValidateBeforeCall(threadId, newMessageInThread, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newMessagePOST
     * @param newMessage Object representing new message. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newMessagePOSTCall(@javax.annotation.Nonnull NewMessage newMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newMessage;

        // create path and map variables
        String localVarPath = "/messaging/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newMessagePOSTValidateBeforeCall(@javax.annotation.Nonnull NewMessage newMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newMessage' is set
        if (newMessage == null) {
            throw new ApiException("Missing the required parameter 'newMessage' when calling newMessagePOST(Async)");
        }

        return newMessagePOSTCall(newMessage, _callback);

    }

    /**
     * Write a new message
     * Use this resource to write new message to recipient. This resource is rate limited to 1 request per second for a user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param newMessage Object representing new message. (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public Message newMessagePOST(@javax.annotation.Nonnull NewMessage newMessage) throws ApiException {
        ApiResponse<Message> localVarResp = newMessagePOSTWithHttpInfo(newMessage);
        return localVarResp.getData();
    }

    /**
     * Write a new message
     * Use this resource to write new message to recipient. This resource is rate limited to 1 request per second for a user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param newMessage Object representing new message. (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Message> newMessagePOSTWithHttpInfo(@javax.annotation.Nonnull NewMessage newMessage) throws ApiException {
        okhttp3.Call localVarCall = newMessagePOSTValidateBeforeCall(newMessage, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Write a new message (asynchronously)
     * Use this resource to write new message to recipient. This resource is rate limited to 1 request per second for a user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#nowa-wiadomosc\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-a-new-message\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param newMessage Object representing new message. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Message successfully written </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newMessagePOSTAsync(@javax.annotation.Nonnull NewMessage newMessage, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = newMessagePOSTValidateBeforeCall(newMessage, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadAttachmentPUT
     * @param attachmentId The identifier of attachment that will be uploaded. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment succesfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment declaration not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Exceeded size limit </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAttachmentPUTCall(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/message-attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/png",
            "image/gif",
            "image/bmp",
            "image/tiff",
            "image/jpeg",
            "application/pdf"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAttachmentPUTValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling uploadAttachmentPUT(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadAttachmentPUT(Async)");
        }

        return uploadAttachmentPUTCall(attachmentId, body, _callback);

    }

    /**
     * Upload attachment binary data
     * Use this resource to upload attachment using identifier that was declared. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#dodanie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-an-attachment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The identifier of attachment that will be uploaded. (required)
     * @param body  (required)
     * @return MessageAttachmentId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment succesfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment declaration not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Exceeded size limit </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
     </table>
     */
    public MessageAttachmentId uploadAttachmentPUT(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull File body) throws ApiException {
        ApiResponse<MessageAttachmentId> localVarResp = uploadAttachmentPUTWithHttpInfo(attachmentId, body);
        return localVarResp.getData();
    }

    /**
     * Upload attachment binary data
     * Use this resource to upload attachment using identifier that was declared. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#dodanie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-an-attachment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The identifier of attachment that will be uploaded. (required)
     * @param body  (required)
     * @return ApiResponse&lt;MessageAttachmentId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment succesfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment declaration not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Exceeded size limit </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageAttachmentId> uploadAttachmentPUTWithHttpInfo(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull File body) throws ApiException {
        okhttp3.Call localVarCall = uploadAttachmentPUTValidateBeforeCall(attachmentId, body, null);
        Type localVarReturnType = new TypeToken<MessageAttachmentId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload attachment binary data (asynchronously)
     * Use this resource to upload attachment using identifier that was declared. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-centrum-wiadomosci-XxWm2K890Fk#dodanie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-the-message-center-g05avyGlZUW#add-an-attachment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The identifier of attachment that will be uploaded. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment succesfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment declaration not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Exceeded size limit </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported mime type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAttachmentPUTAsync(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull File body, final ApiCallback<MessageAttachmentId> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAttachmentPUTValidateBeforeCall(attachmentId, body, _callback);
        Type localVarReturnType = new TypeToken<MessageAttachmentId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
