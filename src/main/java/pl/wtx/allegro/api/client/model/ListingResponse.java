/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.ListingResponseCategories;
import pl.wtx.allegro.api.client.model.ListingResponseFilters;
import pl.wtx.allegro.api.client.model.ListingResponseOffers;
import pl.wtx.allegro.api.client.model.ListingResponseSearchMeta;
import pl.wtx.allegro.api.client.model.ListingResponseSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ListingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ListingResponse {
  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  @javax.annotation.Nullable
  private ListingResponseOffers items;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  @javax.annotation.Nullable
  private ListingResponseCategories categories;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  @javax.annotation.Nullable
  private List<ListingResponseFilters> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_META = "searchMeta";
  @SerializedName(SERIALIZED_NAME_SEARCH_META)
  @javax.annotation.Nullable
  private ListingResponseSearchMeta searchMeta;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  @javax.annotation.Nullable
  private List<ListingResponseSort> sort = new ArrayList<>();

  public ListingResponse() {
  }

  public ListingResponse items(@javax.annotation.Nullable ListingResponseOffers items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public ListingResponseOffers getItems() {
    return items;
  }

  public void setItems(@javax.annotation.Nullable ListingResponseOffers items) {
    this.items = items;
  }


  public ListingResponse categories(@javax.annotation.Nullable ListingResponseCategories categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public ListingResponseCategories getCategories() {
    return categories;
  }

  public void setCategories(@javax.annotation.Nullable ListingResponseCategories categories) {
    this.categories = categories;
  }


  public ListingResponse filters(@javax.annotation.Nullable List<ListingResponseFilters> filters) {
    this.filters = filters;
    return this;
  }

  public ListingResponse addFiltersItem(ListingResponseFilters filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * An array of filters with counters available for given search. This can be used to refine the search results.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<ListingResponseFilters> getFilters() {
    return filters;
  }

  public void setFilters(@javax.annotation.Nullable List<ListingResponseFilters> filters) {
    this.filters = filters;
  }


  public ListingResponse searchMeta(@javax.annotation.Nullable ListingResponseSearchMeta searchMeta) {
    this.searchMeta = searchMeta;
    return this;
  }

  /**
   * Get searchMeta
   * @return searchMeta
   */
  @javax.annotation.Nullable
  public ListingResponseSearchMeta getSearchMeta() {
    return searchMeta;
  }

  public void setSearchMeta(@javax.annotation.Nullable ListingResponseSearchMeta searchMeta) {
    this.searchMeta = searchMeta;
  }


  public ListingResponse sort(@javax.annotation.Nullable List<ListingResponseSort> sort) {
    this.sort = sort;
    return this;
  }

  public ListingResponse addSortItem(ListingResponseSort sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * Available sorting options.
   * @return sort
   */
  @javax.annotation.Nullable
  public List<ListingResponseSort> getSort() {
    return sort;
  }

  public void setSort(@javax.annotation.Nullable List<ListingResponseSort> sort) {
    this.sort = sort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingResponse listingResponse = (ListingResponse) o;
    return Objects.equals(this.items, listingResponse.items) &&
        Objects.equals(this.categories, listingResponse.categories) &&
        Objects.equals(this.filters, listingResponse.filters) &&
        Objects.equals(this.searchMeta, listingResponse.searchMeta) &&
        Objects.equals(this.sort, listingResponse.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, categories, filters, searchMeta, sort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingResponse {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    searchMeta: ").append(toIndentedString(searchMeta)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items");
    openapiFields.add("categories");
    openapiFields.add("filters");
    openapiFields.add("searchMeta");
    openapiFields.add("sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingResponse is not found in the empty JSON string", ListingResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        ListingResponseOffers.validateJsonElement(jsonObj.get("items"));
      }
      // validate the optional field `categories`
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        ListingResponseCategories.validateJsonElement(jsonObj.get("categories"));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            ListingResponseFilters.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // validate the optional field `searchMeta`
      if (jsonObj.get("searchMeta") != null && !jsonObj.get("searchMeta").isJsonNull()) {
        ListingResponseSearchMeta.validateJsonElement(jsonObj.get("searchMeta"));
      }
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        JsonArray jsonArraysort = jsonObj.getAsJsonArray("sort");
        if (jsonArraysort != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sort").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sort` to be an array in the JSON string but got `%s`", jsonObj.get("sort").toString()));
          }

          // validate the optional field `sort` (array)
          for (int i = 0; i < jsonArraysort.size(); i++) {
            ListingResponseSort.validateJsonElement(jsonArraysort.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingResponse>() {
           @Override
           public void write(JsonWriter out, ListingResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingResponse
   * @throws IOException if the JSON string is invalid with respect to ListingResponse
   */
  public static ListingResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingResponse.class);
  }

  /**
   * Convert an instance of ListingResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

