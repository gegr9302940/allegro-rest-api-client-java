/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.BuyerPreferencesReference;
import pl.wtx.allegro.api.client.model.CheckoutFormBuyerAddressReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Buyer data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckoutFormBuyerReference {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nonnull
  private String email;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  @javax.annotation.Nonnull
  private String login;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nullable
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nullable
  private String lastName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_GUEST = "guest";
  @SerializedName(SERIALIZED_NAME_GUEST)
  @javax.annotation.Nonnull
  private Boolean guest;

  public static final String SERIALIZED_NAME_PERSONAL_IDENTITY = "personalIdentity";
  @SerializedName(SERIALIZED_NAME_PERSONAL_IDENTITY)
  @javax.annotation.Nullable
  private String personalIdentity;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nullable
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  @javax.annotation.Nullable
  private BuyerPreferencesReference preferences;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private CheckoutFormBuyerAddressReference address;

  public CheckoutFormBuyerReference() {
  }

  public CheckoutFormBuyerReference id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * buyer id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public CheckoutFormBuyerReference email(@javax.annotation.Nonnull String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nonnull String email) {
    this.email = email;
  }


  public CheckoutFormBuyerReference login(@javax.annotation.Nonnull String login) {
    this.login = login;
    return this;
  }

  /**
   * Get login
   * @return login
   */
  @javax.annotation.Nonnull
  public String getLogin() {
    return login;
  }

  public void setLogin(@javax.annotation.Nonnull String login) {
    this.login = login;
  }


  public CheckoutFormBuyerReference firstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Buyer&#39;s first name
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
  }


  public CheckoutFormBuyerReference lastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Buyer&#39;s last name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
  }


  public CheckoutFormBuyerReference companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public CheckoutFormBuyerReference guest(@javax.annotation.Nonnull Boolean guest) {
    this.guest = guest;
    return this;
  }

  /**
   * is a guest account?
   * @return guest
   */
  @javax.annotation.Nonnull
  public Boolean getGuest() {
    return guest;
  }

  public void setGuest(@javax.annotation.Nonnull Boolean guest) {
    this.guest = guest;
  }


  public CheckoutFormBuyerReference personalIdentity(@javax.annotation.Nullable String personalIdentity) {
    this.personalIdentity = personalIdentity;
    return this;
  }

  /**
   * Buyer&#39;s personal identity number (PESEL)
   * @return personalIdentity
   */
  @javax.annotation.Nullable
  public String getPersonalIdentity() {
    return personalIdentity;
  }

  public void setPersonalIdentity(@javax.annotation.Nullable String personalIdentity) {
    this.personalIdentity = personalIdentity;
  }


  public CheckoutFormBuyerReference phoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Phone number
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CheckoutFormBuyerReference preferences(@javax.annotation.Nullable BuyerPreferencesReference preferences) {
    this.preferences = preferences;
    return this;
  }

  /**
   * Get preferences
   * @return preferences
   */
  @javax.annotation.Nullable
  public BuyerPreferencesReference getPreferences() {
    return preferences;
  }

  public void setPreferences(@javax.annotation.Nullable BuyerPreferencesReference preferences) {
    this.preferences = preferences;
  }


  public CheckoutFormBuyerReference address(@javax.annotation.Nullable CheckoutFormBuyerAddressReference address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public CheckoutFormBuyerAddressReference getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable CheckoutFormBuyerAddressReference address) {
    this.address = address;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutFormBuyerReference checkoutFormBuyerReference = (CheckoutFormBuyerReference) o;
    return Objects.equals(this.id, checkoutFormBuyerReference.id) &&
        Objects.equals(this.email, checkoutFormBuyerReference.email) &&
        Objects.equals(this.login, checkoutFormBuyerReference.login) &&
        Objects.equals(this.firstName, checkoutFormBuyerReference.firstName) &&
        Objects.equals(this.lastName, checkoutFormBuyerReference.lastName) &&
        Objects.equals(this.companyName, checkoutFormBuyerReference.companyName) &&
        Objects.equals(this.guest, checkoutFormBuyerReference.guest) &&
        Objects.equals(this.personalIdentity, checkoutFormBuyerReference.personalIdentity) &&
        Objects.equals(this.phoneNumber, checkoutFormBuyerReference.phoneNumber) &&
        Objects.equals(this.preferences, checkoutFormBuyerReference.preferences) &&
        Objects.equals(this.address, checkoutFormBuyerReference.address);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, login, firstName, lastName, companyName, guest, personalIdentity, phoneNumber, preferences, address);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutFormBuyerReference {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    guest: ").append(toIndentedString(guest)).append("\n");
    sb.append("    personalIdentity: ").append(toIndentedString(personalIdentity)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("email");
    openapiFields.add("login");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("companyName");
    openapiFields.add("guest");
    openapiFields.add("personalIdentity");
    openapiFields.add("phoneNumber");
    openapiFields.add("preferences");
    openapiFields.add("address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("login");
    openapiRequiredFields.add("guest");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutFormBuyerReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutFormBuyerReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutFormBuyerReference is not found in the empty JSON string", CheckoutFormBuyerReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutFormBuyerReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutFormBuyerReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutFormBuyerReference.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("personalIdentity") != null && !jsonObj.get("personalIdentity").isJsonNull()) && !jsonObj.get("personalIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalIdentity").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        BuyerPreferencesReference.validateJsonElement(jsonObj.get("preferences"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        CheckoutFormBuyerAddressReference.validateJsonElement(jsonObj.get("address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutFormBuyerReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutFormBuyerReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutFormBuyerReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutFormBuyerReference.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutFormBuyerReference>() {
           @Override
           public void write(JsonWriter out, CheckoutFormBuyerReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutFormBuyerReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutFormBuyerReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutFormBuyerReference
   * @throws IOException if the JSON string is invalid with respect to CheckoutFormBuyerReference
   */
  public static CheckoutFormBuyerReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutFormBuyerReference.class);
  }

  /**
   * Convert an instance of CheckoutFormBuyerReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

