/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AfterSalesServicesAttachment;
import pl.wtx.allegro.api.client.model.CreateAfterSalesServiceConditionsAttachmentUsingPOSTRequest;
import java.io.File;
import pl.wtx.allegro.api.client.model.ImpliedWarrantiesListImpliedWarrantyBasic;
import pl.wtx.allegro.api.client.model.ImpliedWarrantyRequest;
import pl.wtx.allegro.api.client.model.ImpliedWarrantyResponse;
import pl.wtx.allegro.api.client.model.ReturnPoliciesListReturnPolicy;
import pl.wtx.allegro.api.client.model.ReturnPolicyRequest;
import pl.wtx.allegro.api.client.model.ReturnPolicyResponse;
import pl.wtx.allegro.api.client.model.WarrantiesListWarrantyBasic;
import pl.wtx.allegro.api.client.model.WarrantyRequest;
import pl.wtx.allegro.api.client.model.WarrantyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AfterSaleServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AfterSaleServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AfterSaleServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAfterSalesServiceConditionsAttachmentUsingPOST
     * @param createAfterSalesServiceConditionsAttachmentUsingPOSTRequest After sale services attachment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceConditionsAttachmentUsingPOSTCall(@javax.annotation.Nonnull CreateAfterSalesServiceConditionsAttachmentUsingPOSTRequest createAfterSalesServiceConditionsAttachmentUsingPOSTRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAfterSalesServiceConditionsAttachmentUsingPOSTRequest;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAfterSalesServiceConditionsAttachmentUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull CreateAfterSalesServiceConditionsAttachmentUsingPOSTRequest createAfterSalesServiceConditionsAttachmentUsingPOSTRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAfterSalesServiceConditionsAttachmentUsingPOSTRequest' is set
        if (createAfterSalesServiceConditionsAttachmentUsingPOSTRequest == null) {
            throw new ApiException("Missing the required parameter 'createAfterSalesServiceConditionsAttachmentUsingPOSTRequest' when calling createAfterSalesServiceConditionsAttachmentUsingPOST(Async)");
        }

        return createAfterSalesServiceConditionsAttachmentUsingPOSTCall(createAfterSalesServiceConditionsAttachmentUsingPOSTRequest, _callback);

    }

    /**
     * Create a warranty attachment metadata
     * You can attach PDF files to warranties. Uploading attachments flow:   1. Create an attachment object to receive an upload URL (*POST /after-sales-service-conditions/attachments*),   2. Use the upload URL to submit the PDF file (*PUT /after-sales-service-conditions/attachments/{attachmentId}*),   3. Create (or update) warranty with attachment (*POST /after-sales-service-conditions/warranties*).    Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createAfterSalesServiceConditionsAttachmentUsingPOSTRequest After sale services attachment (required)
     * @return AfterSalesServicesAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public AfterSalesServicesAttachment createAfterSalesServiceConditionsAttachmentUsingPOST(@javax.annotation.Nonnull CreateAfterSalesServiceConditionsAttachmentUsingPOSTRequest createAfterSalesServiceConditionsAttachmentUsingPOSTRequest) throws ApiException {
        ApiResponse<AfterSalesServicesAttachment> localVarResp = createAfterSalesServiceConditionsAttachmentUsingPOSTWithHttpInfo(createAfterSalesServiceConditionsAttachmentUsingPOSTRequest);
        return localVarResp.getData();
    }

    /**
     * Create a warranty attachment metadata
     * You can attach PDF files to warranties. Uploading attachments flow:   1. Create an attachment object to receive an upload URL (*POST /after-sales-service-conditions/attachments*),   2. Use the upload URL to submit the PDF file (*PUT /after-sales-service-conditions/attachments/{attachmentId}*),   3. Create (or update) warranty with attachment (*POST /after-sales-service-conditions/warranties*).    Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createAfterSalesServiceConditionsAttachmentUsingPOSTRequest After sale services attachment (required)
     * @return ApiResponse&lt;AfterSalesServicesAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AfterSalesServicesAttachment> createAfterSalesServiceConditionsAttachmentUsingPOSTWithHttpInfo(@javax.annotation.Nonnull CreateAfterSalesServiceConditionsAttachmentUsingPOSTRequest createAfterSalesServiceConditionsAttachmentUsingPOSTRequest) throws ApiException {
        okhttp3.Call localVarCall = createAfterSalesServiceConditionsAttachmentUsingPOSTValidateBeforeCall(createAfterSalesServiceConditionsAttachmentUsingPOSTRequest, null);
        Type localVarReturnType = new TypeToken<AfterSalesServicesAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a warranty attachment metadata (asynchronously)
     * You can attach PDF files to warranties. Uploading attachments flow:   1. Create an attachment object to receive an upload URL (*POST /after-sales-service-conditions/attachments*),   2. Use the upload URL to submit the PDF file (*PUT /after-sales-service-conditions/attachments/{attachmentId}*),   3. Create (or update) warranty with attachment (*POST /after-sales-service-conditions/warranties*).    Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createAfterSalesServiceConditionsAttachmentUsingPOSTRequest After sale services attachment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceConditionsAttachmentUsingPOSTAsync(@javax.annotation.Nonnull CreateAfterSalesServiceConditionsAttachmentUsingPOSTRequest createAfterSalesServiceConditionsAttachmentUsingPOSTRequest, final ApiCallback<AfterSalesServicesAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAfterSalesServiceConditionsAttachmentUsingPOSTValidateBeforeCall(createAfterSalesServiceConditionsAttachmentUsingPOSTRequest, _callback);
        Type localVarReturnType = new TypeToken<AfterSalesServicesAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAfterSalesServiceImpliedWarrantyUsingPOST
     * @param impliedWarrantyRequest Implied warranty (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceImpliedWarrantyUsingPOSTCall(@javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = impliedWarrantyRequest;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/implied-warranties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAfterSalesServiceImpliedWarrantyUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'impliedWarrantyRequest' is set
        if (impliedWarrantyRequest == null) {
            throw new ApiException("Missing the required parameter 'impliedWarrantyRequest' when calling createAfterSalesServiceImpliedWarrantyUsingPOST(Async)");
        }

        return createAfterSalesServiceImpliedWarrantyUsingPOSTCall(impliedWarrantyRequest, _callback);

    }

    /**
     * Create new user&#39;s implied warranty
     * Use this resource to create an implied warranty definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-reklamacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-implied-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyRequest Implied warranty (required)
     * @return ImpliedWarrantyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ImpliedWarrantyResponse createAfterSalesServiceImpliedWarrantyUsingPOST(@javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest) throws ApiException {
        ApiResponse<ImpliedWarrantyResponse> localVarResp = createAfterSalesServiceImpliedWarrantyUsingPOSTWithHttpInfo(impliedWarrantyRequest);
        return localVarResp.getData();
    }

    /**
     * Create new user&#39;s implied warranty
     * Use this resource to create an implied warranty definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-reklamacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-implied-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyRequest Implied warranty (required)
     * @return ApiResponse&lt;ImpliedWarrantyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImpliedWarrantyResponse> createAfterSalesServiceImpliedWarrantyUsingPOSTWithHttpInfo(@javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest) throws ApiException {
        okhttp3.Call localVarCall = createAfterSalesServiceImpliedWarrantyUsingPOSTValidateBeforeCall(impliedWarrantyRequest, null);
        Type localVarReturnType = new TypeToken<ImpliedWarrantyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new user&#39;s implied warranty (asynchronously)
     * Use this resource to create an implied warranty definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-reklamacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-implied-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyRequest Implied warranty (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceImpliedWarrantyUsingPOSTAsync(@javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest, final ApiCallback<ImpliedWarrantyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAfterSalesServiceImpliedWarrantyUsingPOSTValidateBeforeCall(impliedWarrantyRequest, _callback);
        Type localVarReturnType = new TypeToken<ImpliedWarrantyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAfterSalesServiceReturnPolicyUsingPOST
     * @param returnPolicyRequest Return Policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceReturnPolicyUsingPOSTCall(@javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnPolicyRequest;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/return-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAfterSalesServiceReturnPolicyUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'returnPolicyRequest' is set
        if (returnPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'returnPolicyRequest' when calling createAfterSalesServiceReturnPolicyUsingPOST(Async)");
        }

        return createAfterSalesServiceReturnPolicyUsingPOSTCall(returnPolicyRequest, _callback);

    }

    /**
     * Create new user&#39;s return policy
     * Use this resource to create a return policy definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-zwrotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-return-policy-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyRequest Return Policy (required)
     * @return ReturnPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ReturnPolicyResponse createAfterSalesServiceReturnPolicyUsingPOST(@javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest) throws ApiException {
        ApiResponse<ReturnPolicyResponse> localVarResp = createAfterSalesServiceReturnPolicyUsingPOSTWithHttpInfo(returnPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create new user&#39;s return policy
     * Use this resource to create a return policy definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-zwrotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-return-policy-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyRequest Return Policy (required)
     * @return ApiResponse&lt;ReturnPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnPolicyResponse> createAfterSalesServiceReturnPolicyUsingPOSTWithHttpInfo(@javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createAfterSalesServiceReturnPolicyUsingPOSTValidateBeforeCall(returnPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ReturnPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new user&#39;s return policy (asynchronously)
     * Use this resource to create a return policy definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-warunkach-zwrotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-return-policy-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyRequest Return Policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceReturnPolicyUsingPOSTAsync(@javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest, final ApiCallback<ReturnPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAfterSalesServiceReturnPolicyUsingPOSTValidateBeforeCall(returnPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ReturnPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAfterSalesServiceWarrantyUsingPOST
     * @param warrantyRequest Warranty (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceWarrantyUsingPOSTCall(@javax.annotation.Nonnull WarrantyRequest warrantyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = warrantyRequest;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/warranties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAfterSalesServiceWarrantyUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull WarrantyRequest warrantyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warrantyRequest' is set
        if (warrantyRequest == null) {
            throw new ApiException("Missing the required parameter 'warrantyRequest' when calling createAfterSalesServiceWarrantyUsingPOST(Async)");
        }

        return createAfterSalesServiceWarrantyUsingPOSTCall(warrantyRequest, _callback);

    }

    /**
     * Create new user&#39;s warranty
     * Use this resource to create a warranty definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyRequest Warranty (required)
     * @return WarrantyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public WarrantyResponse createAfterSalesServiceWarrantyUsingPOST(@javax.annotation.Nonnull WarrantyRequest warrantyRequest) throws ApiException {
        ApiResponse<WarrantyResponse> localVarResp = createAfterSalesServiceWarrantyUsingPOSTWithHttpInfo(warrantyRequest);
        return localVarResp.getData();
    }

    /**
     * Create new user&#39;s warranty
     * Use this resource to create a warranty definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyRequest Warranty (required)
     * @return ApiResponse&lt;WarrantyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarrantyResponse> createAfterSalesServiceWarrantyUsingPOSTWithHttpInfo(@javax.annotation.Nonnull WarrantyRequest warrantyRequest) throws ApiException {
        okhttp3.Call localVarCall = createAfterSalesServiceWarrantyUsingPOSTValidateBeforeCall(warrantyRequest, null);
        Type localVarReturnType = new TypeToken<WarrantyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new user&#39;s warranty (asynchronously)
     * Use this resource to create a warranty definition. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-informacje-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyRequest Warranty (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAfterSalesServiceWarrantyUsingPOSTAsync(@javax.annotation.Nonnull WarrantyRequest warrantyRequest, final ApiCallback<WarrantyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAfterSalesServiceWarrantyUsingPOSTValidateBeforeCall(warrantyRequest, _callback);
        Type localVarReturnType = new TypeToken<WarrantyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAfterSalesServiceReturnPolicyUsingDELETE
     * @param returnPolicyId The ID of the return policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAfterSalesServiceReturnPolicyUsingDELETECall(@javax.annotation.Nonnull String returnPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/return-policies/{returnPolicyId}"
            .replace("{" + "returnPolicyId" + "}", localVarApiClient.escapeString(returnPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAfterSalesServiceReturnPolicyUsingDELETEValidateBeforeCall(@javax.annotation.Nonnull String returnPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'returnPolicyId' is set
        if (returnPolicyId == null) {
            throw new ApiException("Missing the required parameter 'returnPolicyId' when calling deleteAfterSalesServiceReturnPolicyUsingDELETE(Async)");
        }

        return deleteAfterSalesServiceReturnPolicyUsingDELETECall(returnPolicyId, _callback);

    }

    /**
     * Delete the user&#39;s return policy
     * Use this resource to delete a return policy definition.
     * @param returnPolicyId The ID of the return policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAfterSalesServiceReturnPolicyUsingDELETE(@javax.annotation.Nonnull String returnPolicyId) throws ApiException {
        deleteAfterSalesServiceReturnPolicyUsingDELETEWithHttpInfo(returnPolicyId);
    }

    /**
     * Delete the user&#39;s return policy
     * Use this resource to delete a return policy definition.
     * @param returnPolicyId The ID of the return policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAfterSalesServiceReturnPolicyUsingDELETEWithHttpInfo(@javax.annotation.Nonnull String returnPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deleteAfterSalesServiceReturnPolicyUsingDELETEValidateBeforeCall(returnPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the user&#39;s return policy (asynchronously)
     * Use this resource to delete a return policy definition.
     * @param returnPolicyId The ID of the return policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAfterSalesServiceReturnPolicyUsingDELETEAsync(@javax.annotation.Nonnull String returnPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAfterSalesServiceReturnPolicyUsingDELETEValidateBeforeCall(returnPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAfterSalesServiceImpliedWarrantyUsingGET
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAfterSalesServiceImpliedWarrantyUsingGETCall(@javax.annotation.Nonnull String impliedWarrantyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/implied-warranties/{impliedWarrantyId}"
            .replace("{" + "impliedWarrantyId" + "}", localVarApiClient.escapeString(impliedWarrantyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAfterSalesServiceImpliedWarrantyUsingGETValidateBeforeCall(@javax.annotation.Nonnull String impliedWarrantyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'impliedWarrantyId' is set
        if (impliedWarrantyId == null) {
            throw new ApiException("Missing the required parameter 'impliedWarrantyId' when calling getAfterSalesServiceImpliedWarrantyUsingGET(Async)");
        }

        return getAfterSalesServiceImpliedWarrantyUsingGETCall(impliedWarrantyId, _callback);

    }

    /**
     * Get the user&#39;s implied warranty
     * Use this resource to get an implied warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @return ImpliedWarrantyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ImpliedWarrantyResponse getAfterSalesServiceImpliedWarrantyUsingGET(@javax.annotation.Nonnull String impliedWarrantyId) throws ApiException {
        ApiResponse<ImpliedWarrantyResponse> localVarResp = getAfterSalesServiceImpliedWarrantyUsingGETWithHttpInfo(impliedWarrantyId);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s implied warranty
     * Use this resource to get an implied warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @return ApiResponse&lt;ImpliedWarrantyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImpliedWarrantyResponse> getAfterSalesServiceImpliedWarrantyUsingGETWithHttpInfo(@javax.annotation.Nonnull String impliedWarrantyId) throws ApiException {
        okhttp3.Call localVarCall = getAfterSalesServiceImpliedWarrantyUsingGETValidateBeforeCall(impliedWarrantyId, null);
        Type localVarReturnType = new TypeToken<ImpliedWarrantyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s implied warranty (asynchronously)
     * Use this resource to get an implied warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAfterSalesServiceImpliedWarrantyUsingGETAsync(@javax.annotation.Nonnull String impliedWarrantyId, final ApiCallback<ImpliedWarrantyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAfterSalesServiceImpliedWarrantyUsingGETValidateBeforeCall(impliedWarrantyId, _callback);
        Type localVarReturnType = new TypeToken<ImpliedWarrantyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAfterSalesServiceReturnPolicyUsingGET
     * @param returnPolicyId The ID of the return policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAfterSalesServiceReturnPolicyUsingGETCall(@javax.annotation.Nonnull String returnPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/return-policies/{returnPolicyId}"
            .replace("{" + "returnPolicyId" + "}", localVarApiClient.escapeString(returnPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAfterSalesServiceReturnPolicyUsingGETValidateBeforeCall(@javax.annotation.Nonnull String returnPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'returnPolicyId' is set
        if (returnPolicyId == null) {
            throw new ApiException("Missing the required parameter 'returnPolicyId' when calling getAfterSalesServiceReturnPolicyUsingGET(Async)");
        }

        return getAfterSalesServiceReturnPolicyUsingGETCall(returnPolicyId, _callback);

    }

    /**
     * Get the user&#39;s return policy
     * Use this resource to get a return policy details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyId The ID of the return policy. (required)
     * @return ReturnPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ReturnPolicyResponse getAfterSalesServiceReturnPolicyUsingGET(@javax.annotation.Nonnull String returnPolicyId) throws ApiException {
        ApiResponse<ReturnPolicyResponse> localVarResp = getAfterSalesServiceReturnPolicyUsingGETWithHttpInfo(returnPolicyId);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s return policy
     * Use this resource to get a return policy details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyId The ID of the return policy. (required)
     * @return ApiResponse&lt;ReturnPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnPolicyResponse> getAfterSalesServiceReturnPolicyUsingGETWithHttpInfo(@javax.annotation.Nonnull String returnPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getAfterSalesServiceReturnPolicyUsingGETValidateBeforeCall(returnPolicyId, null);
        Type localVarReturnType = new TypeToken<ReturnPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s return policy (asynchronously)
     * Use this resource to get a return policy details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyId The ID of the return policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAfterSalesServiceReturnPolicyUsingGETAsync(@javax.annotation.Nonnull String returnPolicyId, final ApiCallback<ReturnPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAfterSalesServiceReturnPolicyUsingGETValidateBeforeCall(returnPolicyId, _callback);
        Type localVarReturnType = new TypeToken<ReturnPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAfterSalesServiceWarrantyUsingGET
     * @param warrantyId The ID of the warranty. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAfterSalesServiceWarrantyUsingGETCall(@javax.annotation.Nonnull String warrantyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/warranties/{warrantyId}"
            .replace("{" + "warrantyId" + "}", localVarApiClient.escapeString(warrantyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAfterSalesServiceWarrantyUsingGETValidateBeforeCall(@javax.annotation.Nonnull String warrantyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warrantyId' is set
        if (warrantyId == null) {
            throw new ApiException("Missing the required parameter 'warrantyId' when calling getAfterSalesServiceWarrantyUsingGET(Async)");
        }

        return getAfterSalesServiceWarrantyUsingGETCall(warrantyId, _callback);

    }

    /**
     * Get the user&#39;s warranty
     * Use this resource to get a warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyId The ID of the warranty. (required)
     * @return WarrantyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WarrantyResponse getAfterSalesServiceWarrantyUsingGET(@javax.annotation.Nonnull String warrantyId) throws ApiException {
        ApiResponse<WarrantyResponse> localVarResp = getAfterSalesServiceWarrantyUsingGETWithHttpInfo(warrantyId);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s warranty
     * Use this resource to get a warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyId The ID of the warranty. (required)
     * @return ApiResponse&lt;WarrantyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarrantyResponse> getAfterSalesServiceWarrantyUsingGETWithHttpInfo(@javax.annotation.Nonnull String warrantyId) throws ApiException {
        okhttp3.Call localVarCall = getAfterSalesServiceWarrantyUsingGETValidateBeforeCall(warrantyId, null);
        Type localVarReturnType = new TypeToken<WarrantyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s warranty (asynchronously)
     * Use this resource to get a warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyId The ID of the warranty. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAfterSalesServiceWarrantyUsingGETAsync(@javax.annotation.Nonnull String warrantyId, final ApiCallback<WarrantyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAfterSalesServiceWarrantyUsingGETValidateBeforeCall(warrantyId, _callback);
        Type localVarReturnType = new TypeToken<WarrantyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicSellerListingUsingGET
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicSellerListingUsingGETCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/implied-warranties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicSellerListingUsingGETValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return getPublicSellerListingUsingGETCall(limit, offset, _callback);

    }

    /**
     * Get the user&#39;s implied warranties
     * Use this resource to get seller implied warranties listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ImpliedWarrantiesListImpliedWarrantyBasic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ImpliedWarrantiesListImpliedWarrantyBasic getPublicSellerListingUsingGET(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ImpliedWarrantiesListImpliedWarrantyBasic> localVarResp = getPublicSellerListingUsingGETWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s implied warranties
     * Use this resource to get seller implied warranties listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;ImpliedWarrantiesListImpliedWarrantyBasic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImpliedWarrantiesListImpliedWarrantyBasic> getPublicSellerListingUsingGETWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPublicSellerListingUsingGETValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ImpliedWarrantiesListImpliedWarrantyBasic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s implied warranties (asynchronously)
     * Use this resource to get seller implied warranties listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-reklamacji-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-implied-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicSellerListingUsingGETAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ImpliedWarrantiesListImpliedWarrantyBasic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicSellerListingUsingGETValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ImpliedWarrantiesListImpliedWarrantyBasic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicSellerListingUsingGET1
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicSellerListingUsingGET1Call(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/return-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicSellerListingUsingGET1ValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return getPublicSellerListingUsingGET1Call(limit, offset, _callback);

    }

    /**
     * Get the user&#39;s return policies
     * Use this resource to get seller return policies listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ReturnPoliciesListReturnPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ReturnPoliciesListReturnPolicy getPublicSellerListingUsingGET1(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ReturnPoliciesListReturnPolicy> localVarResp = getPublicSellerListingUsingGET1WithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s return policies
     * Use this resource to get seller return policies listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;ReturnPoliciesListReturnPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnPoliciesListReturnPolicy> getPublicSellerListingUsingGET1WithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPublicSellerListingUsingGET1ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ReturnPoliciesListReturnPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s return policies (asynchronously)
     * Use this resource to get seller return policies listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-warunki-zwrotow-przypisane-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-return-policies-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicSellerListingUsingGET1Async(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ReturnPoliciesListReturnPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicSellerListingUsingGET1ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ReturnPoliciesListReturnPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicSellerListingUsingGET2
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicSellerListingUsingGET2Call(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/warranties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicSellerListingUsingGET2ValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return getPublicSellerListingUsingGET2Call(limit, offset, _callback);

    }

    /**
     * Get the user&#39;s warranties
     * Use this resource to get seller warranties listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return WarrantiesListWarrantyBasic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WarrantiesListWarrantyBasic getPublicSellerListingUsingGET2(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<WarrantiesListWarrantyBasic> localVarResp = getPublicSellerListingUsingGET2WithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s warranties
     * Use this resource to get seller warranties listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;WarrantiesListWarrantyBasic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarrantiesListWarrantyBasic> getPublicSellerListingUsingGET2WithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPublicSellerListingUsingGET2ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<WarrantiesListWarrantyBasic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s warranties (asynchronously)
     * Use this resource to get seller warranties listing. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-informacje-o-gwarancjach-przypisanych-do-konta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-warranties-assigned-to-the-account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 60)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicSellerListingUsingGET2Async(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<WarrantiesListWarrantyBasic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicSellerListingUsingGET2ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WarrantiesListWarrantyBasic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAfterSalesServiceImpliedWarrantyUsingPUT
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @param impliedWarrantyRequest Implied warranty (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAfterSalesServiceImpliedWarrantyUsingPUTCall(@javax.annotation.Nonnull String impliedWarrantyId, @javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = impliedWarrantyRequest;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/implied-warranties/{impliedWarrantyId}"
            .replace("{" + "impliedWarrantyId" + "}", localVarApiClient.escapeString(impliedWarrantyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAfterSalesServiceImpliedWarrantyUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String impliedWarrantyId, @javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'impliedWarrantyId' is set
        if (impliedWarrantyId == null) {
            throw new ApiException("Missing the required parameter 'impliedWarrantyId' when calling updateAfterSalesServiceImpliedWarrantyUsingPUT(Async)");
        }

        // verify the required parameter 'impliedWarrantyRequest' is set
        if (impliedWarrantyRequest == null) {
            throw new ApiException("Missing the required parameter 'impliedWarrantyRequest' when calling updateAfterSalesServiceImpliedWarrantyUsingPUT(Async)");
        }

        return updateAfterSalesServiceImpliedWarrantyUsingPUTCall(impliedWarrantyId, impliedWarrantyRequest, _callback);

    }

    /**
     * Change the user&#39;s implied warranty
     * Use this resource to modify the implied warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-reklamacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-implied-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @param impliedWarrantyRequest Implied warranty (required)
     * @return ImpliedWarrantyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ImpliedWarrantyResponse updateAfterSalesServiceImpliedWarrantyUsingPUT(@javax.annotation.Nonnull String impliedWarrantyId, @javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest) throws ApiException {
        ApiResponse<ImpliedWarrantyResponse> localVarResp = updateAfterSalesServiceImpliedWarrantyUsingPUTWithHttpInfo(impliedWarrantyId, impliedWarrantyRequest);
        return localVarResp.getData();
    }

    /**
     * Change the user&#39;s implied warranty
     * Use this resource to modify the implied warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-reklamacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-implied-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @param impliedWarrantyRequest Implied warranty (required)
     * @return ApiResponse&lt;ImpliedWarrantyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImpliedWarrantyResponse> updateAfterSalesServiceImpliedWarrantyUsingPUTWithHttpInfo(@javax.annotation.Nonnull String impliedWarrantyId, @javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAfterSalesServiceImpliedWarrantyUsingPUTValidateBeforeCall(impliedWarrantyId, impliedWarrantyRequest, null);
        Type localVarReturnType = new TypeToken<ImpliedWarrantyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the user&#39;s implied warranty (asynchronously)
     * Use this resource to modify the implied warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-reklamacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-implied-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param impliedWarrantyId The ID of the implied warranty. (required)
     * @param impliedWarrantyRequest Implied warranty (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAfterSalesServiceImpliedWarrantyUsingPUTAsync(@javax.annotation.Nonnull String impliedWarrantyId, @javax.annotation.Nonnull ImpliedWarrantyRequest impliedWarrantyRequest, final ApiCallback<ImpliedWarrantyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAfterSalesServiceImpliedWarrantyUsingPUTValidateBeforeCall(impliedWarrantyId, impliedWarrantyRequest, _callback);
        Type localVarReturnType = new TypeToken<ImpliedWarrantyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAfterSalesServiceReturnPolicyUsingPUT
     * @param returnPolicyId The ID of the return policy. (required)
     * @param returnPolicyRequest Return Policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAfterSalesServiceReturnPolicyUsingPUTCall(@javax.annotation.Nonnull String returnPolicyId, @javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnPolicyRequest;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/return-policies/{returnPolicyId}"
            .replace("{" + "returnPolicyId" + "}", localVarApiClient.escapeString(returnPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAfterSalesServiceReturnPolicyUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String returnPolicyId, @javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'returnPolicyId' is set
        if (returnPolicyId == null) {
            throw new ApiException("Missing the required parameter 'returnPolicyId' when calling updateAfterSalesServiceReturnPolicyUsingPUT(Async)");
        }

        // verify the required parameter 'returnPolicyRequest' is set
        if (returnPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'returnPolicyRequest' when calling updateAfterSalesServiceReturnPolicyUsingPUT(Async)");
        }

        return updateAfterSalesServiceReturnPolicyUsingPUTCall(returnPolicyId, returnPolicyRequest, _callback);

    }

    /**
     * Change the user&#39;s return policy
     * Use this resource to modify the return policy details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-zwrotu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-return-policy-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyId The ID of the return policy. (required)
     * @param returnPolicyRequest Return Policy (required)
     * @return ReturnPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ReturnPolicyResponse updateAfterSalesServiceReturnPolicyUsingPUT(@javax.annotation.Nonnull String returnPolicyId, @javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest) throws ApiException {
        ApiResponse<ReturnPolicyResponse> localVarResp = updateAfterSalesServiceReturnPolicyUsingPUTWithHttpInfo(returnPolicyId, returnPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Change the user&#39;s return policy
     * Use this resource to modify the return policy details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-zwrotu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-return-policy-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyId The ID of the return policy. (required)
     * @param returnPolicyRequest Return Policy (required)
     * @return ApiResponse&lt;ReturnPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnPolicyResponse> updateAfterSalesServiceReturnPolicyUsingPUTWithHttpInfo(@javax.annotation.Nonnull String returnPolicyId, @javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAfterSalesServiceReturnPolicyUsingPUTValidateBeforeCall(returnPolicyId, returnPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ReturnPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the user&#39;s return policy (asynchronously)
     * Use this resource to modify the return policy details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-warunkach-zwrotu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-return-policy-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param returnPolicyId The ID of the return policy. (required)
     * @param returnPolicyRequest Return Policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAfterSalesServiceReturnPolicyUsingPUTAsync(@javax.annotation.Nonnull String returnPolicyId, @javax.annotation.Nonnull ReturnPolicyRequest returnPolicyRequest, final ApiCallback<ReturnPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAfterSalesServiceReturnPolicyUsingPUTValidateBeforeCall(returnPolicyId, returnPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ReturnPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAfterSalesServiceWarrantyUsingPUT
     * @param warrantyId The ID of the warranty. (required)
     * @param warrantyRequest Warranty (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAfterSalesServiceWarrantyUsingPUTCall(@javax.annotation.Nonnull String warrantyId, @javax.annotation.Nonnull WarrantyRequest warrantyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = warrantyRequest;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/warranties/{warrantyId}"
            .replace("{" + "warrantyId" + "}", localVarApiClient.escapeString(warrantyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAfterSalesServiceWarrantyUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String warrantyId, @javax.annotation.Nonnull WarrantyRequest warrantyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warrantyId' is set
        if (warrantyId == null) {
            throw new ApiException("Missing the required parameter 'warrantyId' when calling updateAfterSalesServiceWarrantyUsingPUT(Async)");
        }

        // verify the required parameter 'warrantyRequest' is set
        if (warrantyRequest == null) {
            throw new ApiException("Missing the required parameter 'warrantyRequest' when calling updateAfterSalesServiceWarrantyUsingPUT(Async)");
        }

        return updateAfterSalesServiceWarrantyUsingPUTCall(warrantyId, warrantyRequest, _callback);

    }

    /**
     * Change the user&#39;s warranty
     * Use this resource to modify the warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyId The ID of the warranty. (required)
     * @param warrantyRequest Warranty (required)
     * @return WarrantyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public WarrantyResponse updateAfterSalesServiceWarrantyUsingPUT(@javax.annotation.Nonnull String warrantyId, @javax.annotation.Nonnull WarrantyRequest warrantyRequest) throws ApiException {
        ApiResponse<WarrantyResponse> localVarResp = updateAfterSalesServiceWarrantyUsingPUTWithHttpInfo(warrantyId, warrantyRequest);
        return localVarResp.getData();
    }

    /**
     * Change the user&#39;s warranty
     * Use this resource to modify the warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyId The ID of the warranty. (required)
     * @param warrantyRequest Warranty (required)
     * @return ApiResponse&lt;WarrantyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarrantyResponse> updateAfterSalesServiceWarrantyUsingPUTWithHttpInfo(@javax.annotation.Nonnull String warrantyId, @javax.annotation.Nonnull WarrantyRequest warrantyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAfterSalesServiceWarrantyUsingPUTValidateBeforeCall(warrantyId, warrantyRequest, null);
        Type localVarReturnType = new TypeToken<WarrantyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the user&#39;s warranty (asynchronously)
     * Use this resource to modify the warranty details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-edytowac-informacje-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-update-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param warrantyId The ID of the warranty. (required)
     * @param warrantyRequest Warranty (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAfterSalesServiceWarrantyUsingPUTAsync(@javax.annotation.Nonnull String warrantyId, @javax.annotation.Nonnull WarrantyRequest warrantyRequest, final ApiCallback<WarrantyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAfterSalesServiceWarrantyUsingPUTValidateBeforeCall(warrantyId, warrantyRequest, _callback);
        Type localVarReturnType = new TypeToken<WarrantyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadAfterSalesServiceConditionsAttachmentUsingPUT
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid file content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAfterSalesServiceConditionsAttachmentUsingPUTCall(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.{environment}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/after-sales-service-conditions/attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/pdf"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAfterSalesServiceConditionsAttachmentUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling uploadAfterSalesServiceConditionsAttachmentUsingPUT(Async)");
        }

        return uploadAfterSalesServiceConditionsAttachmentUsingPUTCall(attachmentId, body, _callback);

    }

    /**
     * Upload an warranty attachment
     * Upload an after sale services attachment. This operation should be used after creating an offer attachment with *POST /sale/offer-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /after-sales-service-conditions/attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @return AfterSalesServicesAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid file content. </td><td>  -  </td></tr>
     </table>
     */
    public AfterSalesServicesAttachment uploadAfterSalesServiceConditionsAttachmentUsingPUT(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body) throws ApiException {
        ApiResponse<AfterSalesServicesAttachment> localVarResp = uploadAfterSalesServiceConditionsAttachmentUsingPUTWithHttpInfo(attachmentId, body);
        return localVarResp.getData();
    }

    /**
     * Upload an warranty attachment
     * Upload an after sale services attachment. This operation should be used after creating an offer attachment with *POST /sale/offer-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /after-sales-service-conditions/attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AfterSalesServicesAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid file content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AfterSalesServicesAttachment> uploadAfterSalesServiceConditionsAttachmentUsingPUTWithHttpInfo(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body) throws ApiException {
        okhttp3.Call localVarCall = uploadAfterSalesServiceConditionsAttachmentUsingPUTValidateBeforeCall(attachmentId, body, null);
        Type localVarReturnType = new TypeToken<AfterSalesServicesAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload an warranty attachment (asynchronously)
     * Upload an after sale services attachment. This operation should be used after creating an offer attachment with *POST /sale/offer-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /after-sales-service-conditions/attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-zalacznik-do-informacji-o-gwarancjach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-attachment-to-warranty-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid file content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAfterSalesServiceConditionsAttachmentUsingPUTAsync(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body, final ApiCallback<AfterSalesServicesAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAfterSalesServiceConditionsAttachmentUsingPUTValidateBeforeCall(attachmentId, body, _callback);
        Type localVarReturnType = new TypeToken<AfterSalesServicesAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
