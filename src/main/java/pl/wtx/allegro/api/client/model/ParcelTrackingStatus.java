/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ParcelTrackingStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ParcelTrackingStatus {
  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurredAt";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime occurredAt;

  /**
   * Status of the shipment. - &#x60;AVAILABLE_FOR_PICKUP&#x60; - The parcel is awaiting for pickup. - &#x60;DELIVERED&#x60; - The parcel was delivered to the receiver / collected by the receiver. - &#x60;IN_TRANSIT&#x60; - The parcel is on its way to the receiver. The status includes events such as acceptance of the shipment by the carrier, arriving at the hub or redirecting to another address. - &#x60;ISSUE&#x60; - Problem with shipment. It includes events such as the parcel was refused by the receiver or was lost. - &#x60;NOTICE_LEFT&#x60; - A notice was left because of an unsuccessful delivery attempt (for example, due to nobody was at the delivery address). - &#x60;PENDING&#x60; - The shipment has been prepared and it is awaiting to be sent. - &#x60;RELEASED_FOR_DELIVERY&#x60; - The parcel has been released for delivery to its final destination. - &#x60;RETURNED&#x60; - The parcel is being or has been returned to the sender.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    AVAILABLE_FOR_PICKUP("AVAILABLE_FOR_PICKUP"),
    
    DELIVERED("DELIVERED"),
    
    IN_TRANSIT("IN_TRANSIT"),
    
    ISSUE("ISSUE"),
    
    NOTICE_LEFT("NOTICE_LEFT"),
    
    PENDING("PENDING"),
    
    RELEASED_FOR_DELIVERY("RELEASED_FOR_DELIVERY"),
    
    RETURNED("RETURNED");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nonnull
  private CodeEnum code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public ParcelTrackingStatus() {
  }

  public ParcelTrackingStatus occurredAt(@javax.annotation.Nonnull OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * Actual shipment status change time in ISO 8601 format
   * @return occurredAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(@javax.annotation.Nonnull OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
  }


  public ParcelTrackingStatus code(@javax.annotation.Nonnull CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Status of the shipment. - &#x60;AVAILABLE_FOR_PICKUP&#x60; - The parcel is awaiting for pickup. - &#x60;DELIVERED&#x60; - The parcel was delivered to the receiver / collected by the receiver. - &#x60;IN_TRANSIT&#x60; - The parcel is on its way to the receiver. The status includes events such as acceptance of the shipment by the carrier, arriving at the hub or redirecting to another address. - &#x60;ISSUE&#x60; - Problem with shipment. It includes events such as the parcel was refused by the receiver or was lost. - &#x60;NOTICE_LEFT&#x60; - A notice was left because of an unsuccessful delivery attempt (for example, due to nobody was at the delivery address). - &#x60;PENDING&#x60; - The shipment has been prepared and it is awaiting to be sent. - &#x60;RELEASED_FOR_DELIVERY&#x60; - The parcel has been released for delivery to its final destination. - &#x60;RETURNED&#x60; - The parcel is being or has been returned to the sender.
   * @return code
   */
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nonnull CodeEnum code) {
    this.code = code;
  }


  public ParcelTrackingStatus description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description for a given status, mainly intended to describe the problem with the shipment
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParcelTrackingStatus parcelTrackingStatus = (ParcelTrackingStatus) o;
    return Objects.equals(this.occurredAt, parcelTrackingStatus.occurredAt) &&
        Objects.equals(this.code, parcelTrackingStatus.code) &&
        Objects.equals(this.description, parcelTrackingStatus.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(occurredAt, code, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParcelTrackingStatus {\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("occurredAt");
    openapiFields.add("code");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("occurredAt");
    openapiRequiredFields.add("code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParcelTrackingStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParcelTrackingStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParcelTrackingStatus is not found in the empty JSON string", ParcelTrackingStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParcelTrackingStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParcelTrackingStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParcelTrackingStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParcelTrackingStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParcelTrackingStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParcelTrackingStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParcelTrackingStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ParcelTrackingStatus>() {
           @Override
           public void write(JsonWriter out, ParcelTrackingStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParcelTrackingStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParcelTrackingStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParcelTrackingStatus
   * @throws IOException if the JSON string is invalid with respect to ParcelTrackingStatus
   */
  public static ParcelTrackingStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParcelTrackingStatus.class);
  }

  /**
   * Convert an instance of ParcelTrackingStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

