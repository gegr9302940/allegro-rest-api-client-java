/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.RefusalReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Offer additional marketplaces visibility information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AdditionalMarketplacesVisibility {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  /**
   * Marketplace visibility qualification status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    APPROVED("APPROVED"),
    
    REFUSED("REFUSED"),
    
    IN_PROGRESS("IN_PROGRESS");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_REFUSAL_REASONS = "refusalReasons";
  @SerializedName(SERIALIZED_NAME_REFUSAL_REASONS)
  @javax.annotation.Nullable
  private List<RefusalReason> refusalReasons = new ArrayList<>();

  public AdditionalMarketplacesVisibility() {
  }

  public AdditionalMarketplacesVisibility id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Additional marketplace ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public AdditionalMarketplacesVisibility status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Marketplace visibility qualification status.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public AdditionalMarketplacesVisibility refusalReasons(@javax.annotation.Nullable List<RefusalReason> refusalReasons) {
    this.refusalReasons = refusalReasons;
    return this;
  }

  public AdditionalMarketplacesVisibility addRefusalReasonsItem(RefusalReason refusalReasonsItem) {
    if (this.refusalReasons == null) {
      this.refusalReasons = new ArrayList<>();
    }
    this.refusalReasons.add(refusalReasonsItem);
    return this;
  }

  /**
   * Reasons of visibility refusal.
   * @return refusalReasons
   */
  @javax.annotation.Nullable
  public List<RefusalReason> getRefusalReasons() {
    return refusalReasons;
  }

  public void setRefusalReasons(@javax.annotation.Nullable List<RefusalReason> refusalReasons) {
    this.refusalReasons = refusalReasons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalMarketplacesVisibility additionalMarketplacesVisibility = (AdditionalMarketplacesVisibility) o;
    return Objects.equals(this.id, additionalMarketplacesVisibility.id) &&
        Objects.equals(this.status, additionalMarketplacesVisibility.status) &&
        Objects.equals(this.refusalReasons, additionalMarketplacesVisibility.refusalReasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, refusalReasons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalMarketplacesVisibility {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    refusalReasons: ").append(toIndentedString(refusalReasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("refusalReasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalMarketplacesVisibility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalMarketplacesVisibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalMarketplacesVisibility is not found in the empty JSON string", AdditionalMarketplacesVisibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalMarketplacesVisibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalMarketplacesVisibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdditionalMarketplacesVisibility.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (jsonObj.get("refusalReasons") != null && !jsonObj.get("refusalReasons").isJsonNull()) {
        JsonArray jsonArrayrefusalReasons = jsonObj.getAsJsonArray("refusalReasons");
        if (jsonArrayrefusalReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refusalReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refusalReasons` to be an array in the JSON string but got `%s`", jsonObj.get("refusalReasons").toString()));
          }

          // validate the optional field `refusalReasons` (array)
          for (int i = 0; i < jsonArrayrefusalReasons.size(); i++) {
            RefusalReason.validateJsonElement(jsonArrayrefusalReasons.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalMarketplacesVisibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalMarketplacesVisibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalMarketplacesVisibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalMarketplacesVisibility.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalMarketplacesVisibility>() {
           @Override
           public void write(JsonWriter out, AdditionalMarketplacesVisibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalMarketplacesVisibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalMarketplacesVisibility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalMarketplacesVisibility
   * @throws IOException if the JSON string is invalid with respect to AdditionalMarketplacesVisibility
   */
  public static AdditionalMarketplacesVisibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalMarketplacesVisibility.class);
  }

  /**
   * Convert an instance of AdditionalMarketplacesVisibility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

