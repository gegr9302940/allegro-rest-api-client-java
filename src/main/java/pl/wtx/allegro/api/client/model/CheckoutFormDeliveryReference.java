/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.CheckoutFormDeliveryAddress;
import pl.wtx.allegro.api.client.model.CheckoutFormDeliveryCancellation;
import pl.wtx.allegro.api.client.model.CheckoutFormDeliveryMethod;
import pl.wtx.allegro.api.client.model.CheckoutFormDeliveryPickupPoint;
import pl.wtx.allegro.api.client.model.CheckoutFormDeliveryTime;
import pl.wtx.allegro.api.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CheckoutFormDeliveryReference
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckoutFormDeliveryReference {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private CheckoutFormDeliveryAddress address;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nullable
  private CheckoutFormDeliveryMethod method;

  public static final String SERIALIZED_NAME_PICKUP_POINT = "pickupPoint";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINT)
  @javax.annotation.Nullable
  private CheckoutFormDeliveryPickupPoint pickupPoint;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  @javax.annotation.Nullable
  private Price cost;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private CheckoutFormDeliveryTime time;

  public static final String SERIALIZED_NAME_SMART = "smart";
  @SerializedName(SERIALIZED_NAME_SMART)
  @javax.annotation.Nullable
  private Boolean smart;

  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  @javax.annotation.Nullable
  private CheckoutFormDeliveryCancellation cancellation;

  public static final String SERIALIZED_NAME_CALCULATED_NUMBER_OF_PACKAGES = "calculatedNumberOfPackages";
  @SerializedName(SERIALIZED_NAME_CALCULATED_NUMBER_OF_PACKAGES)
  @javax.annotation.Nullable
  private Integer calculatedNumberOfPackages;

  public CheckoutFormDeliveryReference() {
  }

  public CheckoutFormDeliveryReference address(@javax.annotation.Nullable CheckoutFormDeliveryAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public CheckoutFormDeliveryAddress getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable CheckoutFormDeliveryAddress address) {
    this.address = address;
  }


  public CheckoutFormDeliveryReference method(@javax.annotation.Nullable CheckoutFormDeliveryMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public CheckoutFormDeliveryMethod getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nullable CheckoutFormDeliveryMethod method) {
    this.method = method;
  }


  public CheckoutFormDeliveryReference pickupPoint(@javax.annotation.Nullable CheckoutFormDeliveryPickupPoint pickupPoint) {
    this.pickupPoint = pickupPoint;
    return this;
  }

  /**
   * Get pickupPoint
   * @return pickupPoint
   */
  @javax.annotation.Nullable
  public CheckoutFormDeliveryPickupPoint getPickupPoint() {
    return pickupPoint;
  }

  public void setPickupPoint(@javax.annotation.Nullable CheckoutFormDeliveryPickupPoint pickupPoint) {
    this.pickupPoint = pickupPoint;
  }


  public CheckoutFormDeliveryReference cost(@javax.annotation.Nullable Price cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public Price getCost() {
    return cost;
  }

  public void setCost(@javax.annotation.Nullable Price cost) {
    this.cost = cost;
  }


  public CheckoutFormDeliveryReference time(@javax.annotation.Nullable CheckoutFormDeliveryTime time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public CheckoutFormDeliveryTime getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable CheckoutFormDeliveryTime time) {
    this.time = time;
  }


  public CheckoutFormDeliveryReference smart(@javax.annotation.Nullable Boolean smart) {
    this.smart = smart;
    return this;
  }

  /**
   * Buyer used a SMART option
   * @return smart
   */
  @javax.annotation.Nullable
  public Boolean getSmart() {
    return smart;
  }

  public void setSmart(@javax.annotation.Nullable Boolean smart) {
    this.smart = smart;
  }


  public CheckoutFormDeliveryReference cancellation(@javax.annotation.Nullable CheckoutFormDeliveryCancellation cancellation) {
    this.cancellation = cancellation;
    return this;
  }

  /**
   * Get cancellation
   * @return cancellation
   */
  @javax.annotation.Nullable
  public CheckoutFormDeliveryCancellation getCancellation() {
    return cancellation;
  }

  public void setCancellation(@javax.annotation.Nullable CheckoutFormDeliveryCancellation cancellation) {
    this.cancellation = cancellation;
  }


  public CheckoutFormDeliveryReference calculatedNumberOfPackages(@javax.annotation.Nullable Integer calculatedNumberOfPackages) {
    this.calculatedNumberOfPackages = calculatedNumberOfPackages;
    return this;
  }

  /**
   * Calculated number of packages.
   * minimum: 0
   * @return calculatedNumberOfPackages
   */
  @javax.annotation.Nullable
  public Integer getCalculatedNumberOfPackages() {
    return calculatedNumberOfPackages;
  }

  public void setCalculatedNumberOfPackages(@javax.annotation.Nullable Integer calculatedNumberOfPackages) {
    this.calculatedNumberOfPackages = calculatedNumberOfPackages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutFormDeliveryReference checkoutFormDeliveryReference = (CheckoutFormDeliveryReference) o;
    return Objects.equals(this.address, checkoutFormDeliveryReference.address) &&
        Objects.equals(this.method, checkoutFormDeliveryReference.method) &&
        Objects.equals(this.pickupPoint, checkoutFormDeliveryReference.pickupPoint) &&
        Objects.equals(this.cost, checkoutFormDeliveryReference.cost) &&
        Objects.equals(this.time, checkoutFormDeliveryReference.time) &&
        Objects.equals(this.smart, checkoutFormDeliveryReference.smart) &&
        Objects.equals(this.cancellation, checkoutFormDeliveryReference.cancellation) &&
        Objects.equals(this.calculatedNumberOfPackages, checkoutFormDeliveryReference.calculatedNumberOfPackages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, method, pickupPoint, cost, time, smart, cancellation, calculatedNumberOfPackages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutFormDeliveryReference {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    pickupPoint: ").append(toIndentedString(pickupPoint)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    smart: ").append(toIndentedString(smart)).append("\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("    calculatedNumberOfPackages: ").append(toIndentedString(calculatedNumberOfPackages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("method");
    openapiFields.add("pickupPoint");
    openapiFields.add("cost");
    openapiFields.add("time");
    openapiFields.add("smart");
    openapiFields.add("cancellation");
    openapiFields.add("calculatedNumberOfPackages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutFormDeliveryReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutFormDeliveryReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutFormDeliveryReference is not found in the empty JSON string", CheckoutFormDeliveryReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutFormDeliveryReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutFormDeliveryReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        CheckoutFormDeliveryAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        CheckoutFormDeliveryMethod.validateJsonElement(jsonObj.get("method"));
      }
      // validate the optional field `pickupPoint`
      if (jsonObj.get("pickupPoint") != null && !jsonObj.get("pickupPoint").isJsonNull()) {
        CheckoutFormDeliveryPickupPoint.validateJsonElement(jsonObj.get("pickupPoint"));
      }
      // validate the optional field `cost`
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("cost"));
      }
      // validate the optional field `time`
      if (jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) {
        CheckoutFormDeliveryTime.validateJsonElement(jsonObj.get("time"));
      }
      // validate the optional field `cancellation`
      if (jsonObj.get("cancellation") != null && !jsonObj.get("cancellation").isJsonNull()) {
        CheckoutFormDeliveryCancellation.validateJsonElement(jsonObj.get("cancellation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutFormDeliveryReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutFormDeliveryReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutFormDeliveryReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutFormDeliveryReference.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutFormDeliveryReference>() {
           @Override
           public void write(JsonWriter out, CheckoutFormDeliveryReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutFormDeliveryReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutFormDeliveryReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutFormDeliveryReference
   * @throws IOException if the JSON string is invalid with respect to CheckoutFormDeliveryReference
   */
  public static CheckoutFormDeliveryReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutFormDeliveryReference.class);
  }

  /**
   * Convert an instance of CheckoutFormDeliveryReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

