/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Represents stock quantity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class StockQuantity {
  public static final String SERIALIZED_NAME_ON_OFFER = "onOffer";
  @SerializedName(SERIALIZED_NAME_ON_OFFER)
  @javax.annotation.Nullable
  private BigDecimal onOffer;

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  @javax.annotation.Nullable
  private BigDecimal available;

  public static final String SERIALIZED_NAME_ON_ORDER = "onOrder";
  @SerializedName(SERIALIZED_NAME_ON_ORDER)
  @javax.annotation.Nullable
  private BigDecimal onOrder;

  public static final String SERIALIZED_NAME_ON_HOLD = "onHold";
  @SerializedName(SERIALIZED_NAME_ON_HOLD)
  @javax.annotation.Nullable
  private BigDecimal onHold;

  public StockQuantity() {
  }

  public StockQuantity onOffer(@javax.annotation.Nullable BigDecimal onOffer) {
    this.onOffer = onOffer;
    return this;
  }

  /**
   * A number of items which are available on the current active offer for the product.
   * @return onOffer
   */
  @javax.annotation.Nullable
  public BigDecimal getOnOffer() {
    return onOffer;
  }

  public void setOnOffer(@javax.annotation.Nullable BigDecimal onOffer) {
    this.onOffer = onOffer;
  }


  public StockQuantity available(@javax.annotation.Nullable BigDecimal available) {
    this.available = available;
    return this;
  }

  /**
   * A number of items in a warehouse available for sale. The amount is taken from the current active offer, or in case there is no active offer, it shows the amount that will be available on offer after it will have been created.
   * @return available
   */
  @javax.annotation.Nullable
  public BigDecimal getAvailable() {
    return available;
  }

  public void setAvailable(@javax.annotation.Nullable BigDecimal available) {
    this.available = available;
  }


  public StockQuantity onOrder(@javax.annotation.Nullable BigDecimal onOrder) {
    this.onOrder = onOrder;
    return this;
  }

  /**
   * A number of items already bought but not shipped. These are items in unpaid and paid orders that waiting for courier pickup.
   * @return onOrder
   */
  @javax.annotation.Nullable
  public BigDecimal getOnOrder() {
    return onOrder;
  }

  public void setOnOrder(@javax.annotation.Nullable BigDecimal onOrder) {
    this.onOrder = onOrder;
  }


  public StockQuantity onHold(@javax.annotation.Nullable BigDecimal onHold) {
    this.onHold = onHold;
    return this;
  }

  /**
   * A number of items in a warehouse not available for sale (e.g. due to damage).
   * @return onHold
   */
  @javax.annotation.Nullable
  public BigDecimal getOnHold() {
    return onHold;
  }

  public void setOnHold(@javax.annotation.Nullable BigDecimal onHold) {
    this.onHold = onHold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StockQuantity stockQuantity = (StockQuantity) o;
    return Objects.equals(this.onOffer, stockQuantity.onOffer) &&
        Objects.equals(this.available, stockQuantity.available) &&
        Objects.equals(this.onOrder, stockQuantity.onOrder) &&
        Objects.equals(this.onHold, stockQuantity.onHold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onOffer, available, onOrder, onHold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockQuantity {\n");
    sb.append("    onOffer: ").append(toIndentedString(onOffer)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    onOrder: ").append(toIndentedString(onOrder)).append("\n");
    sb.append("    onHold: ").append(toIndentedString(onHold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onOffer");
    openapiFields.add("available");
    openapiFields.add("onOrder");
    openapiFields.add("onHold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StockQuantity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StockQuantity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StockQuantity is not found in the empty JSON string", StockQuantity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StockQuantity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StockQuantity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StockQuantity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StockQuantity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StockQuantity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StockQuantity.class));

       return (TypeAdapter<T>) new TypeAdapter<StockQuantity>() {
           @Override
           public void write(JsonWriter out, StockQuantity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StockQuantity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StockQuantity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StockQuantity
   * @throws IOException if the JSON string is invalid with respect to StockQuantity
   */
  public static StockQuantity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StockQuantity.class);
  }

  /**
   * Convert an instance of StockQuantity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

