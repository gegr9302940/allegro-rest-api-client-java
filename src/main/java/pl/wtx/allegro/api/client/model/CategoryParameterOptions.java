/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * A list of the different options which can be used with this parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CategoryParameterOptions {
  public static final String SERIALIZED_NAME_VARIANTS_ALLOWED = "variantsAllowed";
  @SerializedName(SERIALIZED_NAME_VARIANTS_ALLOWED)
  @javax.annotation.Nullable
  private Boolean variantsAllowed;

  public static final String SERIALIZED_NAME_VARIANTS_EQUAL = "variantsEqual";
  @SerializedName(SERIALIZED_NAME_VARIANTS_EQUAL)
  @javax.annotation.Nullable
  private Boolean variantsEqual;

  public static final String SERIALIZED_NAME_AMBIGUOUS_VALUE_ID = "ambiguousValueId";
  @SerializedName(SERIALIZED_NAME_AMBIGUOUS_VALUE_ID)
  @javax.annotation.Nullable
  private String ambiguousValueId;

  public static final String SERIALIZED_NAME_DEPENDS_ON_PARAMETER_ID = "dependsOnParameterId";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON_PARAMETER_ID)
  @javax.annotation.Nullable
  private String dependsOnParameterId;

  public static final String SERIALIZED_NAME_DESCRIBES_PRODUCT = "describesProduct";
  @SerializedName(SERIALIZED_NAME_DESCRIBES_PRODUCT)
  @javax.annotation.Nullable
  private Boolean describesProduct;

  public static final String SERIALIZED_NAME_CUSTOM_VALUES_ENABLED = "customValuesEnabled";
  @SerializedName(SERIALIZED_NAME_CUSTOM_VALUES_ENABLED)
  @javax.annotation.Nullable
  private Boolean customValuesEnabled;

  public CategoryParameterOptions() {
  }

  public CategoryParameterOptions variantsAllowed(@javax.annotation.Nullable Boolean variantsAllowed) {
    this.variantsAllowed = variantsAllowed;
    return this;
  }

  /**
   * Parameters with this option enabled can be used for offer variants creation.
   * @return variantsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getVariantsAllowed() {
    return variantsAllowed;
  }

  public void setVariantsAllowed(@javax.annotation.Nullable Boolean variantsAllowed) {
    this.variantsAllowed = variantsAllowed;
  }


  public CategoryParameterOptions variantsEqual(@javax.annotation.Nullable Boolean variantsEqual) {
    this.variantsEqual = variantsEqual;
    return this;
  }

  /**
   * All offer variants must have the same values in parameters with this option enabled.
   * @return variantsEqual
   */
  @javax.annotation.Nullable
  public Boolean getVariantsEqual() {
    return variantsEqual;
  }

  public void setVariantsEqual(@javax.annotation.Nullable Boolean variantsEqual) {
    this.variantsEqual = variantsEqual;
  }


  public CategoryParameterOptions ambiguousValueId(@javax.annotation.Nullable String ambiguousValueId) {
    this.ambiguousValueId = ambiguousValueId;
    return this;
  }

  /**
   * Indicates what value in the dictionary is defined as an ambiguous one. Only parameters with dictionaries might have this option defined.
   * @return ambiguousValueId
   */
  @javax.annotation.Nullable
  public String getAmbiguousValueId() {
    return ambiguousValueId;
  }

  public void setAmbiguousValueId(@javax.annotation.Nullable String ambiguousValueId) {
    this.ambiguousValueId = ambiguousValueId;
  }


  public CategoryParameterOptions dependsOnParameterId(@javax.annotation.Nullable String dependsOnParameterId) {
    this.dependsOnParameterId = dependsOnParameterId;
    return this;
  }

  /**
   * Indicates whether this parameter&#39;s allowed values depend on another parameter&#39;s values. This field is set only for dictionary parameters which have at least one dictionary value with dependent values (see also &#x60;dictionary[].dependsOnValueIds&#x60;). Otherwise this field is null. 
   * @return dependsOnParameterId
   */
  @javax.annotation.Nullable
  public String getDependsOnParameterId() {
    return dependsOnParameterId;
  }

  public void setDependsOnParameterId(@javax.annotation.Nullable String dependsOnParameterId) {
    this.dependsOnParameterId = dependsOnParameterId;
  }


  public CategoryParameterOptions describesProduct(@javax.annotation.Nullable Boolean describesProduct) {
    this.describesProduct = describesProduct;
    return this;
  }

  /**
   * Indicates if parameter is used to define products.
   * @return describesProduct
   */
  @javax.annotation.Nullable
  public Boolean getDescribesProduct() {
    return describesProduct;
  }

  public void setDescribesProduct(@javax.annotation.Nullable Boolean describesProduct) {
    this.describesProduct = describesProduct;
  }


  public CategoryParameterOptions customValuesEnabled(@javax.annotation.Nullable Boolean customValuesEnabled) {
    this.customValuesEnabled = customValuesEnabled;
    return this;
  }

  /**
   * Indicates if a custom value can be added to a parameter with an ambiguous value.
   * @return customValuesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCustomValuesEnabled() {
    return customValuesEnabled;
  }

  public void setCustomValuesEnabled(@javax.annotation.Nullable Boolean customValuesEnabled) {
    this.customValuesEnabled = customValuesEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryParameterOptions categoryParameterOptions = (CategoryParameterOptions) o;
    return Objects.equals(this.variantsAllowed, categoryParameterOptions.variantsAllowed) &&
        Objects.equals(this.variantsEqual, categoryParameterOptions.variantsEqual) &&
        Objects.equals(this.ambiguousValueId, categoryParameterOptions.ambiguousValueId) &&
        Objects.equals(this.dependsOnParameterId, categoryParameterOptions.dependsOnParameterId) &&
        Objects.equals(this.describesProduct, categoryParameterOptions.describesProduct) &&
        Objects.equals(this.customValuesEnabled, categoryParameterOptions.customValuesEnabled);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(variantsAllowed, variantsEqual, ambiguousValueId, dependsOnParameterId, describesProduct, customValuesEnabled);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryParameterOptions {\n");
    sb.append("    variantsAllowed: ").append(toIndentedString(variantsAllowed)).append("\n");
    sb.append("    variantsEqual: ").append(toIndentedString(variantsEqual)).append("\n");
    sb.append("    ambiguousValueId: ").append(toIndentedString(ambiguousValueId)).append("\n");
    sb.append("    dependsOnParameterId: ").append(toIndentedString(dependsOnParameterId)).append("\n");
    sb.append("    describesProduct: ").append(toIndentedString(describesProduct)).append("\n");
    sb.append("    customValuesEnabled: ").append(toIndentedString(customValuesEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("variantsAllowed");
    openapiFields.add("variantsEqual");
    openapiFields.add("ambiguousValueId");
    openapiFields.add("dependsOnParameterId");
    openapiFields.add("describesProduct");
    openapiFields.add("customValuesEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryParameterOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryParameterOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryParameterOptions is not found in the empty JSON string", CategoryParameterOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryParameterOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryParameterOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ambiguousValueId") != null && !jsonObj.get("ambiguousValueId").isJsonNull()) && !jsonObj.get("ambiguousValueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ambiguousValueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ambiguousValueId").toString()));
      }
      if ((jsonObj.get("dependsOnParameterId") != null && !jsonObj.get("dependsOnParameterId").isJsonNull()) && !jsonObj.get("dependsOnParameterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependsOnParameterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependsOnParameterId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryParameterOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryParameterOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryParameterOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryParameterOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryParameterOptions>() {
           @Override
           public void write(JsonWriter out, CategoryParameterOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryParameterOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryParameterOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryParameterOptions
   * @throws IOException if the JSON string is invalid with respect to CategoryParameterOptions
   */
  public static CategoryParameterOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryParameterOptions.class);
  }

  /**
   * Convert an instance of CategoryParameterOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

