/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import pl.wtx.allegro.api.client.model.OfferAttachment;
import pl.wtx.allegro.api.client.model.OfferAttachmentRequest;
import pl.wtx.allegro.api.client.model.OfferImageLinkUploadRequest;
import pl.wtx.allegro.api.client.model.OfferImageUploadResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesAndAttachmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesAndAttachmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesAndAttachmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOfferAttachmentUsingPOST
     * @param offerAttachmentRequest offer attachment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOfferAttachmentUsingPOSTCall(@javax.annotation.Nonnull OfferAttachmentRequest offerAttachmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerAttachmentRequest;

        // create path and map variables
        String localVarPath = "/sale/offer-attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOfferAttachmentUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull OfferAttachmentRequest offerAttachmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerAttachmentRequest' is set
        if (offerAttachmentRequest == null) {
            throw new ApiException("Missing the required parameter 'offerAttachmentRequest' when calling createOfferAttachmentUsingPOST(Async)");
        }

        return createOfferAttachmentUsingPOSTCall(offerAttachmentRequest, _callback);

    }

    /**
     * Create an offer attachment
     * You can attach pdf, jpeg or png files to your offers. We will present them under the offer description in the Additional information section. You can attach up to 9 files to one offer – one per each type from the list:   * Guide (MANUAL). Allowed media types: PDF   * Special offer terms (SPECIAL_OFFER_RULES). Allowed media types: PDF   * Competition terms (COMPETITION_RULES). Allowed media types: PDF   * Book excerpt (BOOK_EXCERPT). Allowed media types: PDF   * Manual (USER_MANUAL). Allowed media types: PDF   * Installation manual (INSTALLATION_INSTRUCTIONS). Allowed media types: PDF   * Game manual (GAME_INSTRUCTIONS). Allowed media types: PDF   * Energy label (ENERGY_LABEL). Allowed media types: JPEG, JPG, PNG   * Product information sheet (PRODUCT_INFORMATION_SHEET). Allowed media types: PDF   * Tire label (TIRE_LABEL). Allowed media types: JPEG, JPG, PNG  You can attach up to 20 files to one product for:   * Safety information manual (SAFETY_INFORMATION_MANUAL). Allowed media types: PDF, JPEG, JPG, PNG  Uploading attachments flow:   1. Create an attachment object to receive an upload URL (*POST /sale/offer-attachments*),   2. Use the upload URL to submit the file (*PUT /sale/offer-attachments/{attachmentId}*),   3. Add attachments to the offer (*PATCH /sale/product-offers/{offerId}*).  Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerAttachmentRequest offer attachment (required)
     * @return OfferAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public OfferAttachment createOfferAttachmentUsingPOST(@javax.annotation.Nonnull OfferAttachmentRequest offerAttachmentRequest) throws ApiException {
        ApiResponse<OfferAttachment> localVarResp = createOfferAttachmentUsingPOSTWithHttpInfo(offerAttachmentRequest);
        return localVarResp.getData();
    }

    /**
     * Create an offer attachment
     * You can attach pdf, jpeg or png files to your offers. We will present them under the offer description in the Additional information section. You can attach up to 9 files to one offer – one per each type from the list:   * Guide (MANUAL). Allowed media types: PDF   * Special offer terms (SPECIAL_OFFER_RULES). Allowed media types: PDF   * Competition terms (COMPETITION_RULES). Allowed media types: PDF   * Book excerpt (BOOK_EXCERPT). Allowed media types: PDF   * Manual (USER_MANUAL). Allowed media types: PDF   * Installation manual (INSTALLATION_INSTRUCTIONS). Allowed media types: PDF   * Game manual (GAME_INSTRUCTIONS). Allowed media types: PDF   * Energy label (ENERGY_LABEL). Allowed media types: JPEG, JPG, PNG   * Product information sheet (PRODUCT_INFORMATION_SHEET). Allowed media types: PDF   * Tire label (TIRE_LABEL). Allowed media types: JPEG, JPG, PNG  You can attach up to 20 files to one product for:   * Safety information manual (SAFETY_INFORMATION_MANUAL). Allowed media types: PDF, JPEG, JPG, PNG  Uploading attachments flow:   1. Create an attachment object to receive an upload URL (*POST /sale/offer-attachments*),   2. Use the upload URL to submit the file (*PUT /sale/offer-attachments/{attachmentId}*),   3. Add attachments to the offer (*PATCH /sale/product-offers/{offerId}*).  Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerAttachmentRequest offer attachment (required)
     * @return ApiResponse&lt;OfferAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferAttachment> createOfferAttachmentUsingPOSTWithHttpInfo(@javax.annotation.Nonnull OfferAttachmentRequest offerAttachmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createOfferAttachmentUsingPOSTValidateBeforeCall(offerAttachmentRequest, null);
        Type localVarReturnType = new TypeToken<OfferAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an offer attachment (asynchronously)
     * You can attach pdf, jpeg or png files to your offers. We will present them under the offer description in the Additional information section. You can attach up to 9 files to one offer – one per each type from the list:   * Guide (MANUAL). Allowed media types: PDF   * Special offer terms (SPECIAL_OFFER_RULES). Allowed media types: PDF   * Competition terms (COMPETITION_RULES). Allowed media types: PDF   * Book excerpt (BOOK_EXCERPT). Allowed media types: PDF   * Manual (USER_MANUAL). Allowed media types: PDF   * Installation manual (INSTALLATION_INSTRUCTIONS). Allowed media types: PDF   * Game manual (GAME_INSTRUCTIONS). Allowed media types: PDF   * Energy label (ENERGY_LABEL). Allowed media types: JPEG, JPG, PNG   * Product information sheet (PRODUCT_INFORMATION_SHEET). Allowed media types: PDF   * Tire label (TIRE_LABEL). Allowed media types: JPEG, JPG, PNG  You can attach up to 20 files to one product for:   * Safety information manual (SAFETY_INFORMATION_MANUAL). Allowed media types: PDF, JPEG, JPG, PNG  Uploading attachments flow:   1. Create an attachment object to receive an upload URL (*POST /sale/offer-attachments*),   2. Use the upload URL to submit the file (*PUT /sale/offer-attachments/{attachmentId}*),   3. Add attachments to the offer (*PATCH /sale/product-offers/{offerId}*).  Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerAttachmentRequest offer attachment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Attachment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOfferAttachmentUsingPOSTAsync(@javax.annotation.Nonnull OfferAttachmentRequest offerAttachmentRequest, final ApiCallback<OfferAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOfferAttachmentUsingPOSTValidateBeforeCall(offerAttachmentRequest, _callback);
        Type localVarReturnType = new TypeToken<OfferAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOfferAttachment
     * @param attachmentId The ID of the attachment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer attachment details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no access to an attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non existing attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferAttachmentCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferAttachmentValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getOfferAttachment(Async)");
        }

        return getOfferAttachmentCall(attachmentId, _callback);

    }

    /**
     * Get offer attachment details
     * Get details of an offer attachments, including download link, by attachment identifier (\&quot;attachmentId\&quot;). The attachment id can be retrieved by querying a particular offer, for example by using &lt;a href&#x3D;\&quot;#operation/getProductOffer\&quot;&gt;&#x60;GET /sale/product-offers/{offerId}&#x60;&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @return OfferAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer attachment details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no access to an attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non existing attachment </td><td>  -  </td></tr>
     </table>
     */
    public OfferAttachment getOfferAttachment(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        ApiResponse<OfferAttachment> localVarResp = getOfferAttachmentWithHttpInfo(attachmentId);
        return localVarResp.getData();
    }

    /**
     * Get offer attachment details
     * Get details of an offer attachments, including download link, by attachment identifier (\&quot;attachmentId\&quot;). The attachment id can be retrieved by querying a particular offer, for example by using &lt;a href&#x3D;\&quot;#operation/getProductOffer\&quot;&gt;&#x60;GET /sale/product-offers/{offerId}&#x60;&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @return ApiResponse&lt;OfferAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer attachment details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no access to an attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non existing attachment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferAttachment> getOfferAttachmentWithHttpInfo(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = getOfferAttachmentValidateBeforeCall(attachmentId, null);
        Type localVarReturnType = new TypeToken<OfferAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get offer attachment details (asynchronously)
     * Get details of an offer attachments, including download link, by attachment identifier (\&quot;attachmentId\&quot;). The attachment id can be retrieved by querying a particular offer, for example by using &lt;a href&#x3D;\&quot;#operation/getProductOffer\&quot;&gt;&#x60;GET /sale/product-offers/{offerId}&#x60;&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer attachment details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no access to an attachment </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non existing attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferAttachmentAsync(@javax.annotation.Nonnull String attachmentId, final ApiCallback<OfferAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfferAttachmentValidateBeforeCall(attachmentId, _callback);
        Type localVarReturnType = new TypeToken<OfferAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadOfferAttachmentUsingPUT
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadOfferAttachmentUsingPUTCall(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.{environment}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sale/offer-attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/pdf",
            "image/jpeg",
            "image/png"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadOfferAttachmentUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling uploadOfferAttachmentUsingPUT(Async)");
        }

        return uploadOfferAttachmentUsingPUTCall(attachmentId, body, _callback);

    }

    /**
     * Upload an offer attachment
     * Upload an offer attachment. This operation should be used after creating an offer attachment with *POST /sale/offer-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/offer-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @return OfferAttachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
     </table>
     */
    public OfferAttachment uploadOfferAttachmentUsingPUT(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body) throws ApiException {
        ApiResponse<OfferAttachment> localVarResp = uploadOfferAttachmentUsingPUTWithHttpInfo(attachmentId, body);
        return localVarResp.getData();
    }

    /**
     * Upload an offer attachment
     * Upload an offer attachment. This operation should be used after creating an offer attachment with *POST /sale/offer-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/offer-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;OfferAttachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferAttachment> uploadOfferAttachmentUsingPUTWithHttpInfo(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body) throws ApiException {
        okhttp3.Call localVarCall = uploadOfferAttachmentUsingPUTValidateBeforeCall(attachmentId, body, null);
        Type localVarReturnType = new TypeToken<OfferAttachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload an offer attachment (asynchronously)
     * Upload an offer attachment. This operation should be used after creating an offer attachment with *POST /sale/offer-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/offer-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zalaczniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#attachments\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId The ID of the attachment. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadOfferAttachmentUsingPUTAsync(@javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable File body, final ApiCallback<OfferAttachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadOfferAttachmentUsingPUTValidateBeforeCall(attachmentId, body, _callback);
        Type localVarReturnType = new TypeToken<OfferAttachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadOfferImageUsingPOST
     * @param offerImageLinkUploadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Image uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization problem </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Image is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity (problem with image server) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadOfferImageUsingPOSTCall(@javax.annotation.Nonnull OfferImageLinkUploadRequest offerImageLinkUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.{environment}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerImageLinkUploadRequest;

        // create path and map variables
        String localVarPath = "/sale/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json",
            "image/jpeg",
            "image/png",
            "image/webp"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadOfferImageUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull OfferImageLinkUploadRequest offerImageLinkUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerImageLinkUploadRequest' is set
        if (offerImageLinkUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'offerImageLinkUploadRequest' when calling uploadOfferImageUsingPOST(Async)");
        }

        return uploadOfferImageUsingPOSTCall(offerImageLinkUploadRequest, _callback);

    }

    /**
     * Upload an offer image
     * Upload image to our servers. You can choose from two upload options:   * \\- provide a link and we will download an image for you   * \\- send an image as binary data  **Important!** Remember to use dedicated domain for upload, i.e.   * \\- https://upload.allegro.pl for Production   * \\- https://upload.allegro.pl.allegrosandbox.pl for Sandbox  Read more about the rules for photos in an offer&#39;s gallery and description: &lt;a href&#x3D;\&quot;https://help.allegro.com/pl/sell/a/zasady-dla-zdjec-w-galerii-i-w-opisie-8dvWz3eo4T5?marketplaceId&#x3D;allegro-pl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;https://help.allegro.com/en/sell/a/rules-for-images-in-the-gallery-and-in-descriptions-8dvWB8Y2PIq\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerImageLinkUploadRequest  (required)
     * @return OfferImageUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Image uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization problem </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Image is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity (problem with image server) </td><td>  -  </td></tr>
     </table>
     */
    public OfferImageUploadResponse uploadOfferImageUsingPOST(@javax.annotation.Nonnull OfferImageLinkUploadRequest offerImageLinkUploadRequest) throws ApiException {
        ApiResponse<OfferImageUploadResponse> localVarResp = uploadOfferImageUsingPOSTWithHttpInfo(offerImageLinkUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Upload an offer image
     * Upload image to our servers. You can choose from two upload options:   * \\- provide a link and we will download an image for you   * \\- send an image as binary data  **Important!** Remember to use dedicated domain for upload, i.e.   * \\- https://upload.allegro.pl for Production   * \\- https://upload.allegro.pl.allegrosandbox.pl for Sandbox  Read more about the rules for photos in an offer&#39;s gallery and description: &lt;a href&#x3D;\&quot;https://help.allegro.com/pl/sell/a/zasady-dla-zdjec-w-galerii-i-w-opisie-8dvWz3eo4T5?marketplaceId&#x3D;allegro-pl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;https://help.allegro.com/en/sell/a/rules-for-images-in-the-gallery-and-in-descriptions-8dvWB8Y2PIq\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerImageLinkUploadRequest  (required)
     * @return ApiResponse&lt;OfferImageUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Image uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization problem </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Image is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity (problem with image server) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferImageUploadResponse> uploadOfferImageUsingPOSTWithHttpInfo(@javax.annotation.Nonnull OfferImageLinkUploadRequest offerImageLinkUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadOfferImageUsingPOSTValidateBeforeCall(offerImageLinkUploadRequest, null);
        Type localVarReturnType = new TypeToken<OfferImageUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload an offer image (asynchronously)
     * Upload image to our servers. You can choose from two upload options:   * \\- provide a link and we will download an image for you   * \\- send an image as binary data  **Important!** Remember to use dedicated domain for upload, i.e.   * \\- https://upload.allegro.pl for Production   * \\- https://upload.allegro.pl.allegrosandbox.pl for Sandbox  Read more about the rules for photos in an offer&#39;s gallery and description: &lt;a href&#x3D;\&quot;https://help.allegro.com/pl/sell/a/zasady-dla-zdjec-w-galerii-i-w-opisie-8dvWz3eo4T5?marketplaceId&#x3D;allegro-pl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;https://help.allegro.com/en/sell/a/rules-for-images-in-the-gallery-and-in-descriptions-8dvWB8Y2PIq\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerImageLinkUploadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Image uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization problem </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Image is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity (problem with image server) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadOfferImageUsingPOSTAsync(@javax.annotation.Nonnull OfferImageLinkUploadRequest offerImageLinkUploadRequest, final ApiCallback<OfferImageUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadOfferImageUsingPOSTValidateBeforeCall(offerImageLinkUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<OfferImageUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
