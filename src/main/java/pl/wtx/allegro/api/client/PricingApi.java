/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.FeePreviewResponse;
import pl.wtx.allegro.api.client.model.OfferQuotesDto;
import pl.wtx.allegro.api.client.model.PublicOfferPreviewRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PricingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for calculateFeePreviewUsingPOST
     * @param publicOfferPreviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fee calculated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateFeePreviewUsingPOSTCall(@javax.annotation.Nonnull PublicOfferPreviewRequest publicOfferPreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicOfferPreviewRequest;

        // create path and map variables
        String localVarPath = "/pricing/offer-fee-preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateFeePreviewUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull PublicOfferPreviewRequest publicOfferPreviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'publicOfferPreviewRequest' is set
        if (publicOfferPreviewRequest == null) {
            throw new ApiException("Missing the required parameter 'publicOfferPreviewRequest' when calling calculateFeePreviewUsingPOST(Async)");
        }

        return calculateFeePreviewUsingPOSTCall(publicOfferPreviewRequest, _callback);

    }

    /**
     * Calculate fee and commission for an offer
     * Provides information about fee and commission for an offer. This resource is limited to 25 requests per second for a single user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#kalkulator-oplat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#fee-calculator\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param publicOfferPreviewRequest  (required)
     * @return FeePreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fee calculated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public FeePreviewResponse calculateFeePreviewUsingPOST(@javax.annotation.Nonnull PublicOfferPreviewRequest publicOfferPreviewRequest) throws ApiException {
        ApiResponse<FeePreviewResponse> localVarResp = calculateFeePreviewUsingPOSTWithHttpInfo(publicOfferPreviewRequest);
        return localVarResp.getData();
    }

    /**
     * Calculate fee and commission for an offer
     * Provides information about fee and commission for an offer. This resource is limited to 25 requests per second for a single user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#kalkulator-oplat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#fee-calculator\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param publicOfferPreviewRequest  (required)
     * @return ApiResponse&lt;FeePreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fee calculated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeePreviewResponse> calculateFeePreviewUsingPOSTWithHttpInfo(@javax.annotation.Nonnull PublicOfferPreviewRequest publicOfferPreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = calculateFeePreviewUsingPOSTValidateBeforeCall(publicOfferPreviewRequest, null);
        Type localVarReturnType = new TypeToken<FeePreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate fee and commission for an offer (asynchronously)
     * Provides information about fee and commission for an offer. This resource is limited to 25 requests per second for a single user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#kalkulator-oplat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#fee-calculator\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param publicOfferPreviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fee calculated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateFeePreviewUsingPOSTAsync(@javax.annotation.Nonnull PublicOfferPreviewRequest publicOfferPreviewRequest, final ApiCallback<FeePreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateFeePreviewUsingPOSTValidateBeforeCall(publicOfferPreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<FeePreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offerQuotesPublicUsingGET
     * @param offerId List of offer Ids, maximum 20 values. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns current offer quotes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Full authentication is required to access this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is currently unavailable. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerQuotesPublicUsingGETCall(@javax.annotation.Nonnull List<String> offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/offer-quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "offer.id", offerId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offerQuotesPublicUsingGETValidateBeforeCall(@javax.annotation.Nonnull List<String> offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling offerQuotesPublicUsingGET(Async)");
        }

        return offerQuotesPublicUsingGETCall(offerId, _callback);

    }

    /**
     * Get the user&#39;s current offer quotes
     * This endpoint returns current offer quotes (listing and promo fees) cycles for authenticated user and list of offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#data-naliczenia-kolejnej-oplaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#check-when-a-fee-is-charged\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer Ids, maximum 20 values. (required)
     * @return OfferQuotesDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns current offer quotes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Full authentication is required to access this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is currently unavailable. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public OfferQuotesDto offerQuotesPublicUsingGET(@javax.annotation.Nonnull List<String> offerId) throws ApiException {
        ApiResponse<OfferQuotesDto> localVarResp = offerQuotesPublicUsingGETWithHttpInfo(offerId);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s current offer quotes
     * This endpoint returns current offer quotes (listing and promo fees) cycles for authenticated user and list of offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#data-naliczenia-kolejnej-oplaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#check-when-a-fee-is-charged\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer Ids, maximum 20 values. (required)
     * @return ApiResponse&lt;OfferQuotesDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns current offer quotes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Full authentication is required to access this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is currently unavailable. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferQuotesDto> offerQuotesPublicUsingGETWithHttpInfo(@javax.annotation.Nonnull List<String> offerId) throws ApiException {
        okhttp3.Call localVarCall = offerQuotesPublicUsingGETValidateBeforeCall(offerId, null);
        Type localVarReturnType = new TypeToken<OfferQuotesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s current offer quotes (asynchronously)
     * This endpoint returns current offer quotes (listing and promo fees) cycles for authenticated user and list of offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#data-naliczenia-kolejnej-oplaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#check-when-a-fee-is-charged\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer Ids, maximum 20 values. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns current offer quotes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Full authentication is required to access this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is currently unavailable. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerQuotesPublicUsingGETAsync(@javax.annotation.Nonnull List<String> offerId, final ApiCallback<OfferQuotesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = offerQuotesPublicUsingGETValidateBeforeCall(offerId, _callback);
        Type localVarReturnType = new TypeToken<OfferQuotesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
