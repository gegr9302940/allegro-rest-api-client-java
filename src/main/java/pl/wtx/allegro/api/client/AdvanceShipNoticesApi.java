/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AdvanceShipNotice;
import pl.wtx.allegro.api.client.model.AdvanceShipNoticeList;
import pl.wtx.allegro.api.client.model.AdvanceShipNoticeResponse;
import pl.wtx.allegro.api.client.model.AdvanceShipNoticeStatus;
import pl.wtx.allegro.api.client.model.CreateAdvanceShipNoticeRequest;
import pl.wtx.allegro.api.client.model.CreateAdvanceShipNoticeResponse;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import java.io.File;
import pl.wtx.allegro.api.client.model.ReceivingState;
import pl.wtx.allegro.api.client.model.SubmitCommand;
import java.util.UUID;
import pl.wtx.allegro.api.client.model.UpdateSubmittedAdvanceShipNoticeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdvanceShipNoticesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdvanceShipNoticesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdvanceShipNoticesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelAdvanceShipNotice
     * @param id An identifier of the Advance Ship Notice to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice was cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be cancelled - it is not in IN_TRANSIT status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAdvanceShipNoticeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAdvanceShipNoticeValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelAdvanceShipNotice(Async)");
        }

        return cancelAdvanceShipNoticeCall(id, _callback);

    }

    /**
     * Cancel Advance Ship Notice
     * Use this resource to cancel an Advance Ship Notice in IN_TRANSIT status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#anuluj-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#cancel-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice to cancel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice was cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be cancelled - it is not in IN_TRANSIT status. </td><td>  -  </td></tr>
     </table>
     */
    public void cancelAdvanceShipNotice(@javax.annotation.Nonnull UUID id) throws ApiException {
        cancelAdvanceShipNoticeWithHttpInfo(id);
    }

    /**
     * Cancel Advance Ship Notice
     * Use this resource to cancel an Advance Ship Notice in IN_TRANSIT status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#anuluj-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#cancel-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice to cancel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice was cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be cancelled - it is not in IN_TRANSIT status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelAdvanceShipNoticeWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = cancelAdvanceShipNoticeValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Advance Ship Notice (asynchronously)
     * Use this resource to cancel an Advance Ship Notice in IN_TRANSIT status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#anuluj-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#cancel-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice was cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be cancelled - it is not in IN_TRANSIT status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAdvanceShipNoticeAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelAdvanceShipNoticeValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAdvanceShipNotice
     * @param createAdvanceShipNoticeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Advance Ship Notice created. </td><td>  * location - A location to created command (URI). <br>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Advance Ship Notice cannot be created due to improper input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvanceShipNoticeCall(@javax.annotation.Nonnull CreateAdvanceShipNoticeRequest createAdvanceShipNoticeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAdvanceShipNoticeRequest;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdvanceShipNoticeValidateBeforeCall(@javax.annotation.Nonnull CreateAdvanceShipNoticeRequest createAdvanceShipNoticeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAdvanceShipNoticeRequest' is set
        if (createAdvanceShipNoticeRequest == null) {
            throw new ApiException("Missing the required parameter 'createAdvanceShipNoticeRequest' when calling createAdvanceShipNotice(Async)");
        }

        return createAdvanceShipNoticeCall(createAdvanceShipNoticeRequest, _callback);

    }

    /**
     * Create an Advance Ship Notice
     * Use this resource to create an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#utworz-draft-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-a-draft-of-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createAdvanceShipNoticeRequest  (required)
     * @return CreateAdvanceShipNoticeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Advance Ship Notice created. </td><td>  * location - A location to created command (URI). <br>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Advance Ship Notice cannot be created due to improper input data. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAdvanceShipNoticeResponse createAdvanceShipNotice(@javax.annotation.Nonnull CreateAdvanceShipNoticeRequest createAdvanceShipNoticeRequest) throws ApiException {
        ApiResponse<CreateAdvanceShipNoticeResponse> localVarResp = createAdvanceShipNoticeWithHttpInfo(createAdvanceShipNoticeRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Advance Ship Notice
     * Use this resource to create an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#utworz-draft-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-a-draft-of-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createAdvanceShipNoticeRequest  (required)
     * @return ApiResponse&lt;CreateAdvanceShipNoticeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Advance Ship Notice created. </td><td>  * location - A location to created command (URI). <br>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Advance Ship Notice cannot be created due to improper input data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAdvanceShipNoticeResponse> createAdvanceShipNoticeWithHttpInfo(@javax.annotation.Nonnull CreateAdvanceShipNoticeRequest createAdvanceShipNoticeRequest) throws ApiException {
        okhttp3.Call localVarCall = createAdvanceShipNoticeValidateBeforeCall(createAdvanceShipNoticeRequest, null);
        Type localVarReturnType = new TypeToken<CreateAdvanceShipNoticeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Advance Ship Notice (asynchronously)
     * Use this resource to create an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#utworz-draft-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-a-draft-of-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createAdvanceShipNoticeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Advance Ship Notice created. </td><td>  * location - A location to created command (URI). <br>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Advance Ship Notice cannot be created due to improper input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvanceShipNoticeAsync(@javax.annotation.Nonnull CreateAdvanceShipNoticeRequest createAdvanceShipNoticeRequest, final ApiCallback<CreateAdvanceShipNoticeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdvanceShipNoticeValidateBeforeCall(createAdvanceShipNoticeRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAdvanceShipNoticeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAdvanceShipNotice
     * @param id An identifier of the Advance Ship Notice to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Advance Ship Notice was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be deleted - it is not in DRAFT status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvanceShipNoticeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdvanceShipNoticeValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAdvanceShipNotice(Async)");
        }

        return deleteAdvanceShipNoticeCall(id, _callback);

    }

    /**
     * Delete Advance Ship Notice
     * Use this resource to delete an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-usunac-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-delete-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Advance Ship Notice was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be deleted - it is not in DRAFT status. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAdvanceShipNotice(@javax.annotation.Nonnull UUID id) throws ApiException {
        deleteAdvanceShipNoticeWithHttpInfo(id);
    }

    /**
     * Delete Advance Ship Notice
     * Use this resource to delete an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-usunac-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-delete-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Advance Ship Notice was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be deleted - it is not in DRAFT status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAdvanceShipNoticeWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteAdvanceShipNoticeValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Advance Ship Notice (asynchronously)
     * Use this resource to delete an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-usunac-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-delete-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Advance Ship Notice was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN cannot be deleted - it is not in DRAFT status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvanceShipNoticeAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdvanceShipNoticeValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvanceShipNotice
     * @param id The identifier of returned Advance Ship Notice. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns single Advance Ship Notice. </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvanceShipNoticeValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdvanceShipNotice(Async)");
        }

        return getAdvanceShipNoticeCall(id, _callback);

    }

    /**
     * Get single Advance Ship Notice
     * Use this resource to get an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id The identifier of returned Advance Ship Notice. (required)
     * @return AdvanceShipNoticeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns single Advance Ship Notice. </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AdvanceShipNoticeResponse getAdvanceShipNotice(@javax.annotation.Nonnull UUID id) throws ApiException {
        ApiResponse<AdvanceShipNoticeResponse> localVarResp = getAdvanceShipNoticeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get single Advance Ship Notice
     * Use this resource to get an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id The identifier of returned Advance Ship Notice. (required)
     * @return ApiResponse&lt;AdvanceShipNoticeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns single Advance Ship Notice. </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvanceShipNoticeResponse> getAdvanceShipNoticeWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getAdvanceShipNoticeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get single Advance Ship Notice (asynchronously)
     * Use this resource to get an Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id The identifier of returned Advance Ship Notice. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns single Advance Ship Notice. </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticeAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<AdvanceShipNoticeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvanceShipNoticeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvanceShipNoticeLabels
     * @param id An identifier of the Advance Ship Notice. (required)
     * @param accept Content-type of generated labels. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns PDF or ZPL file with labels. </td><td>  * content-disposition - The header contains filename directive with indicative file name. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticeLabelsCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices/{id}/labels"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "x-application/zpl"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvanceShipNoticeLabelsValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdvanceShipNoticeLabels(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getAdvanceShipNoticeLabels(Async)");
        }

        return getAdvanceShipNoticeLabelsCall(id, accept, _callback);

    }

    /**
     * Get labels for Advance Ship Notice
     * Use this resource to get labels for Advance Ship Notice after being created with \&quot;create labels command\&quot;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#wygeneruj-oznaczenia-na-kartony\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-labels-for-boxes\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice. (required)
     * @param accept Content-type of generated labels. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns PDF or ZPL file with labels. </td><td>  * content-disposition - The header contains filename directive with indicative file name. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public File getAdvanceShipNoticeLabels(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept) throws ApiException {
        ApiResponse<File> localVarResp = getAdvanceShipNoticeLabelsWithHttpInfo(id, accept);
        return localVarResp.getData();
    }

    /**
     * Get labels for Advance Ship Notice
     * Use this resource to get labels for Advance Ship Notice after being created with \&quot;create labels command\&quot;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#wygeneruj-oznaczenia-na-kartony\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-labels-for-boxes\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice. (required)
     * @param accept Content-type of generated labels. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns PDF or ZPL file with labels. </td><td>  * content-disposition - The header contains filename directive with indicative file name. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAdvanceShipNoticeLabelsWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept) throws ApiException {
        okhttp3.Call localVarCall = getAdvanceShipNoticeLabelsValidateBeforeCall(id, accept, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get labels for Advance Ship Notice (asynchronously)
     * Use this resource to get labels for Advance Ship Notice after being created with \&quot;create labels command\&quot;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#wygeneruj-oznaczenia-na-kartony\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#create-labels-for-boxes\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of the Advance Ship Notice. (required)
     * @param accept Content-type of generated labels. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns PDF or ZPL file with labels. </td><td>  * content-disposition - The header contains filename directive with indicative file name. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticeLabelsAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvanceShipNoticeLabelsValidateBeforeCall(id, accept, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvanceShipNoticeReceivingState
     * @param id An identifier of advance ship notice. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the state of Advance Ship Notice receiving in Fulfillment Center </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found (ASN doesn&#39;t exist or is in state DRAFT or IN_TRANSIT) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticeReceivingStateCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices/{id}/receiving-state"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvanceShipNoticeReceivingStateValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdvanceShipNoticeReceivingState(Async)");
        }

        return getAdvanceShipNoticeReceivingStateCall(id, _callback);

    }

    /**
     * Check current state and details of Advance Ship Notice receiving
     * Use this resource to check the state of Advance Ship Notice receiving in Fulfillment Center in real time. The response contains a receiving progress and information about particular items - their quantities and conditions. While the Advance Ship Notice is in UNPACKING state, report is updated dynamically, which might result in different responses even at short time intervals. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#sprawdz-postep-odbioru-awizo-przez-magazyn\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#check-current-state-and-details-of-advance-ship-notice-receiving\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of advance ship notice. (required)
     * @return ReceivingState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the state of Advance Ship Notice receiving in Fulfillment Center </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found (ASN doesn&#39;t exist or is in state DRAFT or IN_TRANSIT) </td><td>  -  </td></tr>
     </table>
     */
    public ReceivingState getAdvanceShipNoticeReceivingState(@javax.annotation.Nonnull UUID id) throws ApiException {
        ApiResponse<ReceivingState> localVarResp = getAdvanceShipNoticeReceivingStateWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Check current state and details of Advance Ship Notice receiving
     * Use this resource to check the state of Advance Ship Notice receiving in Fulfillment Center in real time. The response contains a receiving progress and information about particular items - their quantities and conditions. While the Advance Ship Notice is in UNPACKING state, report is updated dynamically, which might result in different responses even at short time intervals. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#sprawdz-postep-odbioru-awizo-przez-magazyn\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#check-current-state-and-details-of-advance-ship-notice-receiving\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of advance ship notice. (required)
     * @return ApiResponse&lt;ReceivingState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the state of Advance Ship Notice receiving in Fulfillment Center </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found (ASN doesn&#39;t exist or is in state DRAFT or IN_TRANSIT) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivingState> getAdvanceShipNoticeReceivingStateWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getAdvanceShipNoticeReceivingStateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ReceivingState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check current state and details of Advance Ship Notice receiving (asynchronously)
     * Use this resource to check the state of Advance Ship Notice receiving in Fulfillment Center in real time. The response contains a receiving progress and information about particular items - their quantities and conditions. While the Advance Ship Notice is in UNPACKING state, report is updated dynamically, which might result in different responses even at short time intervals. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#sprawdz-postep-odbioru-awizo-przez-magazyn\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#check-current-state-and-details-of-advance-ship-notice-receiving\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of advance ship notice. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the state of Advance Ship Notice receiving in Fulfillment Center </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found (ASN doesn&#39;t exist or is in state DRAFT or IN_TRANSIT) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticeReceivingStateAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<ReceivingState> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvanceShipNoticeReceivingStateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ReceivingState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvanceShipNotices
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit Maximum number of elements in response. (optional, default to 50)
     * @param status A status of the Advance Ship Notices in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of Advance Ship Notices that belong to a seller. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticesCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<AdvanceShipNoticeStatus> status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvanceShipNoticesValidateBeforeCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<AdvanceShipNoticeStatus> status, final ApiCallback _callback) throws ApiException {
        return getAdvanceShipNoticesCall(offset, limit, status, _callback);

    }

    /**
     * Get list of Advance Ship Notices
     * Use this resource to get a list of Advance Ship Notices. The list is ordered by **createdAt** property. Default **offset** is 0, default **limit** is 50. A list can be filtered by statuses. Multiple status query parameters are allowed. In such cases, filters are joined with **OR** logical operator. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit Maximum number of elements in response. (optional, default to 50)
     * @param status A status of the Advance Ship Notices in the response. (optional)
     * @return AdvanceShipNoticeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of Advance Ship Notices that belong to a seller. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public AdvanceShipNoticeList getAdvanceShipNotices(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<AdvanceShipNoticeStatus> status) throws ApiException {
        ApiResponse<AdvanceShipNoticeList> localVarResp = getAdvanceShipNoticesWithHttpInfo(offset, limit, status);
        return localVarResp.getData();
    }

    /**
     * Get list of Advance Ship Notices
     * Use this resource to get a list of Advance Ship Notices. The list is ordered by **createdAt** property. Default **offset** is 0, default **limit** is 50. A list can be filtered by statuses. Multiple status query parameters are allowed. In such cases, filters are joined with **OR** logical operator. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit Maximum number of elements in response. (optional, default to 50)
     * @param status A status of the Advance Ship Notices in the response. (optional)
     * @return ApiResponse&lt;AdvanceShipNoticeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of Advance Ship Notices that belong to a seller. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvanceShipNoticeList> getAdvanceShipNoticesWithHttpInfo(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<AdvanceShipNoticeStatus> status) throws ApiException {
        okhttp3.Call localVarCall = getAdvanceShipNoticesValidateBeforeCall(offset, limit, status, null);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of Advance Ship Notices (asynchronously)
     * Use this resource to get a list of Advance Ship Notices. The list is ordered by **createdAt** property. Default **offset** is 0, default **limit** is 50. A list can be filtered by statuses. Multiple status query parameters are allowed. In such cases, filters are joined with **OR** logical operator. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#jak-przegladac-utworzone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#how-to-get-created-advance-ship-notices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit Maximum number of elements in response. (optional, default to 50)
     * @param status A status of the Advance Ship Notices in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of Advance Ship Notices that belong to a seller. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvanceShipNoticesAsync(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<AdvanceShipNoticeStatus> status, final ApiCallback<AdvanceShipNoticeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvanceShipNoticesValidateBeforeCall(offset, limit, status, _callback);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmitCommand
     * @param commandId An identifier of the command. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmitCommandCall(@javax.annotation.Nonnull UUID commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fulfillment/submit-commands/{command-id}"
            .replace("{" + "command-id" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmitCommandValidateBeforeCall(@javax.annotation.Nonnull UUID commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getSubmitCommand(Async)");
        }

        return getSubmitCommandCall(commandId, _callback);

    }

    /**
     * Get submit status
     * Use this resource to get submit status of the Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId An identifier of the command. (required)
     * @return SubmitCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitCommand getSubmitCommand(@javax.annotation.Nonnull UUID commandId) throws ApiException {
        ApiResponse<SubmitCommand> localVarResp = getSubmitCommandWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Get submit status
     * Use this resource to get submit status of the Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId An identifier of the command. (required)
     * @return ApiResponse&lt;SubmitCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitCommand> getSubmitCommandWithHttpInfo(@javax.annotation.Nonnull UUID commandId) throws ApiException {
        okhttp3.Call localVarCall = getSubmitCommandValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<SubmitCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get submit status (asynchronously)
     * Use this resource to get submit status of the Advance Ship Notice. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId An identifier of the command. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmitCommandAsync(@javax.annotation.Nonnull UUID commandId, final ApiCallback<SubmitCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmitCommandValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<SubmitCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitCommand
     * @param commandId The identifier of the command. (required)
     * @param submitCommand  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns command output with status and possible errors. The command could fail with following error codes:   * ASN_NOT_FOUND - Cannot find ASN with id given in command input.   * COMMAND_FORBIDDEN - Requester has no access to run commands on given ASN.   * INVALID_ASN_STATE - Such command cannot be run on current ASN state e.g. ASN has no shipping information.   * COMMAND_FAILED - Any other error. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitCommandCall(@javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull SubmitCommand submitCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitCommand;

        // create path and map variables
        String localVarPath = "/fulfillment/submit-commands/{command-id}"
            .replace("{" + "command-id" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitCommandValidateBeforeCall(@javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull SubmitCommand submitCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling submitCommand(Async)");
        }

        // verify the required parameter 'submitCommand' is set
        if (submitCommand == null) {
            throw new ApiException("Missing the required parameter 'submitCommand' when calling submitCommand(Async)");
        }

        return submitCommandCall(commandId, submitCommand, _callback);

    }

    /**
     * Submit the Advance Ship Notice
     * Use this resource to submit the Advance Ship Notice. After this operation, updates of the Advance Ship Notice are limited to selected properties only. See &lt;a href&#x3D;\&quot;../../documentation#operation/updateSubmittedAdvanceShipNotice\&quot;&gt;PUT /fulfillment/advance-ship-notices/{id}/submitted&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId The identifier of the command. (required)
     * @param submitCommand  (required)
     * @return SubmitCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns command output with status and possible errors. The command could fail with following error codes:   * ASN_NOT_FOUND - Cannot find ASN with id given in command input.   * COMMAND_FORBIDDEN - Requester has no access to run commands on given ASN.   * INVALID_ASN_STATE - Such command cannot be run on current ASN state e.g. ASN has no shipping information.   * COMMAND_FAILED - Any other error. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitCommand submitCommand(@javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull SubmitCommand submitCommand) throws ApiException {
        ApiResponse<SubmitCommand> localVarResp = submitCommandWithHttpInfo(commandId, submitCommand);
        return localVarResp.getData();
    }

    /**
     * Submit the Advance Ship Notice
     * Use this resource to submit the Advance Ship Notice. After this operation, updates of the Advance Ship Notice are limited to selected properties only. See &lt;a href&#x3D;\&quot;../../documentation#operation/updateSubmittedAdvanceShipNotice\&quot;&gt;PUT /fulfillment/advance-ship-notices/{id}/submitted&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId The identifier of the command. (required)
     * @param submitCommand  (required)
     * @return ApiResponse&lt;SubmitCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns command output with status and possible errors. The command could fail with following error codes:   * ASN_NOT_FOUND - Cannot find ASN with id given in command input.   * COMMAND_FORBIDDEN - Requester has no access to run commands on given ASN.   * INVALID_ASN_STATE - Such command cannot be run on current ASN state e.g. ASN has no shipping information.   * COMMAND_FAILED - Any other error. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubmitCommand> submitCommandWithHttpInfo(@javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull SubmitCommand submitCommand) throws ApiException {
        okhttp3.Call localVarCall = submitCommandValidateBeforeCall(commandId, submitCommand, null);
        Type localVarReturnType = new TypeToken<SubmitCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit the Advance Ship Notice (asynchronously)
     * Use this resource to submit the Advance Ship Notice. After this operation, updates of the Advance Ship Notice are limited to selected properties only. See &lt;a href&#x3D;\&quot;../../documentation#operation/updateSubmittedAdvanceShipNotice\&quot;&gt;PUT /fulfillment/advance-ship-notices/{id}/submitted&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#zakoncz-edycje-i-wyslij-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#finish-editing-and-submit-the-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId The identifier of the command. (required)
     * @param submitCommand  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns command output with status and possible errors. The command could fail with following error codes:   * ASN_NOT_FOUND - Cannot find ASN with id given in command input.   * COMMAND_FORBIDDEN - Requester has no access to run commands on given ASN.   * INVALID_ASN_STATE - Such command cannot be run on current ASN state e.g. ASN has no shipping information.   * COMMAND_FAILED - Any other error. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitCommandAsync(@javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull SubmitCommand submitCommand, final ApiCallback<SubmitCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitCommandValidateBeforeCall(commandId, submitCommand, _callback);
        Type localVarReturnType = new TypeToken<SubmitCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdvanceShipNotice
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param advanceShipNotice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN is invalid or attempting to update read-only property </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdvanceShipNoticeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull AdvanceShipNotice advanceShipNotice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = advanceShipNotice;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdvanceShipNoticeValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull AdvanceShipNotice advanceShipNotice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAdvanceShipNotice(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling updateAdvanceShipNotice(Async)");
        }

        // verify the required parameter 'advanceShipNotice' is set
        if (advanceShipNotice == null) {
            throw new ApiException("Missing the required parameter 'advanceShipNotice' when calling updateAdvanceShipNotice(Async)");
        }

        return updateAdvanceShipNoticeCall(id, ifMatch, advanceShipNotice, _callback);

    }

    /**
     * Update Advance Ship Notice
     * Use this resource to update an Advance Ship Notice. Any content property update will clear labels property. Use Create labels command to create new labels for provided content. If a client wants to update read-only property, an error is returned (only in cases when sent value will be different than actual on the server). Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#uzupelnij-dane-o-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../one-fulfillment-by-allegro-4R9dXyMPlc9#complete-the-data-of-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param advanceShipNotice  (required)
     * @return AdvanceShipNoticeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN is invalid or attempting to update read-only property </td><td>  -  </td></tr>
     </table>
     */
    public AdvanceShipNoticeResponse updateAdvanceShipNotice(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull AdvanceShipNotice advanceShipNotice) throws ApiException {
        ApiResponse<AdvanceShipNoticeResponse> localVarResp = updateAdvanceShipNoticeWithHttpInfo(id, ifMatch, advanceShipNotice);
        return localVarResp.getData();
    }

    /**
     * Update Advance Ship Notice
     * Use this resource to update an Advance Ship Notice. Any content property update will clear labels property. Use Create labels command to create new labels for provided content. If a client wants to update read-only property, an error is returned (only in cases when sent value will be different than actual on the server). Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#uzupelnij-dane-o-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../one-fulfillment-by-allegro-4R9dXyMPlc9#complete-the-data-of-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param advanceShipNotice  (required)
     * @return ApiResponse&lt;AdvanceShipNoticeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN is invalid or attempting to update read-only property </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvanceShipNoticeResponse> updateAdvanceShipNoticeWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull AdvanceShipNotice advanceShipNotice) throws ApiException {
        okhttp3.Call localVarCall = updateAdvanceShipNoticeValidateBeforeCall(id, ifMatch, advanceShipNotice, null);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Advance Ship Notice (asynchronously)
     * Use this resource to update an Advance Ship Notice. Any content property update will clear labels property. Use Create labels command to create new labels for provided content. If a client wants to update read-only property, an error is returned (only in cases when sent value will be different than actual on the server). Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#uzupelnij-dane-o-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../one-fulfillment-by-allegro-4R9dXyMPlc9#complete-the-data-of-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param advanceShipNotice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ASN is invalid or attempting to update read-only property </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdvanceShipNoticeAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull AdvanceShipNotice advanceShipNotice, final ApiCallback<AdvanceShipNoticeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdvanceShipNoticeValidateBeforeCall(id, ifMatch, advanceShipNotice, _callback);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubmittedAdvanceShipNotice
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param updateSubmittedAdvanceShipNoticeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubmittedAdvanceShipNoticeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull UpdateSubmittedAdvanceShipNoticeRequest updateSubmittedAdvanceShipNoticeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSubmittedAdvanceShipNoticeRequest;

        // create path and map variables
        String localVarPath = "/fulfillment/advance-ship-notices/{id}/submitted"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubmittedAdvanceShipNoticeValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull UpdateSubmittedAdvanceShipNoticeRequest updateSubmittedAdvanceShipNoticeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSubmittedAdvanceShipNotice(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling updateSubmittedAdvanceShipNotice(Async)");
        }

        // verify the required parameter 'updateSubmittedAdvanceShipNoticeRequest' is set
        if (updateSubmittedAdvanceShipNoticeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSubmittedAdvanceShipNoticeRequest' when calling updateSubmittedAdvanceShipNotice(Async)");
        }

        return updateSubmittedAdvanceShipNoticeCall(id, ifMatch, updateSubmittedAdvanceShipNoticeRequest, _callback);

    }

    /**
     * Update submitted Advance Ship Notice
     * Use this resource to update already submitted Advance Ship Notice. Update is allowed only when Advance Ship Notice is in \&quot;IN_TRANSIT\&quot; status. Modifications are limited to:   - changing items quantity   - removing items   - changing handling unit amount   - changing shipping courier id, name, tracking numbers or vehicle licence plate or third party delivery details (depending on the selected shipping method in the submitted advance ship notice) Handling unit&#39;s amount property update clears labels property. Use Create labels command to create new labels for provided content. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#edytuj-zakonczone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#edit-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param updateSubmittedAdvanceShipNoticeRequest  (required)
     * @return AdvanceShipNoticeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public AdvanceShipNoticeResponse updateSubmittedAdvanceShipNotice(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull UpdateSubmittedAdvanceShipNoticeRequest updateSubmittedAdvanceShipNoticeRequest) throws ApiException {
        ApiResponse<AdvanceShipNoticeResponse> localVarResp = updateSubmittedAdvanceShipNoticeWithHttpInfo(id, ifMatch, updateSubmittedAdvanceShipNoticeRequest);
        return localVarResp.getData();
    }

    /**
     * Update submitted Advance Ship Notice
     * Use this resource to update already submitted Advance Ship Notice. Update is allowed only when Advance Ship Notice is in \&quot;IN_TRANSIT\&quot; status. Modifications are limited to:   - changing items quantity   - removing items   - changing handling unit amount   - changing shipping courier id, name, tracking numbers or vehicle licence plate or third party delivery details (depending on the selected shipping method in the submitted advance ship notice) Handling unit&#39;s amount property update clears labels property. Use Create labels command to create new labels for provided content. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#edytuj-zakonczone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#edit-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param updateSubmittedAdvanceShipNoticeRequest  (required)
     * @return ApiResponse&lt;AdvanceShipNoticeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdvanceShipNoticeResponse> updateSubmittedAdvanceShipNoticeWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull UpdateSubmittedAdvanceShipNoticeRequest updateSubmittedAdvanceShipNoticeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSubmittedAdvanceShipNoticeValidateBeforeCall(id, ifMatch, updateSubmittedAdvanceShipNoticeRequest, null);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update submitted Advance Ship Notice (asynchronously)
     * Use this resource to update already submitted Advance Ship Notice. Update is allowed only when Advance Ship Notice is in \&quot;IN_TRANSIT\&quot; status. Modifications are limited to:   - changing items quantity   - removing items   - changing handling unit amount   - changing shipping courier id, name, tracking numbers or vehicle licence plate or third party delivery details (depending on the selected shipping method in the submitted advance ship notice) Handling unit&#39;s amount property update clears labels property. Use Create labels command to create new labels for provided content. Read more: &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-0ADwgOLqWSw#edytuj-zakonczone-awizo\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/one-fulfillment-by-allegro-4R9dXyMPlc9#edit-advance-ship-notice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id An identifier of Advance Ship Notice. (required)
     * @param ifMatch A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param updateSubmittedAdvanceShipNoticeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Advance Ship Notice updated </td><td>  * etag - A current version of ASN. Use this value in combination with If-Match header to update ASN. <br>  </td></tr>
        <tr><td> 400 </td><td> If-match header missing </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Concurrent modification of ASN </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubmittedAdvanceShipNoticeAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String ifMatch, @javax.annotation.Nonnull UpdateSubmittedAdvanceShipNoticeRequest updateSubmittedAdvanceShipNoticeRequest, final ApiCallback<AdvanceShipNoticeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubmittedAdvanceShipNoticeValidateBeforeCall(id, ifMatch, updateSubmittedAdvanceShipNoticeRequest, _callback);
        Type localVarReturnType = new TypeToken<AdvanceShipNoticeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
