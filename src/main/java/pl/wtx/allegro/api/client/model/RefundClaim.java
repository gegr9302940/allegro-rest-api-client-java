/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import pl.wtx.allegro.api.client.model.RefundClaimBuyer;
import pl.wtx.allegro.api.client.model.RefundClaimCommission;
import pl.wtx.allegro.api.client.model.RefundClaimLineItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Detailed information about the refund application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class RefundClaim {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  /**
   * Status of the returned refund application. - &#x60;IN_PROGRESS&#x60; - the application is being processed or awaits user or admin action. - &#x60;WAITING_FOR_PAYMENT_REFUND&#x60; - the application is being processed and awaits payment refund to buyer. - &#x60;GRANTED&#x60; - the application was accepted and a commission refund was granted as requested,   or the application was rejected and the seller successfully appealed. - &#x60;REJECTED&#x60; - the application was rejected and no commission was refunded. - &#x60;REJECTED_AFTER_APPEAL&#x60; - the application was initially rejected and the seller unsuccessfully appealed. - &#x60;CANCELLED&#x60; - the application was cancelled by the seller. - &#x60;APPEALED&#x60; - the application was rejected and the seller appealed, but the appeal has not yet finished processing.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("IN_PROGRESS"),
    
    WAITING_FOR_PAYMENT_REFUND("WAITING_FOR_PAYMENT_REFUND"),
    
    GRANTED("GRANTED"),
    
    REJECTED("REJECTED"),
    
    REJECTED_AFTER_APPEAL("REJECTED_AFTER_APPEAL"),
    
    CANCELLED("CANCELLED"),
    
    APPEALED("APPEALED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nullable
  private Integer quantity;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  @javax.annotation.Nullable
  private RefundClaimCommission commission;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  @javax.annotation.Nullable
  private RefundClaimBuyer buyer;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LINE_ITEM = "lineItem";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM)
  @javax.annotation.Nullable
  private RefundClaimLineItem lineItem;

  /**
   * Type of commission refund application. - &#x60;MANUAL&#x60; - the application was created manually by the seller. - &#x60;AUTOMATIC&#x60; - the application was created automatically.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MANUAL("MANUAL"),
    
    AUTOMATIC("AUTOMATIC");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public RefundClaim() {
  }

  public RefundClaim id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the returned refund application.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public RefundClaim status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the returned refund application. - &#x60;IN_PROGRESS&#x60; - the application is being processed or awaits user or admin action. - &#x60;WAITING_FOR_PAYMENT_REFUND&#x60; - the application is being processed and awaits payment refund to buyer. - &#x60;GRANTED&#x60; - the application was accepted and a commission refund was granted as requested,   or the application was rejected and the seller successfully appealed. - &#x60;REJECTED&#x60; - the application was rejected and no commission was refunded. - &#x60;REJECTED_AFTER_APPEAL&#x60; - the application was initially rejected and the seller unsuccessfully appealed. - &#x60;CANCELLED&#x60; - the application was cancelled by the seller. - &#x60;APPEALED&#x60; - the application was rejected and the seller appealed, but the appeal has not yet finished processing.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public RefundClaim quantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of product for which the seller filed the refund application.
   * minimum: 1
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
  }


  public RefundClaim commission(@javax.annotation.Nullable RefundClaimCommission commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Get commission
   * @return commission
   */
  @javax.annotation.Nullable
  public RefundClaimCommission getCommission() {
    return commission;
  }

  public void setCommission(@javax.annotation.Nullable RefundClaimCommission commission) {
    this.commission = commission;
  }


  public RefundClaim buyer(@javax.annotation.Nullable RefundClaimBuyer buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nullable
  public RefundClaimBuyer getBuyer() {
    return buyer;
  }

  public void setBuyer(@javax.annotation.Nullable RefundClaimBuyer buyer) {
    this.buyer = buyer;
  }


  public RefundClaim createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date when the refund application was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RefundClaim lineItem(@javax.annotation.Nullable RefundClaimLineItem lineItem) {
    this.lineItem = lineItem;
    return this;
  }

  /**
   * Get lineItem
   * @return lineItem
   */
  @javax.annotation.Nullable
  public RefundClaimLineItem getLineItem() {
    return lineItem;
  }

  public void setLineItem(@javax.annotation.Nullable RefundClaimLineItem lineItem) {
    this.lineItem = lineItem;
  }


  public RefundClaim type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of commission refund application. - &#x60;MANUAL&#x60; - the application was created manually by the seller. - &#x60;AUTOMATIC&#x60; - the application was created automatically.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundClaim refundClaim = (RefundClaim) o;
    return Objects.equals(this.id, refundClaim.id) &&
        Objects.equals(this.status, refundClaim.status) &&
        Objects.equals(this.quantity, refundClaim.quantity) &&
        Objects.equals(this.commission, refundClaim.commission) &&
        Objects.equals(this.buyer, refundClaim.buyer) &&
        Objects.equals(this.createdAt, refundClaim.createdAt) &&
        Objects.equals(this.lineItem, refundClaim.lineItem) &&
        Objects.equals(this.type, refundClaim.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, quantity, commission, buyer, createdAt, lineItem, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundClaim {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lineItem: ").append(toIndentedString(lineItem)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("quantity");
    openapiFields.add("commission");
    openapiFields.add("buyer");
    openapiFields.add("createdAt");
    openapiFields.add("lineItem");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RefundClaim
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefundClaim.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefundClaim is not found in the empty JSON string", RefundClaim.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefundClaim.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefundClaim` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `commission`
      if (jsonObj.get("commission") != null && !jsonObj.get("commission").isJsonNull()) {
        RefundClaimCommission.validateJsonElement(jsonObj.get("commission"));
      }
      // validate the optional field `buyer`
      if (jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) {
        RefundClaimBuyer.validateJsonElement(jsonObj.get("buyer"));
      }
      // validate the optional field `lineItem`
      if (jsonObj.get("lineItem") != null && !jsonObj.get("lineItem").isJsonNull()) {
        RefundClaimLineItem.validateJsonElement(jsonObj.get("lineItem"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefundClaim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefundClaim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefundClaim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefundClaim.class));

       return (TypeAdapter<T>) new TypeAdapter<RefundClaim>() {
           @Override
           public void write(JsonWriter out, RefundClaim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefundClaim read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RefundClaim given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RefundClaim
   * @throws IOException if the JSON string is invalid with respect to RefundClaim
   */
  public static RefundClaim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefundClaim.class);
  }

  /**
   * Convert an instance of RefundClaim to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

