/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.CreateOfferBundleDTO;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.OfferBundleDTO;
import pl.wtx.allegro.api.client.model.OfferBundlesDTO;
import pl.wtx.allegro.api.client.model.UpdateOfferBundleDiscountDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OfferBundlesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OfferBundlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OfferBundlesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOfferBundleUsingPOST
     * @param createOfferBundleDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested offer bundle. Once bundle is created it can be in one of two statuses on each marketplace separately: &lt;ul&gt; &lt;li&gt; &#x60;ACTIVE&#x60; means that bundle will be displayed on offer page; &lt;li&gt; &#x60;SUSPENDED&#x60; means that bundle will NOT be displayed on offer page. &lt;/ul&gt; Bundle is SUSPENDED on all marketplaces when at least one of offers is ended or out of stock. Bundle is SUSPENDED on specific marketplace when at least one of offers: &lt;ul&gt; &lt;li&gt; is not visible on that marketplace;&lt;/li&gt; &lt;li&gt; is in campaign which lowers its price on that marketplace;&lt;/li&gt; &lt;/ul&gt; or when discount cannot be spread across offers considering their current prices on that marketplace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOfferBundleUsingPOSTCall(@javax.annotation.Nonnull CreateOfferBundleDTO createOfferBundleDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOfferBundleDTO;

        // create path and map variables
        String localVarPath = "/sale/bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOfferBundleUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull CreateOfferBundleDTO createOfferBundleDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOfferBundleDTO' is set
        if (createOfferBundleDTO == null) {
            throw new ApiException("Missing the required parameter 'createOfferBundleDTO' when calling createOfferBundleUsingPOST(Async)");
        }

        return createOfferBundleUsingPOSTCall(createOfferBundleDTO, _callback);

    }

    /**
     * Create a new offer bundle
     * You can create &lt;a href&#x3D;\&quot;https://help.allegro.com/sell/en/a/how-to-create-offer-bundles-rj9eAL2XnhK?marketplaceId&#x3D;allegro-pl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;offer bundle&lt;/a&gt; using this endpoint. Bundle has to contain at least two offers and at least one of them has to be set as an entry point. Bundle will be shown on offers&#39; pages which are marked as entry points. You can also specify how many units of each offer will be in bundle using &#x60;requiredQuantity&#x60; property. &lt;br&gt; Additionally, discount can be specified for each marketplace separately. If you do not want to set discount, set &#x60;discounts&#x60; property to &#x60;null&#x60; or empty array. Also, you do not have to specify discount on all marketplaces. Fill marketplaces in &#39;discounts&#39; array accordingly to your needs. &lt;br&gt; Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#utworz-zestaw-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#create-an-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createOfferBundleDTO  (required)
     * @return OfferBundleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested offer bundle. Once bundle is created it can be in one of two statuses on each marketplace separately: &lt;ul&gt; &lt;li&gt; &#x60;ACTIVE&#x60; means that bundle will be displayed on offer page; &lt;li&gt; &#x60;SUSPENDED&#x60; means that bundle will NOT be displayed on offer page. &lt;/ul&gt; Bundle is SUSPENDED on all marketplaces when at least one of offers is ended or out of stock. Bundle is SUSPENDED on specific marketplace when at least one of offers: &lt;ul&gt; &lt;li&gt; is not visible on that marketplace;&lt;/li&gt; &lt;li&gt; is in campaign which lowers its price on that marketplace;&lt;/li&gt; &lt;/ul&gt; or when discount cannot be spread across offers considering their current prices on that marketplace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public OfferBundleDTO createOfferBundleUsingPOST(@javax.annotation.Nonnull CreateOfferBundleDTO createOfferBundleDTO) throws ApiException {
        ApiResponse<OfferBundleDTO> localVarResp = createOfferBundleUsingPOSTWithHttpInfo(createOfferBundleDTO);
        return localVarResp.getData();
    }

    /**
     * Create a new offer bundle
     * You can create &lt;a href&#x3D;\&quot;https://help.allegro.com/sell/en/a/how-to-create-offer-bundles-rj9eAL2XnhK?marketplaceId&#x3D;allegro-pl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;offer bundle&lt;/a&gt; using this endpoint. Bundle has to contain at least two offers and at least one of them has to be set as an entry point. Bundle will be shown on offers&#39; pages which are marked as entry points. You can also specify how many units of each offer will be in bundle using &#x60;requiredQuantity&#x60; property. &lt;br&gt; Additionally, discount can be specified for each marketplace separately. If you do not want to set discount, set &#x60;discounts&#x60; property to &#x60;null&#x60; or empty array. Also, you do not have to specify discount on all marketplaces. Fill marketplaces in &#39;discounts&#39; array accordingly to your needs. &lt;br&gt; Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#utworz-zestaw-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#create-an-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createOfferBundleDTO  (required)
     * @return ApiResponse&lt;OfferBundleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested offer bundle. Once bundle is created it can be in one of two statuses on each marketplace separately: &lt;ul&gt; &lt;li&gt; &#x60;ACTIVE&#x60; means that bundle will be displayed on offer page; &lt;li&gt; &#x60;SUSPENDED&#x60; means that bundle will NOT be displayed on offer page. &lt;/ul&gt; Bundle is SUSPENDED on all marketplaces when at least one of offers is ended or out of stock. Bundle is SUSPENDED on specific marketplace when at least one of offers: &lt;ul&gt; &lt;li&gt; is not visible on that marketplace;&lt;/li&gt; &lt;li&gt; is in campaign which lowers its price on that marketplace;&lt;/li&gt; &lt;/ul&gt; or when discount cannot be spread across offers considering their current prices on that marketplace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferBundleDTO> createOfferBundleUsingPOSTWithHttpInfo(@javax.annotation.Nonnull CreateOfferBundleDTO createOfferBundleDTO) throws ApiException {
        okhttp3.Call localVarCall = createOfferBundleUsingPOSTValidateBeforeCall(createOfferBundleDTO, null);
        Type localVarReturnType = new TypeToken<OfferBundleDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new offer bundle (asynchronously)
     * You can create &lt;a href&#x3D;\&quot;https://help.allegro.com/sell/en/a/how-to-create-offer-bundles-rj9eAL2XnhK?marketplaceId&#x3D;allegro-pl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;offer bundle&lt;/a&gt; using this endpoint. Bundle has to contain at least two offers and at least one of them has to be set as an entry point. Bundle will be shown on offers&#39; pages which are marked as entry points. You can also specify how many units of each offer will be in bundle using &#x60;requiredQuantity&#x60; property. &lt;br&gt; Additionally, discount can be specified for each marketplace separately. If you do not want to set discount, set &#x60;discounts&#x60; property to &#x60;null&#x60; or empty array. Also, you do not have to specify discount on all marketplaces. Fill marketplaces in &#39;discounts&#39; array accordingly to your needs. &lt;br&gt; Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#utworz-zestaw-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#create-an-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param createOfferBundleDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested offer bundle. Once bundle is created it can be in one of two statuses on each marketplace separately: &lt;ul&gt; &lt;li&gt; &#x60;ACTIVE&#x60; means that bundle will be displayed on offer page; &lt;li&gt; &#x60;SUSPENDED&#x60; means that bundle will NOT be displayed on offer page. &lt;/ul&gt; Bundle is SUSPENDED on all marketplaces when at least one of offers is ended or out of stock. Bundle is SUSPENDED on specific marketplace when at least one of offers: &lt;ul&gt; &lt;li&gt; is not visible on that marketplace;&lt;/li&gt; &lt;li&gt; is in campaign which lowers its price on that marketplace;&lt;/li&gt; &lt;/ul&gt; or when discount cannot be spread across offers considering their current prices on that marketplace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOfferBundleUsingPOSTAsync(@javax.annotation.Nonnull CreateOfferBundleDTO createOfferBundleDTO, final ApiCallback<OfferBundleDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOfferBundleUsingPOSTValidateBeforeCall(createOfferBundleDTO, _callback);
        Type localVarReturnType = new TypeToken<OfferBundleDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOfferBundleUsingGET
     * @param bundleId Bundle ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Bundle successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOfferBundleUsingGETCall(@javax.annotation.Nonnull String bundleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/bundles/{bundleId}"
            .replace("{" + "bundleId" + "}", localVarApiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOfferBundleUsingGETValidateBeforeCall(@javax.annotation.Nonnull String bundleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling deleteOfferBundleUsingGET(Async)");
        }

        return deleteOfferBundleUsingGETCall(bundleId, _callback);

    }

    /**
     * Delete bundle by ID
     * Use this resource to delete offer bundle by its unique identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-wybrany-zestaw\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Bundle successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOfferBundleUsingGET(@javax.annotation.Nonnull String bundleId) throws ApiException {
        deleteOfferBundleUsingGETWithHttpInfo(bundleId);
    }

    /**
     * Delete bundle by ID
     * Use this resource to delete offer bundle by its unique identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-wybrany-zestaw\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Bundle successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOfferBundleUsingGETWithHttpInfo(@javax.annotation.Nonnull String bundleId) throws ApiException {
        okhttp3.Call localVarCall = deleteOfferBundleUsingGETValidateBeforeCall(bundleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete bundle by ID (asynchronously)
     * Use this resource to delete offer bundle by its unique identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-wybrany-zestaw\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Bundle successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOfferBundleUsingGETAsync(@javax.annotation.Nonnull String bundleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOfferBundleUsingGETValidateBeforeCall(bundleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOfferBundleUsingGET
     * @param bundleId Bundle ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested offer bundle </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferBundleUsingGETCall(@javax.annotation.Nonnull String bundleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/bundles/{bundleId}"
            .replace("{" + "bundleId" + "}", localVarApiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferBundleUsingGETValidateBeforeCall(@javax.annotation.Nonnull String bundleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling getOfferBundleUsingGET(Async)");
        }

        return getOfferBundleUsingGETCall(bundleId, _callback);

    }

    /**
     * Get bundle by ID
     * Use this resource to retrieve offer bundle by its unique identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-szczegoly-wybranego-zestawu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-details-of-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @return OfferBundleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested offer bundle </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public OfferBundleDTO getOfferBundleUsingGET(@javax.annotation.Nonnull String bundleId) throws ApiException {
        ApiResponse<OfferBundleDTO> localVarResp = getOfferBundleUsingGETWithHttpInfo(bundleId);
        return localVarResp.getData();
    }

    /**
     * Get bundle by ID
     * Use this resource to retrieve offer bundle by its unique identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-szczegoly-wybranego-zestawu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-details-of-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @return ApiResponse&lt;OfferBundleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested offer bundle </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferBundleDTO> getOfferBundleUsingGETWithHttpInfo(@javax.annotation.Nonnull String bundleId) throws ApiException {
        okhttp3.Call localVarCall = getOfferBundleUsingGETValidateBeforeCall(bundleId, null);
        Type localVarReturnType = new TypeToken<OfferBundleDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get bundle by ID (asynchronously)
     * Use this resource to retrieve offer bundle by its unique identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-szczegoly-wybranego-zestawu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-details-of-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested offer bundle </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bundle not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferBundleUsingGETAsync(@javax.annotation.Nonnull String bundleId, final ApiCallback<OfferBundleDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfferBundleUsingGETValidateBeforeCall(bundleId, _callback);
        Type localVarReturnType = new TypeToken<OfferBundleDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSellersOfferBundlesUsingGET
     * @param limit Limit of bundles per page. (optional, default to 50)
     * @param offerId Filter bundles which contains offer. (optional)
     * @param pageId ID of page which will be retrieved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of seller&#39;s bundles. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellersOfferBundlesUsingGETCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offer.id", offerId));
        }

        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page.id", pageId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSellersOfferBundlesUsingGETValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageId, final ApiCallback _callback) throws ApiException {
        return listSellersOfferBundlesUsingGETCall(limit, offerId, pageId, _callback);

    }

    /**
     * List seller&#39;s bundles
     * You can fetch page of seller&#39;s offer bundles using this endpoint. &lt;br&gt; Paging: &lt;br&gt; To move to next page, specify &#x60;page.id&#x60; parameter with value obtained in response from previous request. Number of offer bundles on single page can be specified using &#x60;limit&#x60; parameter. &lt;br&gt; Filtering: &lt;br&gt; Offer bundles can be filtered to bundles which contain offer specified in &#x60;offer.id&#x60; parameter. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-liste-zestawow-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-offer-bundles-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Limit of bundles per page. (optional, default to 50)
     * @param offerId Filter bundles which contains offer. (optional)
     * @param pageId ID of page which will be retrieved. (optional)
     * @return OfferBundlesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of seller&#39;s bundles. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public OfferBundlesDTO listSellersOfferBundlesUsingGET(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageId) throws ApiException {
        ApiResponse<OfferBundlesDTO> localVarResp = listSellersOfferBundlesUsingGETWithHttpInfo(limit, offerId, pageId);
        return localVarResp.getData();
    }

    /**
     * List seller&#39;s bundles
     * You can fetch page of seller&#39;s offer bundles using this endpoint. &lt;br&gt; Paging: &lt;br&gt; To move to next page, specify &#x60;page.id&#x60; parameter with value obtained in response from previous request. Number of offer bundles on single page can be specified using &#x60;limit&#x60; parameter. &lt;br&gt; Filtering: &lt;br&gt; Offer bundles can be filtered to bundles which contain offer specified in &#x60;offer.id&#x60; parameter. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-liste-zestawow-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-offer-bundles-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Limit of bundles per page. (optional, default to 50)
     * @param offerId Filter bundles which contains offer. (optional)
     * @param pageId ID of page which will be retrieved. (optional)
     * @return ApiResponse&lt;OfferBundlesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of seller&#39;s bundles. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferBundlesDTO> listSellersOfferBundlesUsingGETWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageId) throws ApiException {
        okhttp3.Call localVarCall = listSellersOfferBundlesUsingGETValidateBeforeCall(limit, offerId, pageId, null);
        Type localVarReturnType = new TypeToken<OfferBundlesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List seller&#39;s bundles (asynchronously)
     * You can fetch page of seller&#39;s offer bundles using this endpoint. &lt;br&gt; Paging: &lt;br&gt; To move to next page, specify &#x60;page.id&#x60; parameter with value obtained in response from previous request. Number of offer bundles on single page can be specified using &#x60;limit&#x60; parameter. &lt;br&gt; Filtering: &lt;br&gt; Offer bundles can be filtered to bundles which contain offer specified in &#x60;offer.id&#x60; parameter. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-liste-zestawow-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-offer-bundles-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Limit of bundles per page. (optional, default to 50)
     * @param offerId Filter bundles which contains offer. (optional)
     * @param pageId ID of page which will be retrieved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of seller&#39;s bundles. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellersOfferBundlesUsingGETAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageId, final ApiCallback<OfferBundlesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSellersOfferBundlesUsingGETValidateBeforeCall(limit, offerId, pageId, _callback);
        Type localVarReturnType = new TypeToken<OfferBundlesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOfferBundleDiscountUsingPUT
     * @param bundleId Bundle ID. (required)
     * @param updateOfferBundleDiscountDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bundle discount successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOfferBundleDiscountUsingPUTCall(@javax.annotation.Nonnull String bundleId, @javax.annotation.Nonnull UpdateOfferBundleDiscountDTO updateOfferBundleDiscountDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOfferBundleDiscountDTO;

        // create path and map variables
        String localVarPath = "/sale/bundles/{bundleId}/discount"
            .replace("{" + "bundleId" + "}", localVarApiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOfferBundleDiscountUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String bundleId, @javax.annotation.Nonnull UpdateOfferBundleDiscountDTO updateOfferBundleDiscountDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling updateOfferBundleDiscountUsingPUT(Async)");
        }

        // verify the required parameter 'updateOfferBundleDiscountDTO' is set
        if (updateOfferBundleDiscountDTO == null) {
            throw new ApiException("Missing the required parameter 'updateOfferBundleDiscountDTO' when calling updateOfferBundleDiscountUsingPUT(Async)");
        }

        return updateOfferBundleDiscountUsingPUTCall(bundleId, updateOfferBundleDiscountDTO, _callback);

    }

    /**
     * Update discount associated with bundle
     * Use this resource to update discount per marketplaces associated with bundle specified by its unique identifier. This will override currently set discounts for all marketplaces, so the unchanged discounts also must be specified in request. In case discount for marketplace is not specified in request it will be deleted. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#zmien-rabat-przypisany-do-wybranego-zestawu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#change-the-discount-for-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @param updateOfferBundleDiscountDTO  (required)
     * @return OfferBundleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bundle discount successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public OfferBundleDTO updateOfferBundleDiscountUsingPUT(@javax.annotation.Nonnull String bundleId, @javax.annotation.Nonnull UpdateOfferBundleDiscountDTO updateOfferBundleDiscountDTO) throws ApiException {
        ApiResponse<OfferBundleDTO> localVarResp = updateOfferBundleDiscountUsingPUTWithHttpInfo(bundleId, updateOfferBundleDiscountDTO);
        return localVarResp.getData();
    }

    /**
     * Update discount associated with bundle
     * Use this resource to update discount per marketplaces associated with bundle specified by its unique identifier. This will override currently set discounts for all marketplaces, so the unchanged discounts also must be specified in request. In case discount for marketplace is not specified in request it will be deleted. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#zmien-rabat-przypisany-do-wybranego-zestawu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#change-the-discount-for-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @param updateOfferBundleDiscountDTO  (required)
     * @return ApiResponse&lt;OfferBundleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bundle discount successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferBundleDTO> updateOfferBundleDiscountUsingPUTWithHttpInfo(@javax.annotation.Nonnull String bundleId, @javax.annotation.Nonnull UpdateOfferBundleDiscountDTO updateOfferBundleDiscountDTO) throws ApiException {
        okhttp3.Call localVarCall = updateOfferBundleDiscountUsingPUTValidateBeforeCall(bundleId, updateOfferBundleDiscountDTO, null);
        Type localVarReturnType = new TypeToken<OfferBundleDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update discount associated with bundle (asynchronously)
     * Use this resource to update discount per marketplaces associated with bundle specified by its unique identifier. This will override currently set discounts for all marketplaces, so the unchanged discounts also must be specified in request. In case discount for marketplace is not specified in request it will be deleted. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#zmien-rabat-przypisany-do-wybranego-zestawu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#change-the-discount-for-the-selected-offer-bundle\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param bundleId Bundle ID. (required)
     * @param updateOfferBundleDiscountDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bundle discount successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOfferBundleDiscountUsingPUTAsync(@javax.annotation.Nonnull String bundleId, @javax.annotation.Nonnull UpdateOfferBundleDiscountDTO updateOfferBundleDiscountDTO, final ApiCallback<OfferBundleDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOfferBundleDiscountUsingPUTValidateBeforeCall(bundleId, updateOfferBundleDiscountDTO, _callback);
        Type localVarReturnType = new TypeToken<OfferBundleDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
