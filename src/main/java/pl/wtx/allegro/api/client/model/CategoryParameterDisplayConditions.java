/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.CategoryParameterWithValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Restricts the circumstances when this parameter should be displayed e.g. on a user form. &#x60;null&#x60; if this parameter is displayed always. Present if this parameter should be displayed only if all of the contained conditions of all condition types are fulfilled. At least one condition is contained if this field is present.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CategoryParameterDisplayConditions {
  public static final String SERIALIZED_NAME_PARAMETERS_WITH_VALUE = "parametersWithValue";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_WITH_VALUE)
  @javax.annotation.Nonnull
  private List<CategoryParameterWithValue> parametersWithValue = new ArrayList<>();

  public CategoryParameterDisplayConditions() {
  }

  public CategoryParameterDisplayConditions parametersWithValue(@javax.annotation.Nonnull List<CategoryParameterWithValue> parametersWithValue) {
    this.parametersWithValue = parametersWithValue;
    return this;
  }

  public CategoryParameterDisplayConditions addParametersWithValueItem(CategoryParameterWithValue parametersWithValueItem) {
    if (this.parametersWithValue == null) {
      this.parametersWithValue = new ArrayList<>();
    }
    this.parametersWithValue.add(parametersWithValueItem);
    return this;
  }

  /**
   * Condition type which displays this parameter only if each of the given other parameters has filled in one of the respective given value ids in an offer or product. Empty if no condition of this type is present.
   * @return parametersWithValue
   */
  @javax.annotation.Nonnull
  public List<CategoryParameterWithValue> getParametersWithValue() {
    return parametersWithValue;
  }

  public void setParametersWithValue(@javax.annotation.Nonnull List<CategoryParameterWithValue> parametersWithValue) {
    this.parametersWithValue = parametersWithValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryParameterDisplayConditions categoryParameterDisplayConditions = (CategoryParameterDisplayConditions) o;
    return Objects.equals(this.parametersWithValue, categoryParameterDisplayConditions.parametersWithValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parametersWithValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryParameterDisplayConditions {\n");
    sb.append("    parametersWithValue: ").append(toIndentedString(parametersWithValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("parametersWithValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("parametersWithValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryParameterDisplayConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryParameterDisplayConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryParameterDisplayConditions is not found in the empty JSON string", CategoryParameterDisplayConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryParameterDisplayConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryParameterDisplayConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CategoryParameterDisplayConditions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("parametersWithValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parametersWithValue` to be an array in the JSON string but got `%s`", jsonObj.get("parametersWithValue").toString()));
      }

      JsonArray jsonArrayparametersWithValue = jsonObj.getAsJsonArray("parametersWithValue");
      // validate the required field `parametersWithValue` (array)
      for (int i = 0; i < jsonArrayparametersWithValue.size(); i++) {
        CategoryParameterWithValue.validateJsonElement(jsonArrayparametersWithValue.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryParameterDisplayConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryParameterDisplayConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryParameterDisplayConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryParameterDisplayConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryParameterDisplayConditions>() {
           @Override
           public void write(JsonWriter out, CategoryParameterDisplayConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryParameterDisplayConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryParameterDisplayConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryParameterDisplayConditions
   * @throws IOException if the JSON string is invalid with respect to CategoryParameterDisplayConditions
   */
  public static CategoryParameterDisplayConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryParameterDisplayConditions.class);
  }

  /**
   * Convert an instance of CategoryParameterDisplayConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

