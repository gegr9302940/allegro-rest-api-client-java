/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AllegroCarrier;
import pl.wtx.allegro.api.client.model.AllegroPickupDropOffPointsResponse;
import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.CarrierParcelTrackingResponse;
import pl.wtx.allegro.api.client.model.CheckFormsNewOrderInvoice;
import pl.wtx.allegro.api.client.model.CheckFormsNewOrderInvoiceId;
import pl.wtx.allegro.api.client.model.CheckoutForm;
import pl.wtx.allegro.api.client.model.CheckoutFormAddWaybillCreated;
import pl.wtx.allegro.api.client.model.CheckoutFormAddWaybillRequest;
import pl.wtx.allegro.api.client.model.CheckoutFormFulfillment;
import pl.wtx.allegro.api.client.model.CheckoutFormOrderWaybillResponse;
import pl.wtx.allegro.api.client.model.CheckoutForms;
import pl.wtx.allegro.api.client.model.CheckoutFormsOrderInvoices;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import java.io.File;
import java.time.OffsetDateTime;
import pl.wtx.allegro.api.client.model.OrderEventStats;
import pl.wtx.allegro.api.client.model.OrderEventsList;
import pl.wtx.allegro.api.client.model.OrdersShippingCarriersResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addOrderInvoicesMetadata
     * @param id Order identifier. (required)
     * @param checkFormsNewOrderInvoice request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invoice created successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Order with given id already has seller invoice </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid or order does not allow an invoice or order&#39;s payment is rejected or previously uploaded file is still in scanning. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You&#39;re trying to add another metadata too fast. Upload a file to previously added metadata or wait a few seconds before adding next metadata. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrderInvoicesMetadataCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckFormsNewOrderInvoice checkFormsNewOrderInvoice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkFormsNewOrderInvoice;

        // create path and map variables
        String localVarPath = "/order/checkout-forms/{id}/invoices"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrderInvoicesMetadataValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckFormsNewOrderInvoice checkFormsNewOrderInvoice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addOrderInvoicesMetadata(Async)");
        }

        // verify the required parameter 'checkFormsNewOrderInvoice' is set
        if (checkFormsNewOrderInvoice == null) {
            throw new ApiException("Missing the required parameter 'checkFormsNewOrderInvoice' when calling addOrderInvoicesMetadata(Async)");
        }

        return addOrderInvoicesMetadataCall(id, checkFormsNewOrderInvoice, _callback);

    }

    /**
     * Post new invoice
     * Use to add new invoice metadata. Before you send an invoice file, you need to initialize the invoice instance with the required parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkFormsNewOrderInvoice request (required)
     * @return CheckFormsNewOrderInvoiceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invoice created successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Order with given id already has seller invoice </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid or order does not allow an invoice or order&#39;s payment is rejected or previously uploaded file is still in scanning. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You&#39;re trying to add another metadata too fast. Upload a file to previously added metadata or wait a few seconds before adding next metadata. </td><td>  -  </td></tr>
     </table>
     */
    public CheckFormsNewOrderInvoiceId addOrderInvoicesMetadata(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckFormsNewOrderInvoice checkFormsNewOrderInvoice) throws ApiException {
        ApiResponse<CheckFormsNewOrderInvoiceId> localVarResp = addOrderInvoicesMetadataWithHttpInfo(id, checkFormsNewOrderInvoice);
        return localVarResp.getData();
    }

    /**
     * Post new invoice
     * Use to add new invoice metadata. Before you send an invoice file, you need to initialize the invoice instance with the required parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkFormsNewOrderInvoice request (required)
     * @return ApiResponse&lt;CheckFormsNewOrderInvoiceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invoice created successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Order with given id already has seller invoice </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid or order does not allow an invoice or order&#39;s payment is rejected or previously uploaded file is still in scanning. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You&#39;re trying to add another metadata too fast. Upload a file to previously added metadata or wait a few seconds before adding next metadata. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckFormsNewOrderInvoiceId> addOrderInvoicesMetadataWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckFormsNewOrderInvoice checkFormsNewOrderInvoice) throws ApiException {
        okhttp3.Call localVarCall = addOrderInvoicesMetadataValidateBeforeCall(id, checkFormsNewOrderInvoice, null);
        Type localVarReturnType = new TypeToken<CheckFormsNewOrderInvoiceId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post new invoice (asynchronously)
     * Use to add new invoice metadata. Before you send an invoice file, you need to initialize the invoice instance with the required parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkFormsNewOrderInvoice request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invoice created successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Order with given id already has seller invoice </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid or order does not allow an invoice or order&#39;s payment is rejected or previously uploaded file is still in scanning. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> You&#39;re trying to add another metadata too fast. Upload a file to previously added metadata or wait a few seconds before adding next metadata. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrderInvoicesMetadataAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckFormsNewOrderInvoice checkFormsNewOrderInvoice, final ApiCallback<CheckFormsNewOrderInvoiceId> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrderInvoicesMetadataValidateBeforeCall(id, checkFormsNewOrderInvoice, _callback);
        Type localVarReturnType = new TypeToken<CheckFormsNewOrderInvoiceId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrderShipmentsUsingPOST
     * @param id Order identifier. (required)
     * @param checkoutFormAddWaybillRequest request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request is OK and the parcel tracking number will be assigned to the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long, invalid tracking number structure) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Maximum waybill usage exceeded (e.g. used in too many orders) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. line item doesn’t belong to the order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderShipmentsUsingPOSTCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormAddWaybillRequest checkoutFormAddWaybillRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkoutFormAddWaybillRequest;

        // create path and map variables
        String localVarPath = "/order/checkout-forms/{id}/shipments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderShipmentsUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormAddWaybillRequest checkoutFormAddWaybillRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createOrderShipmentsUsingPOST(Async)");
        }

        // verify the required parameter 'checkoutFormAddWaybillRequest' is set
        if (checkoutFormAddWaybillRequest == null) {
            throw new ApiException("Missing the required parameter 'checkoutFormAddWaybillRequest' when calling createOrderShipmentsUsingPOST(Async)");
        }

        return createOrderShipmentsUsingPOSTCall(id, checkoutFormAddWaybillRequest, _callback);

    }

    /**
     * Add a parcel tracking number
     * Add a parcel tracking number (shipment) to given order line items. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-numer-przesylki-do-przedmiotu-w-zamowieniu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-tracking-number-to-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkoutFormAddWaybillRequest request (required)
     * @return CheckoutFormAddWaybillCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request is OK and the parcel tracking number will be assigned to the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long, invalid tracking number structure) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Maximum waybill usage exceeded (e.g. used in too many orders) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. line item doesn’t belong to the order </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutFormAddWaybillCreated createOrderShipmentsUsingPOST(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormAddWaybillRequest checkoutFormAddWaybillRequest) throws ApiException {
        ApiResponse<CheckoutFormAddWaybillCreated> localVarResp = createOrderShipmentsUsingPOSTWithHttpInfo(id, checkoutFormAddWaybillRequest);
        return localVarResp.getData();
    }

    /**
     * Add a parcel tracking number
     * Add a parcel tracking number (shipment) to given order line items. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-numer-przesylki-do-przedmiotu-w-zamowieniu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-tracking-number-to-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkoutFormAddWaybillRequest request (required)
     * @return ApiResponse&lt;CheckoutFormAddWaybillCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request is OK and the parcel tracking number will be assigned to the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long, invalid tracking number structure) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Maximum waybill usage exceeded (e.g. used in too many orders) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. line item doesn’t belong to the order </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutFormAddWaybillCreated> createOrderShipmentsUsingPOSTWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormAddWaybillRequest checkoutFormAddWaybillRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrderShipmentsUsingPOSTValidateBeforeCall(id, checkoutFormAddWaybillRequest, null);
        Type localVarReturnType = new TypeToken<CheckoutFormAddWaybillCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a parcel tracking number (asynchronously)
     * Add a parcel tracking number (shipment) to given order line items. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-numer-przesylki-do-przedmiotu-w-zamowieniu\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-tracking-number-to-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkoutFormAddWaybillRequest request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request is OK and the parcel tracking number will be assigned to the order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long, invalid tracking number structure) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Maximum waybill usage exceeded (e.g. used in too many orders) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. line item doesn’t belong to the order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderShipmentsUsingPOSTAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormAddWaybillRequest checkoutFormAddWaybillRequest, final ApiCallback<CheckoutFormAddWaybillCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderShipmentsUsingPOSTValidateBeforeCall(id, checkoutFormAddWaybillRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckoutFormAddWaybillCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllegroPickupDropOffPointsGET
     * @param carriers List of carrier ids to filter the drop off/pick up points to only the ones where any of the listed carriers operate. In case of an empty list, all points are returned. (optional)
     * @param ifModifiedSince Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Information about date (the same HTTP-date format) of last modified data is available in response - &#x60;Last-Modified&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Allegro pickup drop off points </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Data has not been modified after the date provided in If-Modified-Since header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllegroPickupDropOffPointsGETCall(@javax.annotation.Nullable List<AllegroCarrier> carriers, @javax.annotation.Nullable String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/carriers/ALLEGRO/points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carriers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "carriers", carriers));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllegroPickupDropOffPointsGETValidateBeforeCall(@javax.annotation.Nullable List<AllegroCarrier> carriers, @javax.annotation.Nullable String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        return getAllegroPickupDropOffPointsGETCall(carriers, ifModifiedSince, _callback);

    }

    /**
     * Get Allegro pickup drop off points
     * Get a list of Allegro pickup drop off points. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-liste-punktow-allegro\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-list-of-allegro-pickup-drop-off-points\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param carriers List of carrier ids to filter the drop off/pick up points to only the ones where any of the listed carriers operate. In case of an empty list, all points are returned. (optional)
     * @param ifModifiedSince Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Information about date (the same HTTP-date format) of last modified data is available in response - &#x60;Last-Modified&#x60;. (optional)
     * @return AllegroPickupDropOffPointsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Allegro pickup drop off points </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Data has not been modified after the date provided in If-Modified-Since header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public AllegroPickupDropOffPointsResponse getAllegroPickupDropOffPointsGET(@javax.annotation.Nullable List<AllegroCarrier> carriers, @javax.annotation.Nullable String ifModifiedSince) throws ApiException {
        ApiResponse<AllegroPickupDropOffPointsResponse> localVarResp = getAllegroPickupDropOffPointsGETWithHttpInfo(carriers, ifModifiedSince);
        return localVarResp.getData();
    }

    /**
     * Get Allegro pickup drop off points
     * Get a list of Allegro pickup drop off points. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-liste-punktow-allegro\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-list-of-allegro-pickup-drop-off-points\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param carriers List of carrier ids to filter the drop off/pick up points to only the ones where any of the listed carriers operate. In case of an empty list, all points are returned. (optional)
     * @param ifModifiedSince Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Information about date (the same HTTP-date format) of last modified data is available in response - &#x60;Last-Modified&#x60;. (optional)
     * @return ApiResponse&lt;AllegroPickupDropOffPointsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Allegro pickup drop off points </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Data has not been modified after the date provided in If-Modified-Since header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllegroPickupDropOffPointsResponse> getAllegroPickupDropOffPointsGETWithHttpInfo(@javax.annotation.Nullable List<AllegroCarrier> carriers, @javax.annotation.Nullable String ifModifiedSince) throws ApiException {
        okhttp3.Call localVarCall = getAllegroPickupDropOffPointsGETValidateBeforeCall(carriers, ifModifiedSince, null);
        Type localVarReturnType = new TypeToken<AllegroPickupDropOffPointsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Allegro pickup drop off points (asynchronously)
     * Get a list of Allegro pickup drop off points. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-liste-punktow-allegro\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-list-of-allegro-pickup-drop-off-points\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param carriers List of carrier ids to filter the drop off/pick up points to only the ones where any of the listed carriers operate. In case of an empty list, all points are returned. (optional)
     * @param ifModifiedSince Date of last data modification. If data has been modified after specified date, full set of data is returned. If header is not specified, full set of data is returned. Date has to be provided in HTTP-date format. Information about date (the same HTTP-date format) of last modified data is available in response - &#x60;Last-Modified&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Allegro pickup drop off points </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Data has not been modified after the date provided in If-Modified-Since header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllegroPickupDropOffPointsGETAsync(@javax.annotation.Nullable List<AllegroCarrier> carriers, @javax.annotation.Nullable String ifModifiedSince, final ApiCallback<AllegroPickupDropOffPointsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllegroPickupDropOffPointsGETValidateBeforeCall(carriers, ifModifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AllegroPickupDropOffPointsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfOrdersUsingGET
     * @param offset Index of first returned checkout-form from all search results. (optional, default to 0)
     * @param limit Maximum number of checkout-forms in response. (optional, default to 100)
     * @param status Specify status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in.   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change.   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing.   * &#x60;CANCELLED&#x60;: purchase cancelled by buyer. (optional)
     * @param fulfillmentStatus Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;NEW&#x60;   * &#x60;PROCESSING&#x60;   * &#x60;READY_FOR_SHIPMENT&#x60;   * &#x60;READY_FOR_PICKUP&#x60;   * &#x60;SENT&#x60;   * &#x60;PICKED_UP&#x60;   * &#x60;CANCELLED&#x60;   * &#x60;SUSPENDED&#x60;   * &#x60;RETURNED&#x60;. (optional)
     * @param fulfillmentShipmentSummaryLineItemsSent Specify filter for line items sending status. Allowed values are:   * &#x60;NONE&#x60;: none of line items have tracking number specified   * &#x60;SOME&#x60;: some of line items have tracking number specified   * &#x60;ALL&#x60;: all of line items have tracking number specified. (optional)
     * @param lineItemsBoughtAtLte Latest line item bought date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param lineItemsBoughtAtGte Latest line item bought date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param paymentId Find checkout-forms having specified payment id. (optional)
     * @param surchargesId Find checkout-forms having specified surcharge id. (optional)
     * @param deliveryMethodId Find checkout-forms having specified delivery method id. (optional)
     * @param buyerLogin Find checkout-forms having specified buyer login. (optional)
     * @param marketplaceId Find checkout-forms of orders purchased on specified marketplace. (optional)
     * @param updatedAtLte Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param updatedAtGte Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by line item boughtAt date, descending. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Returned when request parameters contains illegal values.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when limit or offset value is outside an acceptable range  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfOrdersUsingGETCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String status, @javax.annotation.Nullable String fulfillmentStatus, @javax.annotation.Nullable String fulfillmentShipmentSummaryLineItemsSent, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtLte, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtGte, @javax.annotation.Nullable String paymentId, @javax.annotation.Nullable String surchargesId, @javax.annotation.Nullable String deliveryMethodId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime updatedAtLte, @javax.annotation.Nullable OffsetDateTime updatedAtGte, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/checkout-forms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (fulfillmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillment.status", fulfillmentStatus));
        }

        if (fulfillmentShipmentSummaryLineItemsSent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillment.shipmentSummary.lineItemsSent", fulfillmentShipmentSummaryLineItemsSent));
        }

        if (lineItemsBoughtAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineItems.boughtAt.lte", lineItemsBoughtAtLte));
        }

        if (lineItemsBoughtAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineItems.boughtAt.gte", lineItemsBoughtAtGte));
        }

        if (paymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment.id", paymentId));
        }

        if (surchargesId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surcharges.id", surchargesId));
        }

        if (deliveryMethodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery.method.id", deliveryMethodId));
        }

        if (buyerLogin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer.login", buyerLogin));
        }

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplace.id", marketplaceId));
        }

        if (updatedAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt.lte", updatedAtLte));
        }

        if (updatedAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt.gte", updatedAtGte));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfOrdersUsingGETValidateBeforeCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String status, @javax.annotation.Nullable String fulfillmentStatus, @javax.annotation.Nullable String fulfillmentShipmentSummaryLineItemsSent, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtLte, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtGte, @javax.annotation.Nullable String paymentId, @javax.annotation.Nullable String surchargesId, @javax.annotation.Nullable String deliveryMethodId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime updatedAtLte, @javax.annotation.Nullable OffsetDateTime updatedAtGte, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return getListOfOrdersUsingGETCall(offset, limit, status, fulfillmentStatus, fulfillmentShipmentSummaryLineItemsSent, lineItemsBoughtAtLte, lineItemsBoughtAtGte, paymentId, surchargesId, deliveryMethodId, buyerLogin, marketplaceId, updatedAtLte, updatedAtGte, sort, _callback);

    }

    /**
     * Get the user&#39;s orders
     * Use this resource to get an order list. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#lista-zamowien\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offset Index of first returned checkout-form from all search results. (optional, default to 0)
     * @param limit Maximum number of checkout-forms in response. (optional, default to 100)
     * @param status Specify status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in.   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change.   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing.   * &#x60;CANCELLED&#x60;: purchase cancelled by buyer. (optional)
     * @param fulfillmentStatus Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;NEW&#x60;   * &#x60;PROCESSING&#x60;   * &#x60;READY_FOR_SHIPMENT&#x60;   * &#x60;READY_FOR_PICKUP&#x60;   * &#x60;SENT&#x60;   * &#x60;PICKED_UP&#x60;   * &#x60;CANCELLED&#x60;   * &#x60;SUSPENDED&#x60;   * &#x60;RETURNED&#x60;. (optional)
     * @param fulfillmentShipmentSummaryLineItemsSent Specify filter for line items sending status. Allowed values are:   * &#x60;NONE&#x60;: none of line items have tracking number specified   * &#x60;SOME&#x60;: some of line items have tracking number specified   * &#x60;ALL&#x60;: all of line items have tracking number specified. (optional)
     * @param lineItemsBoughtAtLte Latest line item bought date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param lineItemsBoughtAtGte Latest line item bought date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param paymentId Find checkout-forms having specified payment id. (optional)
     * @param surchargesId Find checkout-forms having specified surcharge id. (optional)
     * @param deliveryMethodId Find checkout-forms having specified delivery method id. (optional)
     * @param buyerLogin Find checkout-forms having specified buyer login. (optional)
     * @param marketplaceId Find checkout-forms of orders purchased on specified marketplace. (optional)
     * @param updatedAtLte Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param updatedAtGte Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by line item boughtAt date, descending. (optional)
     * @return CheckoutForms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Returned when request parameters contains illegal values.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when limit or offset value is outside an acceptable range  </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutForms getListOfOrdersUsingGET(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String status, @javax.annotation.Nullable String fulfillmentStatus, @javax.annotation.Nullable String fulfillmentShipmentSummaryLineItemsSent, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtLte, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtGte, @javax.annotation.Nullable String paymentId, @javax.annotation.Nullable String surchargesId, @javax.annotation.Nullable String deliveryMethodId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime updatedAtLte, @javax.annotation.Nullable OffsetDateTime updatedAtGte, @javax.annotation.Nullable String sort) throws ApiException {
        ApiResponse<CheckoutForms> localVarResp = getListOfOrdersUsingGETWithHttpInfo(offset, limit, status, fulfillmentStatus, fulfillmentShipmentSummaryLineItemsSent, lineItemsBoughtAtLte, lineItemsBoughtAtGte, paymentId, surchargesId, deliveryMethodId, buyerLogin, marketplaceId, updatedAtLte, updatedAtGte, sort);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s orders
     * Use this resource to get an order list. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#lista-zamowien\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offset Index of first returned checkout-form from all search results. (optional, default to 0)
     * @param limit Maximum number of checkout-forms in response. (optional, default to 100)
     * @param status Specify status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in.   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change.   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing.   * &#x60;CANCELLED&#x60;: purchase cancelled by buyer. (optional)
     * @param fulfillmentStatus Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;NEW&#x60;   * &#x60;PROCESSING&#x60;   * &#x60;READY_FOR_SHIPMENT&#x60;   * &#x60;READY_FOR_PICKUP&#x60;   * &#x60;SENT&#x60;   * &#x60;PICKED_UP&#x60;   * &#x60;CANCELLED&#x60;   * &#x60;SUSPENDED&#x60;   * &#x60;RETURNED&#x60;. (optional)
     * @param fulfillmentShipmentSummaryLineItemsSent Specify filter for line items sending status. Allowed values are:   * &#x60;NONE&#x60;: none of line items have tracking number specified   * &#x60;SOME&#x60;: some of line items have tracking number specified   * &#x60;ALL&#x60;: all of line items have tracking number specified. (optional)
     * @param lineItemsBoughtAtLte Latest line item bought date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param lineItemsBoughtAtGte Latest line item bought date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param paymentId Find checkout-forms having specified payment id. (optional)
     * @param surchargesId Find checkout-forms having specified surcharge id. (optional)
     * @param deliveryMethodId Find checkout-forms having specified delivery method id. (optional)
     * @param buyerLogin Find checkout-forms having specified buyer login. (optional)
     * @param marketplaceId Find checkout-forms of orders purchased on specified marketplace. (optional)
     * @param updatedAtLte Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param updatedAtGte Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by line item boughtAt date, descending. (optional)
     * @return ApiResponse&lt;CheckoutForms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Returned when request parameters contains illegal values.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when limit or offset value is outside an acceptable range  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutForms> getListOfOrdersUsingGETWithHttpInfo(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String status, @javax.annotation.Nullable String fulfillmentStatus, @javax.annotation.Nullable String fulfillmentShipmentSummaryLineItemsSent, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtLte, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtGte, @javax.annotation.Nullable String paymentId, @javax.annotation.Nullable String surchargesId, @javax.annotation.Nullable String deliveryMethodId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime updatedAtLte, @javax.annotation.Nullable OffsetDateTime updatedAtGte, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getListOfOrdersUsingGETValidateBeforeCall(offset, limit, status, fulfillmentStatus, fulfillmentShipmentSummaryLineItemsSent, lineItemsBoughtAtLte, lineItemsBoughtAtGte, paymentId, surchargesId, deliveryMethodId, buyerLogin, marketplaceId, updatedAtLte, updatedAtGte, sort, null);
        Type localVarReturnType = new TypeToken<CheckoutForms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s orders (asynchronously)
     * Use this resource to get an order list. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#lista-zamowien\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offset Index of first returned checkout-form from all search results. (optional, default to 0)
     * @param limit Maximum number of checkout-forms in response. (optional, default to 100)
     * @param status Specify status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in.   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change.   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing.   * &#x60;CANCELLED&#x60;: purchase cancelled by buyer. (optional)
     * @param fulfillmentStatus Specify seller status value that checkout-forms must have to be included in the output. Allowed values are:   * &#x60;NEW&#x60;   * &#x60;PROCESSING&#x60;   * &#x60;READY_FOR_SHIPMENT&#x60;   * &#x60;READY_FOR_PICKUP&#x60;   * &#x60;SENT&#x60;   * &#x60;PICKED_UP&#x60;   * &#x60;CANCELLED&#x60;   * &#x60;SUSPENDED&#x60;   * &#x60;RETURNED&#x60;. (optional)
     * @param fulfillmentShipmentSummaryLineItemsSent Specify filter for line items sending status. Allowed values are:   * &#x60;NONE&#x60;: none of line items have tracking number specified   * &#x60;SOME&#x60;: some of line items have tracking number specified   * &#x60;ALL&#x60;: all of line items have tracking number specified. (optional)
     * @param lineItemsBoughtAtLte Latest line item bought date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param lineItemsBoughtAtGte Latest line item bought date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param paymentId Find checkout-forms having specified payment id. (optional)
     * @param surchargesId Find checkout-forms having specified surcharge id. (optional)
     * @param deliveryMethodId Find checkout-forms having specified delivery method id. (optional)
     * @param buyerLogin Find checkout-forms having specified buyer login. (optional)
     * @param marketplaceId Find checkout-forms of orders purchased on specified marketplace. (optional)
     * @param updatedAtLte Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken. (optional)
     * @param updatedAtGte Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by line item boughtAt date, descending. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Returned when request parameters contains illegal values.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when limit or offset value is outside an acceptable range  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfOrdersUsingGETAsync(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String status, @javax.annotation.Nullable String fulfillmentStatus, @javax.annotation.Nullable String fulfillmentShipmentSummaryLineItemsSent, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtLte, @javax.annotation.Nullable OffsetDateTime lineItemsBoughtAtGte, @javax.annotation.Nullable String paymentId, @javax.annotation.Nullable String surchargesId, @javax.annotation.Nullable String deliveryMethodId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime updatedAtLte, @javax.annotation.Nullable OffsetDateTime updatedAtGte, @javax.annotation.Nullable String sort, final ApiCallback<CheckoutForms> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfOrdersUsingGETValidateBeforeCall(offset, limit, status, fulfillmentStatus, fulfillmentShipmentSummaryLineItemsSent, lineItemsBoughtAtLte, lineItemsBoughtAtGte, paymentId, surchargesId, deliveryMethodId, buyerLogin, marketplaceId, updatedAtLte, updatedAtGte, sort, _callback);
        Type localVarReturnType = new TypeToken<CheckoutForms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderEventsStatisticsUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderEventsStatisticsUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/event-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderEventsStatisticsUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrderEventsStatisticsUsingGETCall(_callback);

    }

    /**
     * Get order events statistics
     * Use this resource to returns object that contains event id and occurrence date of the latest event. It gives you current starting point for reading events. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-znalezc-najnowsze-zdarzenie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-find-the-newest-event\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return OrderEventStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public OrderEventStats getOrderEventsStatisticsUsingGET() throws ApiException {
        ApiResponse<OrderEventStats> localVarResp = getOrderEventsStatisticsUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get order events statistics
     * Use this resource to returns object that contains event id and occurrence date of the latest event. It gives you current starting point for reading events. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-znalezc-najnowsze-zdarzenie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-find-the-newest-event\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return ApiResponse&lt;OrderEventStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderEventStats> getOrderEventsStatisticsUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrderEventsStatisticsUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrderEventStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get order events statistics (asynchronously)
     * Use this resource to returns object that contains event id and occurrence date of the latest event. It gives you current starting point for reading events. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-znalezc-najnowsze-zdarzenie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-find-the-newest-event\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderEventsStatisticsUsingGETAsync(final ApiCallback<OrderEventStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderEventsStatisticsUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrderEventStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderEventsUsingGET
     * @param from You can use the event ID to retrieve subsequent chunks of events. (optional)
     * @param type Specify array of event types for filtering. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing   * &#x60;BUYER_CANCELLED&#x60;: purchase was cancelled by buyer   * &#x60;FULFILLMENT_STATUS_CHANGED&#x60;: fulfillment status changed   * &#x60;AUTO_CANCELLED&#x60;: purchase was cancelled automatically by Allegro. (optional)
     * @param limit The maximum number of events returned in the response. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when query parameters are incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderEventsUsingGETCall(@javax.annotation.Nullable String from, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderEventsUsingGETValidateBeforeCall(@javax.annotation.Nullable String from, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getOrderEventsUsingGETCall(from, type, limit, _callback);

    }

    /**
     * Get order events
     * Use this resource to return events that allow you to monitor actions which clients perform, i.e. making a purchase, filling in the checkout form (FOD), finishing payment process, making a surcharge. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#dziennik-zdarzen\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#event-log\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from You can use the event ID to retrieve subsequent chunks of events. (optional)
     * @param type Specify array of event types for filtering. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing   * &#x60;BUYER_CANCELLED&#x60;: purchase was cancelled by buyer   * &#x60;FULFILLMENT_STATUS_CHANGED&#x60;: fulfillment status changed   * &#x60;AUTO_CANCELLED&#x60;: purchase was cancelled automatically by Allegro. (optional)
     * @param limit The maximum number of events returned in the response. (optional, default to 100)
     * @return OrderEventsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when query parameters are incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public OrderEventsList getOrderEventsUsingGET(@javax.annotation.Nullable String from, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<OrderEventsList> localVarResp = getOrderEventsUsingGETWithHttpInfo(from, type, limit);
        return localVarResp.getData();
    }

    /**
     * Get order events
     * Use this resource to return events that allow you to monitor actions which clients perform, i.e. making a purchase, filling in the checkout form (FOD), finishing payment process, making a surcharge. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#dziennik-zdarzen\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#event-log\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from You can use the event ID to retrieve subsequent chunks of events. (optional)
     * @param type Specify array of event types for filtering. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing   * &#x60;BUYER_CANCELLED&#x60;: purchase was cancelled by buyer   * &#x60;FULFILLMENT_STATUS_CHANGED&#x60;: fulfillment status changed   * &#x60;AUTO_CANCELLED&#x60;: purchase was cancelled automatically by Allegro. (optional)
     * @param limit The maximum number of events returned in the response. (optional, default to 100)
     * @return ApiResponse&lt;OrderEventsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when query parameters are incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderEventsList> getOrderEventsUsingGETWithHttpInfo(@javax.annotation.Nullable String from, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getOrderEventsUsingGETValidateBeforeCall(from, type, limit, null);
        Type localVarReturnType = new TypeToken<OrderEventsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get order events (asynchronously)
     * Use this resource to return events that allow you to monitor actions which clients perform, i.e. making a purchase, filling in the checkout form (FOD), finishing payment process, making a surcharge. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#dziennik-zdarzen\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#event-log\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from You can use the event ID to retrieve subsequent chunks of events. (optional)
     * @param type Specify array of event types for filtering. Allowed values are:   * &#x60;BOUGHT&#x60;: purchase without checkout form filled in   * &#x60;FILLED_IN&#x60;: checkout form filled in but payment is not completed yet so data could still change   * &#x60;READY_FOR_PROCESSING&#x60;: payment completed. Purchase is ready for processing   * &#x60;BUYER_CANCELLED&#x60;: purchase was cancelled by buyer   * &#x60;FULFILLMENT_STATUS_CHANGED&#x60;: fulfillment status changed   * &#x60;AUTO_CANCELLED&#x60;: purchase was cancelled automatically by Allegro. (optional)
     * @param limit The maximum number of events returned in the response. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when query parameters are incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderEventsUsingGETAsync(@javax.annotation.Nullable String from, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer limit, final ApiCallback<OrderEventsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderEventsUsingGETValidateBeforeCall(from, type, limit, _callback);
        Type localVarReturnType = new TypeToken<OrderEventsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderInvoicesDetails
     * @param id Order identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices fetched successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoicesDetailsCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/checkout-forms/{id}/invoices"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderInvoicesDetailsValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrderInvoicesDetails(Async)");
        }

        return getOrderInvoicesDetailsCall(id, _callback);

    }

    /**
     * Get order invoices details
     * Use to get invoices details including antivirus scan results and EPT invoice verification status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-informacje-o-fakturach-dodanych-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#retrieve-information-about-invoices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @return CheckoutFormsOrderInvoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices fetched successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutFormsOrderInvoices getOrderInvoicesDetails(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<CheckoutFormsOrderInvoices> localVarResp = getOrderInvoicesDetailsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get order invoices details
     * Use to get invoices details including antivirus scan results and EPT invoice verification status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-informacje-o-fakturach-dodanych-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#retrieve-information-about-invoices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @return ApiResponse&lt;CheckoutFormsOrderInvoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices fetched successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutFormsOrderInvoices> getOrderInvoicesDetailsWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = getOrderInvoicesDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CheckoutFormsOrderInvoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get order invoices details (asynchronously)
     * Use to get invoices details including antivirus scan results and EPT invoice verification status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-informacje-o-fakturach-dodanych-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#retrieve-information-about-invoices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices fetched successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order with given id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoicesDetailsAsync(@javax.annotation.Nonnull String id, final ApiCallback<CheckoutFormsOrderInvoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderInvoicesDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CheckoutFormsOrderInvoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderShipmentsUsingGET
     * @param id Order identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of parcel tracking numbers (shipments) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderShipmentsUsingGETCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/checkout-forms/{id}/shipments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderShipmentsUsingGETValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrderShipmentsUsingGET(Async)");
        }

        return getOrderShipmentsUsingGETCall(id, _callback);

    }

    /**
     * Get a list of parcel tracking numbers
     * Get a list of parcel tracking numbers currently assigned to the order. Orders can be retrieved using REST API resource GET /order/checkout-forms. Please note that the shipment list may contain parcel tracking numbers added through other channels such as Moje Allegro or by the carrier that delivers the parcel. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-numery-przesylek-dodane-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#retrieving-tracking-numbers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @return CheckoutFormOrderWaybillResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of parcel tracking numbers (shipments) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutFormOrderWaybillResponse getOrderShipmentsUsingGET(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<CheckoutFormOrderWaybillResponse> localVarResp = getOrderShipmentsUsingGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a list of parcel tracking numbers
     * Get a list of parcel tracking numbers currently assigned to the order. Orders can be retrieved using REST API resource GET /order/checkout-forms. Please note that the shipment list may contain parcel tracking numbers added through other channels such as Moje Allegro or by the carrier that delivers the parcel. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-numery-przesylek-dodane-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#retrieving-tracking-numbers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @return ApiResponse&lt;CheckoutFormOrderWaybillResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of parcel tracking numbers (shipments) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutFormOrderWaybillResponse> getOrderShipmentsUsingGETWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = getOrderShipmentsUsingGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CheckoutFormOrderWaybillResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of parcel tracking numbers (asynchronously)
     * Get a list of parcel tracking numbers currently assigned to the order. Orders can be retrieved using REST API resource GET /order/checkout-forms. Please note that the shipment list may contain parcel tracking numbers added through other channels such as Moje Allegro or by the carrier that delivers the parcel. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-numery-przesylek-dodane-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#retrieving-tracking-numbers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of parcel tracking numbers (shipments) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderShipmentsUsingGETAsync(@javax.annotation.Nonnull String id, final ApiCallback<CheckoutFormOrderWaybillResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderShipmentsUsingGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CheckoutFormOrderWaybillResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrdersCarriersUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available shipping carriers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersCarriersUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/carriers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersCarriersUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrdersCarriersUsingGETCall(_callback);

    }

    /**
     * Get a list of available shipping carriers
     * Shipping carriers are essential to provide accurate tracking experience for customers. Use this resource to get a list of all available shipping carriers.  The response of this resource can be stored in accordance with returned caching headers. Read more: &lt;a href&#x3D;\&quot;../../news/nowy-zasob-do-pobrania-identyfikatorow-przewoznikow-8dmljjGRGUE\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resource-to-retrieve-available-delivery-company-id-VL6zDDdr4hk\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return OrdersShippingCarriersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available shipping carriers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public OrdersShippingCarriersResponse getOrdersCarriersUsingGET() throws ApiException {
        ApiResponse<OrdersShippingCarriersResponse> localVarResp = getOrdersCarriersUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of available shipping carriers
     * Shipping carriers are essential to provide accurate tracking experience for customers. Use this resource to get a list of all available shipping carriers.  The response of this resource can be stored in accordance with returned caching headers. Read more: &lt;a href&#x3D;\&quot;../../news/nowy-zasob-do-pobrania-identyfikatorow-przewoznikow-8dmljjGRGUE\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resource-to-retrieve-available-delivery-company-id-VL6zDDdr4hk\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return ApiResponse&lt;OrdersShippingCarriersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available shipping carriers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrdersShippingCarriersResponse> getOrdersCarriersUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrdersCarriersUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrdersShippingCarriersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of available shipping carriers (asynchronously)
     * Shipping carriers are essential to provide accurate tracking experience for customers. Use this resource to get a list of all available shipping carriers.  The response of this resource can be stored in accordance with returned caching headers. Read more: &lt;a href&#x3D;\&quot;../../news/nowy-zasob-do-pobrania-identyfikatorow-przewoznikow-8dmljjGRGUE\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resource-to-retrieve-available-delivery-company-id-VL6zDDdr4hk\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available shipping carriers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersCarriersUsingGETAsync(final ApiCallback<OrdersShippingCarriersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersCarriersUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrdersShippingCarriersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrdersDetailsUsingGET
     * @param id Checkout form identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when order id is malformed UUID.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersDetailsUsingGETCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/checkout-forms/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersDetailsUsingGETValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrdersDetailsUsingGET(Async)");
        }

        return getOrdersDetailsUsingGETCall(id, _callback);

    }

    /**
     * Get an order&#39;s details
     * Use this resource to get an order details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#szczegoly-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-details\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Checkout form identifier. (required)
     * @return CheckoutForm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when order id is malformed UUID.  </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutForm getOrdersDetailsUsingGET(@javax.annotation.Nonnull UUID id) throws ApiException {
        ApiResponse<CheckoutForm> localVarResp = getOrdersDetailsUsingGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an order&#39;s details
     * Use this resource to get an order details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#szczegoly-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-details\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Checkout form identifier. (required)
     * @return ApiResponse&lt;CheckoutForm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when order id is malformed UUID.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutForm> getOrdersDetailsUsingGETWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getOrdersDetailsUsingGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CheckoutForm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an order&#39;s details (asynchronously)
     * Use this resource to get an order details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#szczegoly-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-details\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Checkout form identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - Returned when order id is malformed UUID.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersDetailsUsingGETAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<CheckoutForm> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersDetailsUsingGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CheckoutForm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParcelTrackingUsingGET
     * @param carrierId Carrier identifier. (required)
     * @param waybill Waybill number (parcel tracking number). Example: &#x60;waybill&#x3D;AAA0000E5D201&amp;waybill&#x3D;BBB00000E5D202&#x60; - returns parcel tracking history for &#x60;AAA0000E5D201&#x60; as well as for &#x60;BBB00000E5D202&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns parcel tracking history for given waybills </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. unknown carrier id, missing or too many waybills in query parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParcelTrackingUsingGETCall(@javax.annotation.Nonnull String carrierId, @javax.annotation.Nonnull List<String> waybill, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/carriers/{carrierId}/tracking"
            .replace("{" + "carrierId" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (waybill != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "waybill", waybill));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParcelTrackingUsingGETValidateBeforeCall(@javax.annotation.Nonnull String carrierId, @javax.annotation.Nonnull List<String> waybill, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling getParcelTrackingUsingGET(Async)");
        }

        // verify the required parameter 'waybill' is set
        if (waybill == null) {
            throw new ApiException("Missing the required parameter 'waybill' when calling getParcelTrackingUsingGET(Async)");
        }

        return getParcelTrackingUsingGETCall(carrierId, waybill, _callback);

    }

    /**
     * Get carrier parcel tracking history
     * Get tracking history for parcels. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-historie-statusow-przesylek\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-parcels-statuses-history\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param carrierId Carrier identifier. (required)
     * @param waybill Waybill number (parcel tracking number). Example: &#x60;waybill&#x3D;AAA0000E5D201&amp;waybill&#x3D;BBB00000E5D202&#x60; - returns parcel tracking history for &#x60;AAA0000E5D201&#x60; as well as for &#x60;BBB00000E5D202&#x60;. (required)
     * @return CarrierParcelTrackingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns parcel tracking history for given waybills </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. unknown carrier id, missing or too many waybills in query parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public CarrierParcelTrackingResponse getParcelTrackingUsingGET(@javax.annotation.Nonnull String carrierId, @javax.annotation.Nonnull List<String> waybill) throws ApiException {
        ApiResponse<CarrierParcelTrackingResponse> localVarResp = getParcelTrackingUsingGETWithHttpInfo(carrierId, waybill);
        return localVarResp.getData();
    }

    /**
     * Get carrier parcel tracking history
     * Get tracking history for parcels. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-historie-statusow-przesylek\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-parcels-statuses-history\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param carrierId Carrier identifier. (required)
     * @param waybill Waybill number (parcel tracking number). Example: &#x60;waybill&#x3D;AAA0000E5D201&amp;waybill&#x3D;BBB00000E5D202&#x60; - returns parcel tracking history for &#x60;AAA0000E5D201&#x60; as well as for &#x60;BBB00000E5D202&#x60;. (required)
     * @return ApiResponse&lt;CarrierParcelTrackingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns parcel tracking history for given waybills </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. unknown carrier id, missing or too many waybills in query parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierParcelTrackingResponse> getParcelTrackingUsingGETWithHttpInfo(@javax.annotation.Nonnull String carrierId, @javax.annotation.Nonnull List<String> waybill) throws ApiException {
        okhttp3.Call localVarCall = getParcelTrackingUsingGETValidateBeforeCall(carrierId, waybill, null);
        Type localVarReturnType = new TypeToken<CarrierParcelTrackingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get carrier parcel tracking history (asynchronously)
     * Get tracking history for parcels. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-historie-statusow-przesylek\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-parcels-statuses-history\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param carrierId Carrier identifier. (required)
     * @param waybill Waybill number (parcel tracking number). Example: &#x60;waybill&#x3D;AAA0000E5D201&amp;waybill&#x3D;BBB00000E5D202&#x60; - returns parcel tracking history for &#x60;AAA0000E5D201&#x60; as well as for &#x60;BBB00000E5D202&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns parcel tracking history for given waybills </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. unknown carrier id, missing or too many waybills in query parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, e.g. token is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParcelTrackingUsingGETAsync(@javax.annotation.Nonnull String carrierId, @javax.annotation.Nonnull List<String> waybill, final ApiCallback<CarrierParcelTrackingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParcelTrackingUsingGETValidateBeforeCall(carrierId, waybill, _callback);
        Type localVarReturnType = new TypeToken<CarrierParcelTrackingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setOrderFulfillmentUsingPUT
     * @param id Order identifier. (required)
     * @param checkoutFormFulfillment request (required)
     * @param checkoutFormRevision Checkout form revision. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Fulfillment set successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Provided revision is outdated. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. unrecognized status value or given status is not allowed to be set (e.g. &#x60;RETURNED&#x60; status). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrderFulfillmentUsingPUTCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormFulfillment checkoutFormFulfillment, @javax.annotation.Nullable String checkoutFormRevision, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkoutFormFulfillment;

        // create path and map variables
        String localVarPath = "/order/checkout-forms/{id}/fulfillment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutFormRevision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkoutForm.revision", checkoutFormRevision));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOrderFulfillmentUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormFulfillment checkoutFormFulfillment, @javax.annotation.Nullable String checkoutFormRevision, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setOrderFulfillmentUsingPUT(Async)");
        }

        // verify the required parameter 'checkoutFormFulfillment' is set
        if (checkoutFormFulfillment == null) {
            throw new ApiException("Missing the required parameter 'checkoutFormFulfillment' when calling setOrderFulfillmentUsingPUT(Async)");
        }

        return setOrderFulfillmentUsingPUTCall(id, checkoutFormFulfillment, checkoutFormRevision, _callback);

    }

    /**
     * Set seller order status
     * Use to set seller order status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#zmiana-statusu-realizacji-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-fulfillment-status-change\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkoutFormFulfillment request (required)
     * @param checkoutFormRevision Checkout form revision. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Fulfillment set successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Provided revision is outdated. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. unrecognized status value or given status is not allowed to be set (e.g. &#x60;RETURNED&#x60; status). </td><td>  -  </td></tr>
     </table>
     */
    public void setOrderFulfillmentUsingPUT(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormFulfillment checkoutFormFulfillment, @javax.annotation.Nullable String checkoutFormRevision) throws ApiException {
        setOrderFulfillmentUsingPUTWithHttpInfo(id, checkoutFormFulfillment, checkoutFormRevision);
    }

    /**
     * Set seller order status
     * Use to set seller order status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#zmiana-statusu-realizacji-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-fulfillment-status-change\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkoutFormFulfillment request (required)
     * @param checkoutFormRevision Checkout form revision. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Fulfillment set successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Provided revision is outdated. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. unrecognized status value or given status is not allowed to be set (e.g. &#x60;RETURNED&#x60; status). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setOrderFulfillmentUsingPUTWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormFulfillment checkoutFormFulfillment, @javax.annotation.Nullable String checkoutFormRevision) throws ApiException {
        okhttp3.Call localVarCall = setOrderFulfillmentUsingPUTValidateBeforeCall(id, checkoutFormFulfillment, checkoutFormRevision, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set seller order status (asynchronously)
     * Use to set seller order status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#zmiana-statusu-realizacji-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#order-fulfillment-status-change\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param checkoutFormFulfillment request (required)
     * @param checkoutFormRevision Checkout form revision. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Fulfillment set successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed, e.g. token is expired </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order not found or doesn’t belong to the seller </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Provided revision is outdated. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Some of the provided data is invalid, e.g. unrecognized status value or given status is not allowed to be set (e.g. &#x60;RETURNED&#x60; status). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrderFulfillmentUsingPUTAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CheckoutFormFulfillment checkoutFormFulfillment, @javax.annotation.Nullable String checkoutFormRevision, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOrderFulfillmentUsingPUTValidateBeforeCall(id, checkoutFormFulfillment, checkoutFormRevision, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadOrderInvoiceFile
     * @param id Order identifier. (required)
     * @param invoiceId Invoice identifier. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice file uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order or invoice with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invoice with given id already has invoice file uploaded </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The file is too large. Max file size is 3MB </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Uploaded file is empty or order&#39;s payment is rejected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadOrderInvoiceFileCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String invoiceId, @javax.annotation.Nullable File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/order/checkout-forms/{id}/invoices/{invoiceId}/file"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/pdf"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadOrderInvoiceFileValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String invoiceId, @javax.annotation.Nullable File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadOrderInvoiceFile(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling uploadOrderInvoiceFile(Async)");
        }

        return uploadOrderInvoiceFileCall(id, invoiceId, body, _callback);

    }

    /**
     * Upload invoice file
     * Use to upload invoice file to match created invoice metadata. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param invoiceId Invoice identifier. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice file uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order or invoice with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invoice with given id already has invoice file uploaded </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The file is too large. Max file size is 3MB </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Uploaded file is empty or order&#39;s payment is rejected </td><td>  -  </td></tr>
     </table>
     */
    public void uploadOrderInvoiceFile(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String invoiceId, @javax.annotation.Nullable File body) throws ApiException {
        uploadOrderInvoiceFileWithHttpInfo(id, invoiceId, body);
    }

    /**
     * Upload invoice file
     * Use to upload invoice file to match created invoice metadata. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param invoiceId Invoice identifier. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice file uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order or invoice with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invoice with given id already has invoice file uploaded </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The file is too large. Max file size is 3MB </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Uploaded file is empty or order&#39;s payment is rejected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadOrderInvoiceFileWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String invoiceId, @javax.annotation.Nullable File body) throws ApiException {
        okhttp3.Call localVarCall = uploadOrderInvoiceFileValidateBeforeCall(id, invoiceId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload invoice file (asynchronously)
     * Use to upload invoice file to match created invoice metadata. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-dodac-fakture-do-zamowienia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#add-an-invoice-to-the-order\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Order identifier. (required)
     * @param invoiceId Invoice identifier. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice file uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access this order </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Order or invoice with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invoice with given id already has invoice file uploaded </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The file is too large. Max file size is 3MB </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Uploaded file is empty or order&#39;s payment is rejected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadOrderInvoiceFileAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String invoiceId, @javax.annotation.Nullable File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadOrderInvoiceFileValidateBeforeCall(id, invoiceId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
