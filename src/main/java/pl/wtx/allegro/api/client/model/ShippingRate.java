/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.ShippingRateDeliveryMethod;
import pl.wtx.allegro.api.client.model.ShippingRateFirstItemRate;
import pl.wtx.allegro.api.client.model.ShippingRateMaxPackageWeight;
import pl.wtx.allegro.api.client.model.ShippingRateNextItemRate;
import pl.wtx.allegro.api.client.model.ShippingRateShippingTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ShippingRate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ShippingRate {
  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "deliveryMethod";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  @javax.annotation.Nonnull
  private ShippingRateDeliveryMethod deliveryMethod;

  public static final String SERIALIZED_NAME_MAX_QUANTITY_PER_PACKAGE = "maxQuantityPerPackage";
  @SerializedName(SERIALIZED_NAME_MAX_QUANTITY_PER_PACKAGE)
  @javax.annotation.Nonnull
  private Integer maxQuantityPerPackage;

  public static final String SERIALIZED_NAME_MAX_PACKAGE_WEIGHT = "maxPackageWeight";
  @SerializedName(SERIALIZED_NAME_MAX_PACKAGE_WEIGHT)
  @javax.annotation.Nullable
  private ShippingRateMaxPackageWeight maxPackageWeight;

  public static final String SERIALIZED_NAME_FIRST_ITEM_RATE = "firstItemRate";
  @SerializedName(SERIALIZED_NAME_FIRST_ITEM_RATE)
  @javax.annotation.Nonnull
  private ShippingRateFirstItemRate firstItemRate;

  public static final String SERIALIZED_NAME_NEXT_ITEM_RATE = "nextItemRate";
  @SerializedName(SERIALIZED_NAME_NEXT_ITEM_RATE)
  @javax.annotation.Nonnull
  private ShippingRateNextItemRate nextItemRate;

  public static final String SERIALIZED_NAME_SHIPPING_TIME = "shippingTime";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TIME)
  @javax.annotation.Nullable
  private ShippingRateShippingTime shippingTime;

  public ShippingRate() {
  }

  public ShippingRate deliveryMethod(@javax.annotation.Nonnull ShippingRateDeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * Get deliveryMethod
   * @return deliveryMethod
   */
  @javax.annotation.Nonnull
  public ShippingRateDeliveryMethod getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(@javax.annotation.Nonnull ShippingRateDeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public ShippingRate maxQuantityPerPackage(@javax.annotation.Nonnull Integer maxQuantityPerPackage) {
    this.maxQuantityPerPackage = maxQuantityPerPackage;
    return this;
  }

  /**
   * Maximum quantity per package for the given delivery method. Minimum value is 1.
   * minimum: 1
   * @return maxQuantityPerPackage
   */
  @javax.annotation.Nonnull
  public Integer getMaxQuantityPerPackage() {
    return maxQuantityPerPackage;
  }

  public void setMaxQuantityPerPackage(@javax.annotation.Nonnull Integer maxQuantityPerPackage) {
    this.maxQuantityPerPackage = maxQuantityPerPackage;
  }


  public ShippingRate maxPackageWeight(@javax.annotation.Nullable ShippingRateMaxPackageWeight maxPackageWeight) {
    this.maxPackageWeight = maxPackageWeight;
    return this;
  }

  /**
   * Get maxPackageWeight
   * @return maxPackageWeight
   */
  @javax.annotation.Nullable
  public ShippingRateMaxPackageWeight getMaxPackageWeight() {
    return maxPackageWeight;
  }

  public void setMaxPackageWeight(@javax.annotation.Nullable ShippingRateMaxPackageWeight maxPackageWeight) {
    this.maxPackageWeight = maxPackageWeight;
  }


  public ShippingRate firstItemRate(@javax.annotation.Nonnull ShippingRateFirstItemRate firstItemRate) {
    this.firstItemRate = firstItemRate;
    return this;
  }

  /**
   * Get firstItemRate
   * @return firstItemRate
   */
  @javax.annotation.Nonnull
  public ShippingRateFirstItemRate getFirstItemRate() {
    return firstItemRate;
  }

  public void setFirstItemRate(@javax.annotation.Nonnull ShippingRateFirstItemRate firstItemRate) {
    this.firstItemRate = firstItemRate;
  }


  public ShippingRate nextItemRate(@javax.annotation.Nonnull ShippingRateNextItemRate nextItemRate) {
    this.nextItemRate = nextItemRate;
    return this;
  }

  /**
   * Get nextItemRate
   * @return nextItemRate
   */
  @javax.annotation.Nonnull
  public ShippingRateNextItemRate getNextItemRate() {
    return nextItemRate;
  }

  public void setNextItemRate(@javax.annotation.Nonnull ShippingRateNextItemRate nextItemRate) {
    this.nextItemRate = nextItemRate;
  }


  public ShippingRate shippingTime(@javax.annotation.Nullable ShippingRateShippingTime shippingTime) {
    this.shippingTime = shippingTime;
    return this;
  }

  /**
   * Get shippingTime
   * @return shippingTime
   */
  @javax.annotation.Nullable
  public ShippingRateShippingTime getShippingTime() {
    return shippingTime;
  }

  public void setShippingTime(@javax.annotation.Nullable ShippingRateShippingTime shippingTime) {
    this.shippingTime = shippingTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingRate shippingRate = (ShippingRate) o;
    return Objects.equals(this.deliveryMethod, shippingRate.deliveryMethod) &&
        Objects.equals(this.maxQuantityPerPackage, shippingRate.maxQuantityPerPackage) &&
        Objects.equals(this.maxPackageWeight, shippingRate.maxPackageWeight) &&
        Objects.equals(this.firstItemRate, shippingRate.firstItemRate) &&
        Objects.equals(this.nextItemRate, shippingRate.nextItemRate) &&
        Objects.equals(this.shippingTime, shippingRate.shippingTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryMethod, maxQuantityPerPackage, maxPackageWeight, firstItemRate, nextItemRate, shippingTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingRate {\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    maxQuantityPerPackage: ").append(toIndentedString(maxQuantityPerPackage)).append("\n");
    sb.append("    maxPackageWeight: ").append(toIndentedString(maxPackageWeight)).append("\n");
    sb.append("    firstItemRate: ").append(toIndentedString(firstItemRate)).append("\n");
    sb.append("    nextItemRate: ").append(toIndentedString(nextItemRate)).append("\n");
    sb.append("    shippingTime: ").append(toIndentedString(shippingTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryMethod");
    openapiFields.add("maxQuantityPerPackage");
    openapiFields.add("maxPackageWeight");
    openapiFields.add("firstItemRate");
    openapiFields.add("nextItemRate");
    openapiFields.add("shippingTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deliveryMethod");
    openapiRequiredFields.add("maxQuantityPerPackage");
    openapiRequiredFields.add("firstItemRate");
    openapiRequiredFields.add("nextItemRate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingRate is not found in the empty JSON string", ShippingRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShippingRate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `deliveryMethod`
      ShippingRateDeliveryMethod.validateJsonElement(jsonObj.get("deliveryMethod"));
      // validate the optional field `maxPackageWeight`
      if (jsonObj.get("maxPackageWeight") != null && !jsonObj.get("maxPackageWeight").isJsonNull()) {
        ShippingRateMaxPackageWeight.validateJsonElement(jsonObj.get("maxPackageWeight"));
      }
      // validate the required field `firstItemRate`
      ShippingRateFirstItemRate.validateJsonElement(jsonObj.get("firstItemRate"));
      // validate the required field `nextItemRate`
      ShippingRateNextItemRate.validateJsonElement(jsonObj.get("nextItemRate"));
      // validate the optional field `shippingTime`
      if (jsonObj.get("shippingTime") != null && !jsonObj.get("shippingTime").isJsonNull()) {
        ShippingRateShippingTime.validateJsonElement(jsonObj.get("shippingTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingRate.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingRate>() {
           @Override
           public void write(JsonWriter out, ShippingRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingRate
   * @throws IOException if the JSON string is invalid with respect to ShippingRate
   */
  public static ShippingRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingRate.class);
  }

  /**
   * Convert an instance of ShippingRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

