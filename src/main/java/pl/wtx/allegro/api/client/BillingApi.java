/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.BillingEntries;
import pl.wtx.allegro.api.client.model.BillingType;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBillingEntries
     * @param marketplaceId The marketplace ID where operation was made. By default the marketplace ID where the user is registered. **Note:** Business marketplace is not a separate user&#39;s billing and defaults back to the main marketplace for given country. (optional)
     * @param occurredAtGte Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later. (optional)
     * @param occurredAtLte Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier. (optional)
     * @param typeId List of billing types by which billing entries are filtered. (optional)
     * @param offerId Offer ID by which billing entries are filtered. (optional)
     * @param orderId Order UUID by which billing entries are filtered. (optional)
     * @param limit Number of returned operations. (optional, default to 100)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing entries returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingEntriesCall(@javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> typeId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/billing-entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceId", marketplaceId));
        }

        if (occurredAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAt.gte", occurredAtGte));
        }

        if (occurredAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAt.lte", occurredAtLte));
        }

        if (typeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type.id", typeId));
        }

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offer.id", offerId));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order.id", orderId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingEntriesValidateBeforeCall(@javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> typeId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return getBillingEntriesCall(marketplaceId, occurredAtGte, occurredAtLte, typeId, offerId, orderId, limit, offset, _callback);

    }

    /**
     * Get a list of billing entries
     * The billing entries are sorted in a descending order (newest first) by date on which they occurred. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId The marketplace ID where operation was made. By default the marketplace ID where the user is registered. **Note:** Business marketplace is not a separate user&#39;s billing and defaults back to the main marketplace for given country. (optional)
     * @param occurredAtGte Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later. (optional)
     * @param occurredAtLte Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier. (optional)
     * @param typeId List of billing types by which billing entries are filtered. (optional)
     * @param offerId Offer ID by which billing entries are filtered. (optional)
     * @param orderId Order UUID by which billing entries are filtered. (optional)
     * @param limit Number of returned operations. (optional, default to 100)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @return BillingEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing entries returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public BillingEntries getBillingEntries(@javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> typeId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<BillingEntries> localVarResp = getBillingEntriesWithHttpInfo(marketplaceId, occurredAtGte, occurredAtLte, typeId, offerId, orderId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a list of billing entries
     * The billing entries are sorted in a descending order (newest first) by date on which they occurred. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId The marketplace ID where operation was made. By default the marketplace ID where the user is registered. **Note:** Business marketplace is not a separate user&#39;s billing and defaults back to the main marketplace for given country. (optional)
     * @param occurredAtGte Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later. (optional)
     * @param occurredAtLte Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier. (optional)
     * @param typeId List of billing types by which billing entries are filtered. (optional)
     * @param offerId Offer ID by which billing entries are filtered. (optional)
     * @param orderId Order UUID by which billing entries are filtered. (optional)
     * @param limit Number of returned operations. (optional, default to 100)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @return ApiResponse&lt;BillingEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing entries returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingEntries> getBillingEntriesWithHttpInfo(@javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> typeId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBillingEntriesValidateBeforeCall(marketplaceId, occurredAtGte, occurredAtLte, typeId, offerId, orderId, limit, offset, null);
        Type localVarReturnType = new TypeToken<BillingEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of billing entries (asynchronously)
     * The billing entries are sorted in a descending order (newest first) by date on which they occurred. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId The marketplace ID where operation was made. By default the marketplace ID where the user is registered. **Note:** Business marketplace is not a separate user&#39;s billing and defaults back to the main marketplace for given country. (optional)
     * @param occurredAtGte Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later. (optional)
     * @param occurredAtLte Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier. (optional)
     * @param typeId List of billing types by which billing entries are filtered. (optional)
     * @param offerId Offer ID by which billing entries are filtered. (optional)
     * @param orderId Order UUID by which billing entries are filtered. (optional)
     * @param limit Number of returned operations. (optional, default to 100)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing entries returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingEntriesAsync(@javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> typeId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<BillingEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingEntriesValidateBeforeCall(marketplaceId, occurredAtGte, occurredAtLte, typeId, offerId, orderId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<BillingEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBillingTypes
     * @param acceptLanguage Expected language of name translations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing types returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingTypesCall(@javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/billing-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingTypesValidateBeforeCall(@javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        return getBillingTypesCall(acceptLanguage, _callback);

    }

    /**
     * Get a list of billing types
     * List of all billing types. Type names are localized according to \&quot;Accept-Language\&quot; header. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param acceptLanguage Expected language of name translations. (optional)
     * @return List&lt;BillingType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing types returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<BillingType> getBillingTypes(@javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<List<BillingType>> localVarResp = getBillingTypesWithHttpInfo(acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a list of billing types
     * List of all billing types. Type names are localized according to \&quot;Accept-Language\&quot; header. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param acceptLanguage Expected language of name translations. (optional)
     * @return ApiResponse&lt;List&lt;BillingType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing types returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BillingType>> getBillingTypesWithHttpInfo(@javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getBillingTypesValidateBeforeCall(acceptLanguage, null);
        Type localVarReturnType = new TypeToken<List<BillingType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of billing types (asynchronously)
     * List of all billing types. Type names are localized according to \&quot;Accept-Language\&quot; header. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-billingowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#billing-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param acceptLanguage Expected language of name translations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of billing types returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingTypesAsync(@javax.annotation.Nullable String acceptLanguage, final ApiCallback<List<BillingType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingTypesValidateBeforeCall(acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<BillingType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
