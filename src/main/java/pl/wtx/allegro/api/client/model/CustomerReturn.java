/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.CustomerReturnBuyer;
import pl.wtx.allegro.api.client.model.CustomerReturnItem;
import pl.wtx.allegro.api.client.model.CustomerReturnRefund;
import pl.wtx.allegro.api.client.model.CustomerReturnRejection;
import pl.wtx.allegro.api.client.model.CustomerReturnReturnParcel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CustomerReturn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CustomerReturn {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_REFERENCE_NUMBER = "referenceNumber";
  @SerializedName(SERIALIZED_NAME_REFERENCE_NUMBER)
  @javax.annotation.Nullable
  private String referenceNumber;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nullable
  private String orderId;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  @javax.annotation.Nullable
  private CustomerReturnBuyer buyer;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  @javax.annotation.Nullable
  private List<CustomerReturnItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFUND = "refund";
  @SerializedName(SERIALIZED_NAME_REFUND)
  @javax.annotation.Nullable
  private CustomerReturnRefund refund;

  public static final String SERIALIZED_NAME_PARCELS = "parcels";
  @SerializedName(SERIALIZED_NAME_PARCELS)
  @javax.annotation.Nullable
  private List<CustomerReturnReturnParcel> parcels = new ArrayList<>();

  public static final String SERIALIZED_NAME_REJECTION = "rejection";
  @SerializedName(SERIALIZED_NAME_REJECTION)
  @javax.annotation.Nullable
  private CustomerReturnRejection rejection;

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  @javax.annotation.Nullable
  private String marketplaceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public CustomerReturn() {
  }

  public CustomerReturn id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public CustomerReturn createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CustomerReturn referenceNumber(@javax.annotation.Nullable String referenceNumber) {
    this.referenceNumber = referenceNumber;
    return this;
  }

  /**
   * Get referenceNumber
   * @return referenceNumber
   */
  @javax.annotation.Nullable
  public String getReferenceNumber() {
    return referenceNumber;
  }

  public void setReferenceNumber(@javax.annotation.Nullable String referenceNumber) {
    this.referenceNumber = referenceNumber;
  }


  public CustomerReturn orderId(@javax.annotation.Nullable String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nullable String orderId) {
    this.orderId = orderId;
  }


  public CustomerReturn buyer(@javax.annotation.Nullable CustomerReturnBuyer buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nullable
  public CustomerReturnBuyer getBuyer() {
    return buyer;
  }

  public void setBuyer(@javax.annotation.Nullable CustomerReturnBuyer buyer) {
    this.buyer = buyer;
  }


  public CustomerReturn items(@javax.annotation.Nullable List<CustomerReturnItem> items) {
    this.items = items;
    return this;
  }

  public CustomerReturn addItemsItem(CustomerReturnItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * List of returned items.
   * @return items
   */
  @javax.annotation.Nullable
  public List<CustomerReturnItem> getItems() {
    return items;
  }

  public void setItems(@javax.annotation.Nullable List<CustomerReturnItem> items) {
    this.items = items;
  }


  public CustomerReturn refund(@javax.annotation.Nullable CustomerReturnRefund refund) {
    this.refund = refund;
    return this;
  }

  /**
   * Get refund
   * @return refund
   */
  @javax.annotation.Nullable
  public CustomerReturnRefund getRefund() {
    return refund;
  }

  public void setRefund(@javax.annotation.Nullable CustomerReturnRefund refund) {
    this.refund = refund;
  }


  public CustomerReturn parcels(@javax.annotation.Nullable List<CustomerReturnReturnParcel> parcels) {
    this.parcels = parcels;
    return this;
  }

  public CustomerReturn addParcelsItem(CustomerReturnReturnParcel parcelsItem) {
    if (this.parcels == null) {
      this.parcels = new ArrayList<>();
    }
    this.parcels.add(parcelsItem);
    return this;
  }

  /**
   * List of returned parcels.
   * @return parcels
   */
  @javax.annotation.Nullable
  public List<CustomerReturnReturnParcel> getParcels() {
    return parcels;
  }

  public void setParcels(@javax.annotation.Nullable List<CustomerReturnReturnParcel> parcels) {
    this.parcels = parcels;
  }


  public CustomerReturn rejection(@javax.annotation.Nullable CustomerReturnRejection rejection) {
    this.rejection = rejection;
    return this;
  }

  /**
   * Get rejection
   * @return rejection
   */
  @javax.annotation.Nullable
  public CustomerReturnRejection getRejection() {
    return rejection;
  }

  public void setRejection(@javax.annotation.Nullable CustomerReturnRejection rejection) {
    this.rejection = rejection;
  }


  public CustomerReturn marketplaceId(@javax.annotation.Nullable String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The marketplace ID where operation was made.
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(@javax.annotation.Nullable String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public CustomerReturn status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Current return timeline statuses. The allowed values are:   * CREATED - The return has been declared,   * DISPATCHED - The returned items have been dispatched,   * IN_TRANSIT - The returned items are in transit,   * DELIVERED - The returned items have been delivered,   * FINISHED - The payment has been refunded, return process is finished,   * FINISHED_APT - The payment has been refunded by Allegro Protect, return process is finished,   * REJECTED - The return has been rejected,   * COMMISSION_REFUND_CLAIMED - The sales commission refund (transaction rebate) application has been claimed,   * COMMISSION_REFUNDED - The sales commission was refunded,   * WAREHOUSE_DELIVERED - The returned items have been delivered to Allegro Warehouse,   * WAREHOUSE_VERIFICATION - The returned items are under verification.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerReturn customerReturn = (CustomerReturn) o;
    return Objects.equals(this.id, customerReturn.id) &&
        Objects.equals(this.createdAt, customerReturn.createdAt) &&
        Objects.equals(this.referenceNumber, customerReturn.referenceNumber) &&
        Objects.equals(this.orderId, customerReturn.orderId) &&
        Objects.equals(this.buyer, customerReturn.buyer) &&
        Objects.equals(this.items, customerReturn.items) &&
        Objects.equals(this.refund, customerReturn.refund) &&
        Objects.equals(this.parcels, customerReturn.parcels) &&
        Objects.equals(this.rejection, customerReturn.rejection) &&
        Objects.equals(this.marketplaceId, customerReturn.marketplaceId) &&
        Objects.equals(this.status, customerReturn.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, referenceNumber, orderId, buyer, items, refund, parcels, rejection, marketplaceId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerReturn {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    refund: ").append(toIndentedString(refund)).append("\n");
    sb.append("    parcels: ").append(toIndentedString(parcels)).append("\n");
    sb.append("    rejection: ").append(toIndentedString(rejection)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("createdAt");
    openapiFields.add("referenceNumber");
    openapiFields.add("orderId");
    openapiFields.add("buyer");
    openapiFields.add("items");
    openapiFields.add("refund");
    openapiFields.add("parcels");
    openapiFields.add("rejection");
    openapiFields.add("marketplaceId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerReturn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerReturn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerReturn is not found in the empty JSON string", CustomerReturn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerReturn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerReturn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("referenceNumber") != null && !jsonObj.get("referenceNumber").isJsonNull()) && !jsonObj.get("referenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceNumber").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      // validate the optional field `buyer`
      if (jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) {
        CustomerReturnBuyer.validateJsonElement(jsonObj.get("buyer"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            CustomerReturnItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      // validate the optional field `refund`
      if (jsonObj.get("refund") != null && !jsonObj.get("refund").isJsonNull()) {
        CustomerReturnRefund.validateJsonElement(jsonObj.get("refund"));
      }
      if (jsonObj.get("parcels") != null && !jsonObj.get("parcels").isJsonNull()) {
        JsonArray jsonArrayparcels = jsonObj.getAsJsonArray("parcels");
        if (jsonArrayparcels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parcels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parcels` to be an array in the JSON string but got `%s`", jsonObj.get("parcels").toString()));
          }

          // validate the optional field `parcels` (array)
          for (int i = 0; i < jsonArrayparcels.size(); i++) {
            CustomerReturnReturnParcel.validateJsonElement(jsonArrayparcels.get(i));
          };
        }
      }
      // validate the optional field `rejection`
      if (jsonObj.get("rejection") != null && !jsonObj.get("rejection").isJsonNull()) {
        CustomerReturnRejection.validateJsonElement(jsonObj.get("rejection"));
      }
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerReturn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerReturn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerReturn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerReturn.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerReturn>() {
           @Override
           public void write(JsonWriter out, CustomerReturn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerReturn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerReturn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerReturn
   * @throws IOException if the JSON string is invalid with respect to CustomerReturn
   */
  public static CustomerReturn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerReturn.class);
  }

  /**
   * Convert an instance of CustomerReturn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

