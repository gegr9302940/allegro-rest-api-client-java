/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.ClassifiedPackageConfig;
import pl.wtx.allegro.api.client.model.ClassifiedPackageConfigs;
import pl.wtx.allegro.api.client.model.ClassifiedPackages;
import pl.wtx.allegro.api.client.model.ClassifiedResponse;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.OfferStatsResponseDto;
import java.time.OffsetDateTime;
import pl.wtx.allegro.api.client.model.SellerOfferStatsResponseDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClassifiedsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClassifiedsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClassifiedsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignClassifiedPackagesUsingPUT
     * @param offerId The offer ID. (required)
     * @param classifiedPackages Packages that should be assigned to the classified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages have been successfully assigned to the classified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignClassifiedPackagesUsingPUTCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull ClassifiedPackages classifiedPackages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classifiedPackages;

        // create path and map variables
        String localVarPath = "/sale/offer-classifieds-packages/{offerId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignClassifiedPackagesUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull ClassifiedPackages classifiedPackages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling assignClassifiedPackagesUsingPUT(Async)");
        }

        // verify the required parameter 'classifiedPackages' is set
        if (classifiedPackages == null) {
            throw new ApiException("Missing the required parameter 'classifiedPackages' when calling assignClassifiedPackagesUsingPUT(Async)");
        }

        return assignClassifiedPackagesUsingPUTCall(offerId, classifiedPackages, _callback);

    }

    /**
     * Assign packages to a classified
     * Use this resource to assign classified packages to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId The offer ID. (required)
     * @param classifiedPackages Packages that should be assigned to the classified. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages have been successfully assigned to the classified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public void assignClassifiedPackagesUsingPUT(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull ClassifiedPackages classifiedPackages) throws ApiException {
        assignClassifiedPackagesUsingPUTWithHttpInfo(offerId, classifiedPackages);
    }

    /**
     * Assign packages to a classified
     * Use this resource to assign classified packages to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId The offer ID. (required)
     * @param classifiedPackages Packages that should be assigned to the classified. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages have been successfully assigned to the classified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assignClassifiedPackagesUsingPUTWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull ClassifiedPackages classifiedPackages) throws ApiException {
        okhttp3.Call localVarCall = assignClassifiedPackagesUsingPUTValidateBeforeCall(offerId, classifiedPackages, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign packages to a classified (asynchronously)
     * Use this resource to assign classified packages to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId The offer ID. (required)
     * @param classifiedPackages Packages that should be assigned to the classified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages have been successfully assigned to the classified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignClassifiedPackagesUsingPUTAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull ClassifiedPackages classifiedPackages, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignClassifiedPackagesUsingPUTValidateBeforeCall(offerId, classifiedPackages, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifiedOffersStatsGET
     * @param offerId List of offer Ids, maximum 50 values. (required)
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifiedOffersStatsGETCall(@javax.annotation.Nonnull List<String> offerId, @javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/classified-offers-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "offer.id", offerId));
        }

        if (dateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date.gte", dateGte));
        }

        if (dateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date.lte", dateLte));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifiedOffersStatsGETValidateBeforeCall(@javax.annotation.Nonnull List<String> offerId, @javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling classifiedOffersStatsGET(Async)");
        }

        return classifiedOffersStatsGETCall(offerId, dateGte, dateLte, _callback);

    }

    /**
     * Get the advertisements daily statistics
     * This endpoint returns daily statistics collected for a list of advertisements in a given date range. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wybranych-ogloszen\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-selected-classified-ads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer Ids, maximum 50 values. (required)
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @return OfferStatsResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public OfferStatsResponseDto classifiedOffersStatsGET(@javax.annotation.Nonnull List<String> offerId, @javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte) throws ApiException {
        ApiResponse<OfferStatsResponseDto> localVarResp = classifiedOffersStatsGETWithHttpInfo(offerId, dateGte, dateLte);
        return localVarResp.getData();
    }

    /**
     * Get the advertisements daily statistics
     * This endpoint returns daily statistics collected for a list of advertisements in a given date range. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wybranych-ogloszen\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-selected-classified-ads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer Ids, maximum 50 values. (required)
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @return ApiResponse&lt;OfferStatsResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferStatsResponseDto> classifiedOffersStatsGETWithHttpInfo(@javax.annotation.Nonnull List<String> offerId, @javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte) throws ApiException {
        okhttp3.Call localVarCall = classifiedOffersStatsGETValidateBeforeCall(offerId, dateGte, dateLte, null);
        Type localVarReturnType = new TypeToken<OfferStatsResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the advertisements daily statistics (asynchronously)
     * This endpoint returns daily statistics collected for a list of advertisements in a given date range. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wybranych-ogloszen\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-selected-classified-ads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer Ids, maximum 50 values. (required)
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifiedOffersStatsGETAsync(@javax.annotation.Nonnull List<String> offerId, @javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte, final ApiCallback<OfferStatsResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifiedOffersStatsGETValidateBeforeCall(offerId, dateGte, dateLte, _callback);
        Type localVarReturnType = new TypeToken<OfferStatsResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifiedSellerOfferStatsGET
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifiedSellerOfferStatsGETCall(@javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/classified-seller-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date.gte", dateGte));
        }

        if (dateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date.lte", dateLte));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifiedSellerOfferStatsGETValidateBeforeCall(@javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte, final ApiCallback _callback) throws ApiException {
        return classifiedSellerOfferStatsGETCall(dateGte, dateLte, _callback);

    }

    /**
     * Get the seller&#39;s advertisements daily statistics
     * This endpoint returns daily statistics collected for a list of advertisements in a given date range for logged user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wszystkich-ogloszen-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-seller-s-classified-ads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @return SellerOfferStatsResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public SellerOfferStatsResponseDto classifiedSellerOfferStatsGET(@javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte) throws ApiException {
        ApiResponse<SellerOfferStatsResponseDto> localVarResp = classifiedSellerOfferStatsGETWithHttpInfo(dateGte, dateLte);
        return localVarResp.getData();
    }

    /**
     * Get the seller&#39;s advertisements daily statistics
     * This endpoint returns daily statistics collected for a list of advertisements in a given date range for logged user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wszystkich-ogloszen-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-seller-s-classified-ads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @return ApiResponse&lt;SellerOfferStatsResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerOfferStatsResponseDto> classifiedSellerOfferStatsGETWithHttpInfo(@javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte) throws ApiException {
        okhttp3.Call localVarCall = classifiedSellerOfferStatsGETValidateBeforeCall(dateGte, dateLte, null);
        Type localVarReturnType = new TypeToken<SellerOfferStatsResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the seller&#39;s advertisements daily statistics (asynchronously)
     * This endpoint returns daily statistics collected for a list of advertisements in a given date range for logged user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#statystyki-wszystkich-ogloszen-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#statistics-of-seller-s-classified-ads\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param dateGte The maximum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param dateLte The minimum date and time from which the events will be fetched in ISO 8601 format. The value should be less than the current date time and greater than date.lte. The difference between date.gte and date.lte should be less than 3 months. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns offer&#39;s statistics list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifiedSellerOfferStatsGETAsync(@javax.annotation.Nullable OffsetDateTime dateGte, @javax.annotation.Nullable OffsetDateTime dateLte, final ApiCallback<SellerOfferStatsResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifiedSellerOfferStatsGETValidateBeforeCall(dateGte, dateLte, _callback);
        Type localVarReturnType = new TypeToken<SellerOfferStatsResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassifiedPackageConfigurationUsingGET
     * @param packageId The classifieds package ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The package&#39;s configuration returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The classifieds package not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassifiedPackageConfigurationUsingGETCall(@javax.annotation.Nonnull String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/classifieds-packages/{packageId}"
            .replace("{" + "packageId" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassifiedPackageConfigurationUsingGETValidateBeforeCall(@javax.annotation.Nonnull String packageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getClassifiedPackageConfigurationUsingGET(Async)");
        }

        return getClassifiedPackageConfigurationUsingGETCall(packageId, _callback);

    }

    /**
     * Get the configuration of a package
     * Use this resource to retrieve the configuration of a classifieds package. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param packageId The classifieds package ID. (required)
     * @return ClassifiedPackageConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The package&#39;s configuration returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The classifieds package not found. </td><td>  -  </td></tr>
     </table>
     */
    public ClassifiedPackageConfig getClassifiedPackageConfigurationUsingGET(@javax.annotation.Nonnull String packageId) throws ApiException {
        ApiResponse<ClassifiedPackageConfig> localVarResp = getClassifiedPackageConfigurationUsingGETWithHttpInfo(packageId);
        return localVarResp.getData();
    }

    /**
     * Get the configuration of a package
     * Use this resource to retrieve the configuration of a classifieds package. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param packageId The classifieds package ID. (required)
     * @return ApiResponse&lt;ClassifiedPackageConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The package&#39;s configuration returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The classifieds package not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassifiedPackageConfig> getClassifiedPackageConfigurationUsingGETWithHttpInfo(@javax.annotation.Nonnull String packageId) throws ApiException {
        okhttp3.Call localVarCall = getClassifiedPackageConfigurationUsingGETValidateBeforeCall(packageId, null);
        Type localVarReturnType = new TypeToken<ClassifiedPackageConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the configuration of a package (asynchronously)
     * Use this resource to retrieve the configuration of a classifieds package. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param packageId The classifieds package ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The package&#39;s configuration returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The classifieds package not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassifiedPackageConfigurationUsingGETAsync(@javax.annotation.Nonnull String packageId, final ApiCallback<ClassifiedPackageConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassifiedPackageConfigurationUsingGETValidateBeforeCall(packageId, _callback);
        Type localVarReturnType = new TypeToken<ClassifiedPackageConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassifiedPackageConfigurationsForCategoryUsingGET
     * @param categoryId The category ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package configurations for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassifiedPackageConfigurationsForCategoryUsingGETCall(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/classifieds-packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category.id", categoryId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassifiedPackageConfigurationsForCategoryUsingGETValidateBeforeCall(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getClassifiedPackageConfigurationsForCategoryUsingGET(Async)");
        }

        return getClassifiedPackageConfigurationsForCategoryUsingGETCall(categoryId, _callback);

    }

    /**
     * Get configurations of packages
     * Use this resource to retrieve configurations of classifieds packages for a category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return ClassifiedPackageConfigs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package configurations for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ClassifiedPackageConfigs getClassifiedPackageConfigurationsForCategoryUsingGET(@javax.annotation.Nonnull String categoryId) throws ApiException {
        ApiResponse<ClassifiedPackageConfigs> localVarResp = getClassifiedPackageConfigurationsForCategoryUsingGETWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * Get configurations of packages
     * Use this resource to retrieve configurations of classifieds packages for a category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return ApiResponse&lt;ClassifiedPackageConfigs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package configurations for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassifiedPackageConfigs> getClassifiedPackageConfigurationsForCategoryUsingGETWithHttpInfo(@javax.annotation.Nonnull String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getClassifiedPackageConfigurationsForCategoryUsingGETValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<ClassifiedPackageConfigs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get configurations of packages (asynchronously)
     * Use this resource to retrieve configurations of classifieds packages for a category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#lista-pakietow-i-opcji-dodatkowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#list-of-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package configurations for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassifiedPackageConfigurationsForCategoryUsingGETAsync(@javax.annotation.Nonnull String categoryId, final ApiCallback<ClassifiedPackageConfigs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassifiedPackageConfigurationsForCategoryUsingGETValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<ClassifiedPackageConfigs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassifiedPackagesUsingGET
     * @param offerId Offer ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassifiedPackagesUsingGETCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-classifieds-packages/{offerId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassifiedPackagesUsingGETValidateBeforeCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getClassifiedPackagesUsingGET(Async)");
        }

        return getClassifiedPackagesUsingGETCall(offerId, _callback);

    }

    /**
     * Get classified packages assigned to an offer
     * Use this resource to retrieve classified packages currently assigned to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (required)
     * @return ClassifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
     </table>
     */
    public ClassifiedResponse getClassifiedPackagesUsingGET(@javax.annotation.Nonnull String offerId) throws ApiException {
        ApiResponse<ClassifiedResponse> localVarResp = getClassifiedPackagesUsingGETWithHttpInfo(offerId);
        return localVarResp.getData();
    }

    /**
     * Get classified packages assigned to an offer
     * Use this resource to retrieve classified packages currently assigned to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (required)
     * @return ApiResponse&lt;ClassifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassifiedResponse> getClassifiedPackagesUsingGETWithHttpInfo(@javax.annotation.Nonnull String offerId) throws ApiException {
        okhttp3.Call localVarCall = getClassifiedPackagesUsingGETValidateBeforeCall(offerId, null);
        Type localVarReturnType = new TypeToken<ClassifiedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get classified packages assigned to an offer (asynchronously)
     * Use this resource to retrieve classified packages currently assigned to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wystawic-i-zarzadzac-ogloszeniem-K6r3Z47dKcy#dodatkowe-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/listing-and-managing-classified-ads-5Ln0r6wkWs7#additional-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Classified not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassifiedPackagesUsingGETAsync(@javax.annotation.Nonnull String offerId, final ApiCallback<ClassifiedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassifiedPackagesUsingGETValidateBeforeCall(offerId, _callback);
        Type localVarReturnType = new TypeToken<ClassifiedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
