/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.CategoryProductParameterList;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.GetSaleProductsResponse;
import pl.wtx.allegro.api.client.model.ProductChangeProposalDto;
import pl.wtx.allegro.api.client.model.ProductChangeProposalRequest;
import pl.wtx.allegro.api.client.model.ProductProposalsRequest;
import pl.wtx.allegro.api.client.model.ProductProposalsResponse;
import pl.wtx.allegro.api.client.model.SaleProductDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFlatProductParametersUsingGET
     * @param categoryId The category ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of product parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlatProductParametersUsingGETCall(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/categories/{categoryId}/product-parameters"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlatProductParametersUsingGETValidateBeforeCall(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getFlatProductParametersUsingGET(Async)");
        }

        return getFlatProductParametersUsingGETCall(categoryId, _callback);

    }

    /**
     * Get product parameters available in given category
     * Use this resource to get the list of product parameters available in given category. You can use these parameters to create a new product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return CategoryProductParameterList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of product parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryProductParameterList getFlatProductParametersUsingGET(@javax.annotation.Nonnull String categoryId) throws ApiException {
        ApiResponse<CategoryProductParameterList> localVarResp = getFlatProductParametersUsingGETWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * Get product parameters available in given category
     * Use this resource to get the list of product parameters available in given category. You can use these parameters to create a new product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return ApiResponse&lt;CategoryProductParameterList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of product parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryProductParameterList> getFlatProductParametersUsingGETWithHttpInfo(@javax.annotation.Nonnull String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getFlatProductParametersUsingGETValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryProductParameterList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product parameters available in given category (asynchronously)
     * Use this resource to get the list of product parameters available in given category. You can use these parameters to create a new product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of product parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlatProductParametersUsingGETAsync(@javax.annotation.Nonnull String categoryId, final ApiCallback<CategoryProductParameterList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlatProductParametersUsingGETValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryProductParameterList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductChangeProposal
     * @param changeProposalId The product changes proposal identifier. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product changes proposal returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access change proposal that not belong to you </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductChangeProposalCall(@javax.annotation.Nonnull String changeProposalId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/products/change-proposals/{changeProposalId}"
            .replace("{" + "changeProposalId" + "}", localVarApiClient.escapeString(changeProposalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductChangeProposalValidateBeforeCall(@javax.annotation.Nonnull String changeProposalId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeProposalId' is set
        if (changeProposalId == null) {
            throw new ApiException("Missing the required parameter 'changeProposalId' when calling getProductChangeProposal(Async)");
        }

        return getProductChangeProposalCall(changeProposalId, acceptLanguage, _callback);

    }

    /**
     * Get all data of the particular product changes proposal
     * Use this resource to retrieve all data of the particular product changes proposal. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param changeProposalId The product changes proposal identifier. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ProductChangeProposalDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product changes proposal returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access change proposal that not belong to you </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public ProductChangeProposalDto getProductChangeProposal(@javax.annotation.Nonnull String changeProposalId, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<ProductChangeProposalDto> localVarResp = getProductChangeProposalWithHttpInfo(changeProposalId, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all data of the particular product changes proposal
     * Use this resource to retrieve all data of the particular product changes proposal. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param changeProposalId The product changes proposal identifier. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ApiResponse&lt;ProductChangeProposalDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product changes proposal returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access change proposal that not belong to you </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductChangeProposalDto> getProductChangeProposalWithHttpInfo(@javax.annotation.Nonnull String changeProposalId, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getProductChangeProposalValidateBeforeCall(changeProposalId, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ProductChangeProposalDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all data of the particular product changes proposal (asynchronously)
     * Use this resource to retrieve all data of the particular product changes proposal. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param changeProposalId The product changes proposal identifier. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product changes proposal returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have permission to access change proposal that not belong to you </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductChangeProposalAsync(@javax.annotation.Nonnull String changeProposalId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<ProductChangeProposalDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductChangeProposalValidateBeforeCall(changeProposalId, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ProductChangeProposalDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSaleProduct
     * @param productId The product identifier. (required)
     * @param categoryId The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param includeDrafts Return also if product is in draft state. (optional)
     * @param language The language version of product. You can indicate the language for the returned product data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A product&#39;s not found or language version of the product is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleProductCall(@javax.annotation.Nonnull String productId, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean includeDrafts, @javax.annotation.Nullable String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/products/{productId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category.id", categoryId));
        }

        if (includeDrafts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDrafts", includeDrafts));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSaleProductValidateBeforeCall(@javax.annotation.Nonnull String productId, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean includeDrafts, @javax.annotation.Nullable String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getSaleProduct(Async)");
        }

        return getSaleProductCall(productId, categoryId, includeDrafts, language, _callback);

    }

    /**
     * Get all data of the particular product
     * Use this resource to retrieve all data of the particular product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-pobrac-pelne-dane-o-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-retrieve-product-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited with &lt;a href&#x3D;\&quot;../../tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Leaky Bucket&lt;/a&gt; mechanism.
     * @param productId The product identifier. (required)
     * @param categoryId The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param includeDrafts Return also if product is in draft state. (optional)
     * @param language The language version of product. You can indicate the language for the returned product data. (optional)
     * @return SaleProductDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A product&#39;s not found or language version of the product is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public SaleProductDto getSaleProduct(@javax.annotation.Nonnull String productId, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean includeDrafts, @javax.annotation.Nullable String language) throws ApiException {
        ApiResponse<SaleProductDto> localVarResp = getSaleProductWithHttpInfo(productId, categoryId, includeDrafts, language);
        return localVarResp.getData();
    }

    /**
     * Get all data of the particular product
     * Use this resource to retrieve all data of the particular product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-pobrac-pelne-dane-o-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-retrieve-product-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited with &lt;a href&#x3D;\&quot;../../tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Leaky Bucket&lt;/a&gt; mechanism.
     * @param productId The product identifier. (required)
     * @param categoryId The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param includeDrafts Return also if product is in draft state. (optional)
     * @param language The language version of product. You can indicate the language for the returned product data. (optional)
     * @return ApiResponse&lt;SaleProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A product&#39;s not found or language version of the product is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaleProductDto> getSaleProductWithHttpInfo(@javax.annotation.Nonnull String productId, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean includeDrafts, @javax.annotation.Nullable String language) throws ApiException {
        okhttp3.Call localVarCall = getSaleProductValidateBeforeCall(productId, categoryId, includeDrafts, language, null);
        Type localVarReturnType = new TypeToken<SaleProductDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all data of the particular product (asynchronously)
     * Use this resource to retrieve all data of the particular product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-pobrac-pelne-dane-o-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-retrieve-product-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited with &lt;a href&#x3D;\&quot;../../tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Leaky Bucket&lt;/a&gt; mechanism.
     * @param productId The product identifier. (required)
     * @param categoryId The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param includeDrafts Return also if product is in draft state. (optional)
     * @param language The language version of product. You can indicate the language for the returned product data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A product&#39;s not found or language version of the product is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleProductAsync(@javax.annotation.Nonnull String productId, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean includeDrafts, @javax.annotation.Nullable String language, final ApiCallback<SaleProductDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSaleProductValidateBeforeCall(productId, categoryId, includeDrafts, language, _callback);
        Type localVarReturnType = new TypeToken<SaleProductDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSaleProducts
     * @param ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param phrase Search phrase. (optional)
     * @param mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param language Language indicates the language for searching products. Allows to specify the language of the given phrase. (optional)
     * @param categoryId The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;127448_2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;127448_1\&quot;       }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;127448_2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;127448_1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param pageId A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param searchFeatures Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param includeDrafts Include products in draft state. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleProductsCall(@javax.annotation.Nullable String ean, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String mode, @javax.annotation.Nullable String language, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Map<String, String> dynamicFilters, @javax.annotation.Nullable String pageId, @javax.annotation.Nullable String searchFeatures, @javax.annotation.Nullable Boolean includeDrafts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ean != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ean", ean));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category.id", categoryId));
        }

        if (dynamicFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Dynamic filters", dynamicFilters));
        }

        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page.id", pageId));
        }

        if (searchFeatures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFeatures", searchFeatures));
        }

        if (includeDrafts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDrafts", includeDrafts));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSaleProductsValidateBeforeCall(@javax.annotation.Nullable String ean, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String mode, @javax.annotation.Nullable String language, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Map<String, String> dynamicFilters, @javax.annotation.Nullable String pageId, @javax.annotation.Nullable String searchFeatures, @javax.annotation.Nullable Boolean includeDrafts, final ApiCallback _callback) throws ApiException {
        return getSaleProductsCall(ean, phrase, mode, language, categoryId, dynamicFilters, pageId, searchFeatures, includeDrafts, _callback);

    }

    /**
     * Get search products results
     * Use this resource to get a list of products according to provided parameters. At least ean or phrase parameter is required. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-znalezc-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-find-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited with Leaky Bucket mechanism, read more &lt;a href&#x3D;\&quot;../../tutorials/informacje-podstawowe-b21569boAI1#ograniczenie-liczby-zapytan-limity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param phrase Search phrase. (optional)
     * @param mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param language Language indicates the language for searching products. Allows to specify the language of the given phrase. (optional)
     * @param categoryId The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;127448_2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;127448_1\&quot;       }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;127448_2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;127448_1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param pageId A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param searchFeatures Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param includeDrafts Include products in draft state. (optional)
     * @return GetSaleProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public GetSaleProductsResponse getSaleProducts(@javax.annotation.Nullable String ean, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String mode, @javax.annotation.Nullable String language, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Map<String, String> dynamicFilters, @javax.annotation.Nullable String pageId, @javax.annotation.Nullable String searchFeatures, @javax.annotation.Nullable Boolean includeDrafts) throws ApiException {
        ApiResponse<GetSaleProductsResponse> localVarResp = getSaleProductsWithHttpInfo(ean, phrase, mode, language, categoryId, dynamicFilters, pageId, searchFeatures, includeDrafts);
        return localVarResp.getData();
    }

    /**
     * Get search products results
     * Use this resource to get a list of products according to provided parameters. At least ean or phrase parameter is required. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-znalezc-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-find-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited with Leaky Bucket mechanism, read more &lt;a href&#x3D;\&quot;../../tutorials/informacje-podstawowe-b21569boAI1#ograniczenie-liczby-zapytan-limity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param phrase Search phrase. (optional)
     * @param mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param language Language indicates the language for searching products. Allows to specify the language of the given phrase. (optional)
     * @param categoryId The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;127448_2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;127448_1\&quot;       }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;127448_2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;127448_1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param pageId A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param searchFeatures Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param includeDrafts Include products in draft state. (optional)
     * @return ApiResponse&lt;GetSaleProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSaleProductsResponse> getSaleProductsWithHttpInfo(@javax.annotation.Nullable String ean, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String mode, @javax.annotation.Nullable String language, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Map<String, String> dynamicFilters, @javax.annotation.Nullable String pageId, @javax.annotation.Nullable String searchFeatures, @javax.annotation.Nullable Boolean includeDrafts) throws ApiException {
        okhttp3.Call localVarCall = getSaleProductsValidateBeforeCall(ean, phrase, mode, language, categoryId, dynamicFilters, pageId, searchFeatures, includeDrafts, null);
        Type localVarReturnType = new TypeToken<GetSaleProductsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get search products results (asynchronously)
     * Use this resource to get a list of products according to provided parameters. At least ean or phrase parameter is required. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-znalezc-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-find-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited with Leaky Bucket mechanism, read more &lt;a href&#x3D;\&quot;../../tutorials/informacje-podstawowe-b21569boAI1#ograniczenie-liczby-zapytan-limity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/basic-information-VL6YelvVKTn#limiting-the-number-of-queries-limits\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param phrase Search phrase. (optional)
     * @param mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param language Language indicates the language for searching products. Allows to specify the language of the given phrase. (optional)
     * @param categoryId The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;127448_2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;127448_1\&quot;       }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;127448_2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;127448_1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param pageId A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param searchFeatures Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param includeDrafts Include products in draft state. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleProductsAsync(@javax.annotation.Nullable String ean, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String mode, @javax.annotation.Nullable String language, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Map<String, String> dynamicFilters, @javax.annotation.Nullable String pageId, @javax.annotation.Nullable String searchFeatures, @javax.annotation.Nullable Boolean includeDrafts, final ApiCallback<GetSaleProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSaleProductsValidateBeforeCall(ean, phrase, mode, language, categoryId, dynamicFilters, pageId, searchFeatures, includeDrafts, _callback);
        Type localVarReturnType = new TypeToken<GetSaleProductsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productChangeProposal
     * @param productId The product identifier. (required)
     * @param productChangeProposalRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product changes proposed successfully. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product with the given Id not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChangeProposalCall(@javax.annotation.Nonnull String productId, @javax.annotation.Nonnull ProductChangeProposalRequest productChangeProposalRequest, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productChangeProposalRequest;

        // create path and map variables
        String localVarPath = "/sale/products/{productId}/change-proposals"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productChangeProposalValidateBeforeCall(@javax.annotation.Nonnull String productId, @javax.annotation.Nonnull ProductChangeProposalRequest productChangeProposalRequest, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productChangeProposal(Async)");
        }

        // verify the required parameter 'productChangeProposalRequest' is set
        if (productChangeProposalRequest == null) {
            throw new ApiException("Missing the required parameter 'productChangeProposalRequest' when calling productChangeProposal(Async)");
        }

        return productChangeProposalCall(productId, productChangeProposalRequest, acceptLanguage, _callback);

    }

    /**
     * Propose changes in product
     * Use this resource to propose changes in product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited to 100 suggestions per day for a single user.
     * @param productId The product identifier. (required)
     * @param productChangeProposalRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ProductChangeProposalDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product changes proposed successfully. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product with the given Id not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public ProductChangeProposalDto productChangeProposal(@javax.annotation.Nonnull String productId, @javax.annotation.Nonnull ProductChangeProposalRequest productChangeProposalRequest, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<ProductChangeProposalDto> localVarResp = productChangeProposalWithHttpInfo(productId, productChangeProposalRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Propose changes in product
     * Use this resource to propose changes in product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited to 100 suggestions per day for a single user.
     * @param productId The product identifier. (required)
     * @param productChangeProposalRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ApiResponse&lt;ProductChangeProposalDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product changes proposed successfully. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product with the given Id not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductChangeProposalDto> productChangeProposalWithHttpInfo(@javax.annotation.Nonnull String productId, @javax.annotation.Nonnull ProductChangeProposalRequest productChangeProposalRequest, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = productChangeProposalValidateBeforeCall(productId, productChangeProposalRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ProductChangeProposalDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Propose changes in product (asynchronously)
     * Use this resource to propose changes in product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-zglosic-blad-w-produkcie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-report-incorrect-data-in-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited to 100 suggestions per day for a single user.
     * @param productId The product identifier. (required)
     * @param productChangeProposalRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product changes proposed successfully. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product with the given Id not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChangeProposalAsync(@javax.annotation.Nonnull String productId, @javax.annotation.Nonnull ProductChangeProposalRequest productChangeProposalRequest, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<ProductChangeProposalDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = productChangeProposalValidateBeforeCall(productId, productChangeProposalRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ProductChangeProposalDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposeSaleProduct
     * @param productProposalsRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product proposed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Product already exists. Url of the existing product is provided in the HTTP Location header field of the response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposeSaleProductCall(@javax.annotation.Nonnull ProductProposalsRequest productProposalsRequest, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productProposalsRequest;

        // create path and map variables
        String localVarPath = "/sale/product-proposals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposeSaleProductValidateBeforeCall(@javax.annotation.Nonnull ProductProposalsRequest productProposalsRequest, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productProposalsRequest' is set
        if (productProposalsRequest == null) {
            throw new ApiException("Missing the required parameter 'productProposalsRequest' when calling proposeSaleProduct(Async)");
        }

        return proposeSaleProductCall(productProposalsRequest, acceptLanguage, _callback);

    }

    /**
     * Propose a product
     * Use this resource to propose a product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param productProposalsRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ProductProposalsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product proposed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Product already exists. Url of the existing product is provided in the HTTP Location header field of the response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ProductProposalsResponse proposeSaleProduct(@javax.annotation.Nonnull ProductProposalsRequest productProposalsRequest, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<ProductProposalsResponse> localVarResp = proposeSaleProductWithHttpInfo(productProposalsRequest, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Propose a product
     * Use this resource to propose a product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param productProposalsRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ApiResponse&lt;ProductProposalsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product proposed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Product already exists. Url of the existing product is provided in the HTTP Location header field of the response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductProposalsResponse> proposeSaleProductWithHttpInfo(@javax.annotation.Nonnull ProductProposalsRequest productProposalsRequest, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = proposeSaleProductValidateBeforeCall(productProposalsRequest, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ProductProposalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Propose a product (asynchronously)
     * Use this resource to propose a product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param productProposalsRequest  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product proposed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Product already exists. Url of the existing product is provided in the HTTP Location header field of the response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposeSaleProductAsync(@javax.annotation.Nonnull ProductProposalsRequest productProposalsRequest, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<ProductProposalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposeSaleProductValidateBeforeCall(productProposalsRequest, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ProductProposalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
