/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.ImageUrl;
import pl.wtx.allegro.api.client.model.ProductCategory;
import pl.wtx.allegro.api.client.model.ProductParameter;
import pl.wtx.allegro.api.client.model.StandardizedDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ProductProposalsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ProductProposalsRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nonnull
  private ProductCategory category;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  @javax.annotation.Nonnull
  private List<ImageUrl> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nonnull
  private List<ProductParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private StandardizedDescription description;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nonnull
  private String language;

  public ProductProposalsRequest() {
  }

  public ProductProposalsRequest name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Suggested product name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ProductProposalsRequest category(@javax.annotation.Nonnull ProductCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public ProductCategory getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nonnull ProductCategory category) {
    this.category = category;
  }


  public ProductProposalsRequest images(@javax.annotation.Nonnull List<ImageUrl> images) {
    this.images = images;
    return this;
  }

  public ProductProposalsRequest addImagesItem(ImageUrl imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * List of product images. At least one image is required.
   * @return images
   */
  @javax.annotation.Nonnull
  public List<ImageUrl> getImages() {
    return images;
  }

  public void setImages(@javax.annotation.Nonnull List<ImageUrl> images) {
    this.images = images;
  }


  public ProductProposalsRequest parameters(@javax.annotation.Nonnull List<ProductParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ProductProposalsRequest addParametersItem(ProductParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * List of product parameters.
   * @return parameters
   */
  @javax.annotation.Nonnull
  public List<ProductParameter> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nonnull List<ProductParameter> parameters) {
    this.parameters = parameters;
  }


  public ProductProposalsRequest description(@javax.annotation.Nullable StandardizedDescription description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public StandardizedDescription getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable StandardizedDescription description) {
    this.description = description;
  }


  public ProductProposalsRequest language(@javax.annotation.Nonnull String language) {
    this.language = language;
    return this;
  }

  /**
   * Language of provided product data (name, description, parameters&#39;s values).
   * @return language
   */
  @javax.annotation.Nonnull
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nonnull String language) {
    this.language = language;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductProposalsRequest productProposalsRequest = (ProductProposalsRequest) o;
    return Objects.equals(this.name, productProposalsRequest.name) &&
        Objects.equals(this.category, productProposalsRequest.category) &&
        Objects.equals(this.images, productProposalsRequest.images) &&
        Objects.equals(this.parameters, productProposalsRequest.parameters) &&
        Objects.equals(this.description, productProposalsRequest.description) &&
        Objects.equals(this.language, productProposalsRequest.language);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, category, images, parameters, description, language);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductProposalsRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("category");
    openapiFields.add("images");
    openapiFields.add("parameters");
    openapiFields.add("description");
    openapiFields.add("language");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("parameters");
    openapiRequiredFields.add("language");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductProposalsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductProposalsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductProposalsRequest is not found in the empty JSON string", ProductProposalsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductProposalsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductProposalsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductProposalsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `category`
      ProductCategory.validateJsonElement(jsonObj.get("category"));
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        ImageUrl.validateJsonElement(jsonArrayimages.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }

      JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
      // validate the required field `parameters` (array)
      for (int i = 0; i < jsonArrayparameters.size(); i++) {
        ProductParameter.validateJsonElement(jsonArrayparameters.get(i));
      };
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        StandardizedDescription.validateJsonElement(jsonObj.get("description"));
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductProposalsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductProposalsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductProposalsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductProposalsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductProposalsRequest>() {
           @Override
           public void write(JsonWriter out, ProductProposalsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductProposalsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductProposalsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductProposalsRequest
   * @throws IOException if the JSON string is invalid with respect to ProductProposalsRequest
   */
  public static ProductProposalsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductProposalsRequest.class);
  }

  /**
   * Convert an instance of ProductProposalsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

