/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.BadgeApplication;
import pl.wtx.allegro.api.client.model.BadgeApplicationRequest;
import pl.wtx.allegro.api.client.model.BadgeApplications;
import pl.wtx.allegro.api.client.model.BadgeOperation;
import pl.wtx.allegro.api.client.model.BadgePatchRequest;
import pl.wtx.allegro.api.client.model.BadgesList;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.GetBadgeCampaignsList;
import pl.wtx.allegro.api.client.model.PatchBadge202Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BadgeCampaignsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BadgeCampaignsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BadgeCampaignsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for badgeApplicationsGetAll
     * @param campaignId Campaign ID. (optional)
     * @param offerId Offer ID. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of applications returned in the response. (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge applications list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeApplicationsGetAllCall(@javax.annotation.Nullable String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/badge-applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign.id", campaignId));
        }

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offer.id", offerId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call badgeApplicationsGetAllValidateBeforeCall(@javax.annotation.Nullable String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return badgeApplicationsGetAllCall(campaignId, offerId, offset, limit, _callback);

    }

    /**
     * Get a list of badge applications
     * Use this resource to get a list of badge applications. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-swoje-zgloszenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-all-campaign-applications\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign ID. (optional)
     * @param offerId Offer ID. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of applications returned in the response. (optional, default to 50)
     * @return BadgeApplications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge applications list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public BadgeApplications badgeApplicationsGetAll(@javax.annotation.Nullable String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<BadgeApplications> localVarResp = badgeApplicationsGetAllWithHttpInfo(campaignId, offerId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get a list of badge applications
     * Use this resource to get a list of badge applications. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-swoje-zgloszenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-all-campaign-applications\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign ID. (optional)
     * @param offerId Offer ID. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of applications returned in the response. (optional, default to 50)
     * @return ApiResponse&lt;BadgeApplications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge applications list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BadgeApplications> badgeApplicationsGetAllWithHttpInfo(@javax.annotation.Nullable String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = badgeApplicationsGetAllValidateBeforeCall(campaignId, offerId, offset, limit, null);
        Type localVarReturnType = new TypeToken<BadgeApplications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of badge applications (asynchronously)
     * Use this resource to get a list of badge applications. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-swoje-zgloszenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-all-campaign-applications\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign ID. (optional)
     * @param offerId Offer ID. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of applications returned in the response. (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge applications list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeApplicationsGetAllAsync(@javax.annotation.Nullable String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<BadgeApplications> _callback) throws ApiException {

        okhttp3.Call localVarCall = badgeApplicationsGetAllValidateBeforeCall(campaignId, offerId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BadgeApplications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for badgeApplicationsGetOne
     * @param applicationId Badge application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge application. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeApplicationsGetOneCall(@javax.annotation.Nonnull String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/badge-applications/{applicationId}"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call badgeApplicationsGetOneValidateBeforeCall(@javax.annotation.Nonnull String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling badgeApplicationsGetOne(Async)");
        }

        return badgeApplicationsGetOneCall(applicationId, _callback);

    }

    /**
     * Get a badge application details
     * Use this resource to get a badge application details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-dane-zgloszenie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-campaign-application\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param applicationId Badge application ID. (required)
     * @return BadgeApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge application. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge application not found. </td><td>  -  </td></tr>
     </table>
     */
    public BadgeApplication badgeApplicationsGetOne(@javax.annotation.Nonnull String applicationId) throws ApiException {
        ApiResponse<BadgeApplication> localVarResp = badgeApplicationsGetOneWithHttpInfo(applicationId);
        return localVarResp.getData();
    }

    /**
     * Get a badge application details
     * Use this resource to get a badge application details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-dane-zgloszenie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-campaign-application\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param applicationId Badge application ID. (required)
     * @return ApiResponse&lt;BadgeApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge application. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge application not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BadgeApplication> badgeApplicationsGetOneWithHttpInfo(@javax.annotation.Nonnull String applicationId) throws ApiException {
        okhttp3.Call localVarCall = badgeApplicationsGetOneValidateBeforeCall(applicationId, null);
        Type localVarReturnType = new TypeToken<BadgeApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a badge application details (asynchronously)
     * Use this resource to get a badge application details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#pobierz-dane-zgloszenie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#retrieve-campaign-application\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param applicationId Badge application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge application. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge application not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeApplicationsGetOneAsync(@javax.annotation.Nonnull String applicationId, final ApiCallback<BadgeApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = badgeApplicationsGetOneValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<BadgeApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for badgeCampaignsGetAll
     * @param marketplaceId The marketplace of campaigns. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available badge campaigns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeCampaignsGetAllCall(@javax.annotation.Nullable String marketplaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/badge-campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplace.id", marketplaceId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call badgeCampaignsGetAllValidateBeforeCall(@javax.annotation.Nullable String marketplaceId, final ApiCallback _callback) throws ApiException {
        return badgeCampaignsGetAllCall(marketplaceId, _callback);

    }

    /**
     * Get a list of available badge campaigns
     * Badge campaigns are another way to promote your offers. You can apply for a badge, which - depending on a type - will be displayed on your offer page of on the list of offers. First - use this resource to get a list of all available badge campaigns at the moment, then use *POST /sale/badges* to apply for badge. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-dostepnych-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-available-campaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId The marketplace of campaigns. (optional)
     * @return GetBadgeCampaignsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available badge campaigns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public GetBadgeCampaignsList badgeCampaignsGetAll(@javax.annotation.Nullable String marketplaceId) throws ApiException {
        ApiResponse<GetBadgeCampaignsList> localVarResp = badgeCampaignsGetAllWithHttpInfo(marketplaceId);
        return localVarResp.getData();
    }

    /**
     * Get a list of available badge campaigns
     * Badge campaigns are another way to promote your offers. You can apply for a badge, which - depending on a type - will be displayed on your offer page of on the list of offers. First - use this resource to get a list of all available badge campaigns at the moment, then use *POST /sale/badges* to apply for badge. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-dostepnych-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-available-campaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId The marketplace of campaigns. (optional)
     * @return ApiResponse&lt;GetBadgeCampaignsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available badge campaigns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBadgeCampaignsList> badgeCampaignsGetAllWithHttpInfo(@javax.annotation.Nullable String marketplaceId) throws ApiException {
        okhttp3.Call localVarCall = badgeCampaignsGetAllValidateBeforeCall(marketplaceId, null);
        Type localVarReturnType = new TypeToken<GetBadgeCampaignsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of available badge campaigns (asynchronously)
     * Badge campaigns are another way to promote your offers. You can apply for a badge, which - depending on a type - will be displayed on your offer page of on the list of offers. First - use this resource to get a list of all available badge campaigns at the moment, then use *POST /sale/badges* to apply for badge. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-dostepnych-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-available-campaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId The marketplace of campaigns. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available badge campaigns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeCampaignsGetAllAsync(@javax.annotation.Nullable String marketplaceId, final ApiCallback<GetBadgeCampaignsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = badgeCampaignsGetAllValidateBeforeCall(marketplaceId, _callback);
        Type localVarReturnType = new TypeToken<GetBadgeCampaignsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for badgeOperationsGetOne
     * @param operationId Badge operation ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge operation details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge operation not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeOperationsGetOneCall(@javax.annotation.Nonnull String operationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/badge-operations/{operationId}"
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call badgeOperationsGetOneValidateBeforeCall(@javax.annotation.Nonnull String operationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling badgeOperationsGetOne(Async)");
        }

        return badgeOperationsGetOneCall(operationId, _callback);

    }

    /**
     * Get badge operation details
     * Use this resource to get badge operation details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param operationId Badge operation ID. (required)
     * @return BadgeOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge operation details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge operation not found. </td><td>  -  </td></tr>
     </table>
     */
    public BadgeOperation badgeOperationsGetOne(@javax.annotation.Nonnull String operationId) throws ApiException {
        ApiResponse<BadgeOperation> localVarResp = badgeOperationsGetOneWithHttpInfo(operationId);
        return localVarResp.getData();
    }

    /**
     * Get badge operation details
     * Use this resource to get badge operation details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param operationId Badge operation ID. (required)
     * @return ApiResponse&lt;BadgeOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge operation details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge operation not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BadgeOperation> badgeOperationsGetOneWithHttpInfo(@javax.annotation.Nonnull String operationId) throws ApiException {
        okhttp3.Call localVarCall = badgeOperationsGetOneValidateBeforeCall(operationId, null);
        Type localVarReturnType = new TypeToken<BadgeOperation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get badge operation details (asynchronously)
     * Use this resource to get badge operation details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param operationId Badge operation ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned badge operation details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Badge operation not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call badgeOperationsGetOneAsync(@javax.annotation.Nonnull String operationId, final ApiCallback<BadgeOperation> _callback) throws ApiException {

        okhttp3.Call localVarCall = badgeOperationsGetOneValidateBeforeCall(operationId, _callback);
        Type localVarReturnType = new TypeToken<BadgeOperation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBadges
     * @param offerId Offer ID. (optional)
     * @param marketplaceId The marketplace of badges. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of badges returned in the response. (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of badges. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBadgesCall(@javax.annotation.Nullable String offerId, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offer.id", offerId));
        }

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplace.id", marketplaceId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBadgesValidateBeforeCall(@javax.annotation.Nullable String offerId, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getBadgesCall(offerId, marketplaceId, offset, limit, _callback);

    }

    /**
     * Get a list of badges
     * Use this resource to get a list of badges in authorized seller&#39;s offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#kampanie-przypisane-do-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#check-badges-assigned-to-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (optional)
     * @param marketplaceId The marketplace of badges. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of badges returned in the response. (optional, default to 50)
     * @return BadgesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of badges. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public BadgesList getBadges(@javax.annotation.Nullable String offerId, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<BadgesList> localVarResp = getBadgesWithHttpInfo(offerId, marketplaceId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get a list of badges
     * Use this resource to get a list of badges in authorized seller&#39;s offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#kampanie-przypisane-do-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#check-badges-assigned-to-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (optional)
     * @param marketplaceId The marketplace of badges. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of badges returned in the response. (optional, default to 50)
     * @return ApiResponse&lt;BadgesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of badges. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BadgesList> getBadgesWithHttpInfo(@javax.annotation.Nullable String offerId, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getBadgesValidateBeforeCall(offerId, marketplaceId, offset, limit, null);
        Type localVarReturnType = new TypeToken<BadgesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of badges (asynchronously)
     * Use this resource to get a list of badges in authorized seller&#39;s offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#kampanie-przypisane-do-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#check-badges-assigned-to-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (optional)
     * @param marketplaceId The marketplace of badges. (optional)
     * @param offset Offset. (optional)
     * @param limit The maximum number of badges returned in the response. (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of badges. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid values supplied in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBadgesAsync(@javax.annotation.Nullable String offerId, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<BadgesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBadgesValidateBeforeCall(offerId, marketplaceId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BadgesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchBadge
     * @param offerId Offer ID. (required)
     * @param campaignId Campaign ID. (required)
     * @param badgePatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully requested badge update. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Asynchronous badge operation for this offer already exists in status REQUESTED. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchBadgeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable BadgePatchRequest badgePatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgePatchRequest;

        // create path and map variables
        String localVarPath = "/sale/badges/offers/{offerId}/campaigns/{campaignId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchBadgeValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable BadgePatchRequest badgePatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling patchBadge(Async)");
        }

        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling patchBadge(Async)");
        }

        return patchBadgeCall(offerId, campaignId, badgePatchRequest, _callback);

    }

    /**
     * Update campaign badge for the given offer
     * This resource allows you to update a campaign badge for the given offer. You can use *Location* provided in header of the response to track your update status. Update offer price in a campaign or finish marking an offer in a campaign. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (required)
     * @param campaignId Campaign ID. (required)
     * @param badgePatchRequest  (optional)
     * @return PatchBadge202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully requested badge update. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Asynchronous badge operation for this offer already exists in status REQUESTED. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public PatchBadge202Response patchBadge(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable BadgePatchRequest badgePatchRequest) throws ApiException {
        ApiResponse<PatchBadge202Response> localVarResp = patchBadgeWithHttpInfo(offerId, campaignId, badgePatchRequest);
        return localVarResp.getData();
    }

    /**
     * Update campaign badge for the given offer
     * This resource allows you to update a campaign badge for the given offer. You can use *Location* provided in header of the response to track your update status. Update offer price in a campaign or finish marking an offer in a campaign. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (required)
     * @param campaignId Campaign ID. (required)
     * @param badgePatchRequest  (optional)
     * @return ApiResponse&lt;PatchBadge202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully requested badge update. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Asynchronous badge operation for this offer already exists in status REQUESTED. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchBadge202Response> patchBadgeWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable BadgePatchRequest badgePatchRequest) throws ApiException {
        okhttp3.Call localVarCall = patchBadgeValidateBeforeCall(offerId, campaignId, badgePatchRequest, null);
        Type localVarReturnType = new TypeToken<PatchBadge202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update campaign badge for the given offer (asynchronously)
     * This resource allows you to update a campaign badge for the given offer. You can use *Location* provided in header of the response to track your update status. Update offer price in a campaign or finish marking an offer in a campaign. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zmiana-ceny-i-zakonczenie-oznaczenia\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#change-price-and-finish-badge\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (required)
     * @param campaignId Campaign ID. (required)
     * @param badgePatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully requested badge update. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Asynchronous badge operation for this offer already exists in status REQUESTED. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchBadgeAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable BadgePatchRequest badgePatchRequest, final ApiCallback<PatchBadge202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchBadgeValidateBeforeCall(offerId, campaignId, badgePatchRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchBadge202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBadges
     * @param badgeApplicationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully applied for a badge. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBadgesCall(@javax.annotation.Nullable BadgeApplicationRequest badgeApplicationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgeApplicationRequest;

        // create path and map variables
        String localVarPath = "/sale/badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBadgesValidateBeforeCall(@javax.annotation.Nullable BadgeApplicationRequest badgeApplicationRequest, final ApiCallback _callback) throws ApiException {
        return postBadgesCall(badgeApplicationRequest, _callback);

    }

    /**
     * Apply for badge in selected offer
     * This resource allows you to apply for a badge. Most badges involve additional fee charged. Your badge application will be verified and you will be notified about the verification status via e-mail. You can use *Location* provided in header of the response to track your application status. Application will be removed after 30 days when status of the application was changed form PROCESSED or DECLINED. Fees will be charged in accordance with Annex No. 1 to the   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Daily deals zone terms and conditions&lt;/a&gt;.  By using this resource you agree to the   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Daily deals zone terms and conditions&lt;/a&gt; or   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-programu-bonusowego-prowizja-nawet-0-5-0KPkAE7wkcv\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Commission discount terms and conditions&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zglos-oferte-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#submit-offer-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param badgeApplicationRequest  (optional)
     * @return BadgeApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully applied for a badge. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public BadgeApplication postBadges(@javax.annotation.Nullable BadgeApplicationRequest badgeApplicationRequest) throws ApiException {
        ApiResponse<BadgeApplication> localVarResp = postBadgesWithHttpInfo(badgeApplicationRequest);
        return localVarResp.getData();
    }

    /**
     * Apply for badge in selected offer
     * This resource allows you to apply for a badge. Most badges involve additional fee charged. Your badge application will be verified and you will be notified about the verification status via e-mail. You can use *Location* provided in header of the response to track your application status. Application will be removed after 30 days when status of the application was changed form PROCESSED or DECLINED. Fees will be charged in accordance with Annex No. 1 to the   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Daily deals zone terms and conditions&lt;/a&gt;.  By using this resource you agree to the   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Daily deals zone terms and conditions&lt;/a&gt; or   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-programu-bonusowego-prowizja-nawet-0-5-0KPkAE7wkcv\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Commission discount terms and conditions&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zglos-oferte-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#submit-offer-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param badgeApplicationRequest  (optional)
     * @return ApiResponse&lt;BadgeApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully applied for a badge. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BadgeApplication> postBadgesWithHttpInfo(@javax.annotation.Nullable BadgeApplicationRequest badgeApplicationRequest) throws ApiException {
        okhttp3.Call localVarCall = postBadgesValidateBeforeCall(badgeApplicationRequest, null);
        Type localVarReturnType = new TypeToken<BadgeApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply for badge in selected offer (asynchronously)
     * This resource allows you to apply for a badge. Most badges involve additional fee charged. Your badge application will be verified and you will be notified about the verification status via e-mail. You can use *Location* provided in header of the response to track your application status. Application will be removed after 30 days when status of the application was changed form PROCESSED or DECLINED. Fees will be charged in accordance with Annex No. 1 to the   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Daily deals zone terms and conditions&lt;/a&gt;.  By using this resource you agree to the   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Daily deals zone terms and conditions&lt;/a&gt; or   &lt;a href&#x3D;\&quot;https://allegro.pl/regulaminy/regulamin-programu-bonusowego-prowizja-nawet-0-5-0KPkAE7wkcv\&quot;     target&#x3D;\&quot;_blank\&quot;&gt;Commission discount terms and conditions&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#zglos-oferte-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#submit-offer-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param badgeApplicationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully applied for a badge. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The account is not a Business Account. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. Invalid parameters provided in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBadgesAsync(@javax.annotation.Nullable BadgeApplicationRequest badgeApplicationRequest, final ApiCallback<BadgeApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBadgesValidateBeforeCall(badgeApplicationRequest, _callback);
        Type localVarReturnType = new TypeToken<BadgeApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
