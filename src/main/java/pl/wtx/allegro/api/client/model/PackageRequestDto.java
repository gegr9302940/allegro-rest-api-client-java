/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.DimensionValue;
import pl.wtx.allegro.api.client.model.WeightValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * PackageRequestDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class PackageRequestDto {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private String type;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  @javax.annotation.Nonnull
  private DimensionValue length;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  @javax.annotation.Nonnull
  private DimensionValue width;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  @javax.annotation.Nonnull
  private DimensionValue height;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  @javax.annotation.Nonnull
  private WeightValue weight;

  public static final String SERIALIZED_NAME_TEXT_ON_LABEL = "textOnLabel";
  @SerializedName(SERIALIZED_NAME_TEXT_ON_LABEL)
  @javax.annotation.Nullable
  private String textOnLabel;

  public PackageRequestDto() {
  }

  public PackageRequestDto type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Available values: PACKAGE|DOX|PALLET|OTHER
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }


  public PackageRequestDto length(@javax.annotation.Nonnull DimensionValue length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nonnull
  public DimensionValue getLength() {
    return length;
  }

  public void setLength(@javax.annotation.Nonnull DimensionValue length) {
    this.length = length;
  }


  public PackageRequestDto width(@javax.annotation.Nonnull DimensionValue width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nonnull
  public DimensionValue getWidth() {
    return width;
  }

  public void setWidth(@javax.annotation.Nonnull DimensionValue width) {
    this.width = width;
  }


  public PackageRequestDto height(@javax.annotation.Nonnull DimensionValue height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nonnull
  public DimensionValue getHeight() {
    return height;
  }

  public void setHeight(@javax.annotation.Nonnull DimensionValue height) {
    this.height = height;
  }


  public PackageRequestDto weight(@javax.annotation.Nonnull WeightValue weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nonnull
  public WeightValue getWeight() {
    return weight;
  }

  public void setWeight(@javax.annotation.Nonnull WeightValue weight) {
    this.weight = weight;
  }


  public PackageRequestDto textOnLabel(@javax.annotation.Nullable String textOnLabel) {
    this.textOnLabel = textOnLabel;
    return this;
  }

  /**
   * Additional information on the package label.
   * @return textOnLabel
   */
  @javax.annotation.Nullable
  public String getTextOnLabel() {
    return textOnLabel;
  }

  public void setTextOnLabel(@javax.annotation.Nullable String textOnLabel) {
    this.textOnLabel = textOnLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageRequestDto packageRequestDto = (PackageRequestDto) o;
    return Objects.equals(this.type, packageRequestDto.type) &&
        Objects.equals(this.length, packageRequestDto.length) &&
        Objects.equals(this.width, packageRequestDto.width) &&
        Objects.equals(this.height, packageRequestDto.height) &&
        Objects.equals(this.weight, packageRequestDto.weight) &&
        Objects.equals(this.textOnLabel, packageRequestDto.textOnLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, length, width, height, weight, textOnLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageRequestDto {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    textOnLabel: ").append(toIndentedString(textOnLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("length");
    openapiFields.add("width");
    openapiFields.add("height");
    openapiFields.add("weight");
    openapiFields.add("textOnLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("length");
    openapiRequiredFields.add("width");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("weight");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PackageRequestDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PackageRequestDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PackageRequestDto is not found in the empty JSON string", PackageRequestDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PackageRequestDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PackageRequestDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PackageRequestDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `length`
      DimensionValue.validateJsonElement(jsonObj.get("length"));
      // validate the required field `width`
      DimensionValue.validateJsonElement(jsonObj.get("width"));
      // validate the required field `height`
      DimensionValue.validateJsonElement(jsonObj.get("height"));
      // validate the required field `weight`
      WeightValue.validateJsonElement(jsonObj.get("weight"));
      if ((jsonObj.get("textOnLabel") != null && !jsonObj.get("textOnLabel").isJsonNull()) && !jsonObj.get("textOnLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textOnLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textOnLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PackageRequestDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PackageRequestDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PackageRequestDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PackageRequestDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PackageRequestDto>() {
           @Override
           public void write(JsonWriter out, PackageRequestDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PackageRequestDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PackageRequestDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PackageRequestDto
   * @throws IOException if the JSON string is invalid with respect to PackageRequestDto
   */
  public static PackageRequestDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PackageRequestDto.class);
  }

  /**
   * Convert an instance of PackageRequestDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

