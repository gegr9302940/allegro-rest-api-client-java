/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.GetOfferSmartClassificationGET403Response;
import pl.wtx.allegro.api.client.model.GetRefundedPayments200Response;
import pl.wtx.allegro.api.client.model.InitializeRefund;
import java.time.OffsetDateTime;
import pl.wtx.allegro.api.client.model.PaymentOperations;
import pl.wtx.allegro.api.client.model.RefundDetails;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPaymentsOperationHistory
     * @param walletType Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout. (optional, default to AVAILABLE)
     * @param walletPaymentOperator Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator. * AF - operations processed by Allegro Finance operator. * AF_P24 - operations processed by Allegro Finance with PRZELEWY24. * AF_PAYU - operations processed by Allegro Finance with PAYU. (optional)
     * @param paymentId The payment ID. (optional)
     * @param participantLogin Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer. (optional)
     * @param occurredAtGte The minimum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param occurredAtLte The maximum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param group Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE, COMPENSATION. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION, PROVIDER_REFUND_TRANSFER_CHARGE, PROVIDER_REFUND_TRANSFER_INCREASE. * BLOCKADES - BLOCKADE, BLOCKADE_RELEASE. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. Note, that there are operations not assigned to any marketplace. (optional)
     * @param currency Currency of the operations. (optional)
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The payment operations history for given search criteria returned successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when any of the given search parameters have an invalid value or when the search result reached the limit of found operations - 10000. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsOperationHistoryCall(@javax.annotation.Nullable String walletType, @javax.annotation.Nullable String walletPaymentOperator, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable String participantLogin, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> group, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/payment-operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (walletType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wallet.type", walletType));
        }

        if (walletPaymentOperator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wallet.paymentOperator", walletPaymentOperator));
        }

        if (paymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment.id", paymentId));
        }

        if (participantLogin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participant.login", participantLogin));
        }

        if (occurredAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAt.gte", occurredAtGte));
        }

        if (occurredAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAt.lte", occurredAtLte));
        }

        if (group != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "group", group));
        }

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceId", marketplaceId));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsOperationHistoryValidateBeforeCall(@javax.annotation.Nullable String walletType, @javax.annotation.Nullable String walletPaymentOperator, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable String participantLogin, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> group, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return getPaymentsOperationHistoryCall(walletType, walletPaymentOperator, paymentId, participantLogin, occurredAtGte, occurredAtLte, group, marketplaceId, currency, limit, offset, _callback);

    }

    /**
     * Payment operations history
     * Use this endpoint to get the list of the seller payment operations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-platniczych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#payment-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param walletType Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout. (optional, default to AVAILABLE)
     * @param walletPaymentOperator Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator. * AF - operations processed by Allegro Finance operator. * AF_P24 - operations processed by Allegro Finance with PRZELEWY24. * AF_PAYU - operations processed by Allegro Finance with PAYU. (optional)
     * @param paymentId The payment ID. (optional)
     * @param participantLogin Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer. (optional)
     * @param occurredAtGte The minimum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param occurredAtLte The maximum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param group Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE, COMPENSATION. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION, PROVIDER_REFUND_TRANSFER_CHARGE, PROVIDER_REFUND_TRANSFER_INCREASE. * BLOCKADES - BLOCKADE, BLOCKADE_RELEASE. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. Note, that there are operations not assigned to any marketplace. (optional)
     * @param currency Currency of the operations. (optional)
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @return PaymentOperations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The payment operations history for given search criteria returned successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when any of the given search parameters have an invalid value or when the search result reached the limit of found operations - 10000. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentOperations getPaymentsOperationHistory(@javax.annotation.Nullable String walletType, @javax.annotation.Nullable String walletPaymentOperator, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable String participantLogin, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> group, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<PaymentOperations> localVarResp = getPaymentsOperationHistoryWithHttpInfo(walletType, walletPaymentOperator, paymentId, participantLogin, occurredAtGte, occurredAtLte, group, marketplaceId, currency, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Payment operations history
     * Use this endpoint to get the list of the seller payment operations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-platniczych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#payment-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param walletType Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout. (optional, default to AVAILABLE)
     * @param walletPaymentOperator Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator. * AF - operations processed by Allegro Finance operator. * AF_P24 - operations processed by Allegro Finance with PRZELEWY24. * AF_PAYU - operations processed by Allegro Finance with PAYU. (optional)
     * @param paymentId The payment ID. (optional)
     * @param participantLogin Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer. (optional)
     * @param occurredAtGte The minimum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param occurredAtLte The maximum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param group Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE, COMPENSATION. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION, PROVIDER_REFUND_TRANSFER_CHARGE, PROVIDER_REFUND_TRANSFER_INCREASE. * BLOCKADES - BLOCKADE, BLOCKADE_RELEASE. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. Note, that there are operations not assigned to any marketplace. (optional)
     * @param currency Currency of the operations. (optional)
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @return ApiResponse&lt;PaymentOperations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The payment operations history for given search criteria returned successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when any of the given search parameters have an invalid value or when the search result reached the limit of found operations - 10000. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentOperations> getPaymentsOperationHistoryWithHttpInfo(@javax.annotation.Nullable String walletType, @javax.annotation.Nullable String walletPaymentOperator, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable String participantLogin, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> group, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsOperationHistoryValidateBeforeCall(walletType, walletPaymentOperator, paymentId, participantLogin, occurredAtGte, occurredAtLte, group, marketplaceId, currency, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaymentOperations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Payment operations history (asynchronously)
     * Use this endpoint to get the list of the seller payment operations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-sprawdzic-oplaty-nn9DOL5PASX#historia-operacji-platniczych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-check-the-fees-3An6Wame3Um#payment-operations\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param walletType Type of the wallet: * AVAILABLE - operations available for payout. * WAITING - operations temporarily suspended for payout. (optional, default to AVAILABLE)
     * @param walletPaymentOperator Payment operator: * PAYU - operations processed by PAYU operator. * P24 - operations processed by PRZELEWY24 operator. * AF - operations processed by Allegro Finance operator. * AF_P24 - operations processed by Allegro Finance with PRZELEWY24. * AF_PAYU - operations processed by Allegro Finance with PAYU. (optional)
     * @param paymentId The payment ID. (optional)
     * @param participantLogin Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller, in other cases, of the buyer. (optional)
     * @param occurredAtGte The minimum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param occurredAtLte The maximum date and time of operation occurrence in ISO 8601 format. (optional)
     * @param group Group of operation types: * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE, COMPENSATION. * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE. * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION, PROVIDER_REFUND_TRANSFER_CHARGE, PROVIDER_REFUND_TRANSFER_INCREASE. * BLOCKADES - BLOCKADE, BLOCKADE_RELEASE. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. Note, that there are operations not assigned to any marketplace. (optional)
     * @param currency Currency of the operations. (optional)
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The payment operations history for given search criteria returned successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returned when any of the given search parameters have an invalid value or when the search result reached the limit of found operations - 10000. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsOperationHistoryAsync(@javax.annotation.Nullable String walletType, @javax.annotation.Nullable String walletPaymentOperator, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable String participantLogin, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> group, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<PaymentOperations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsOperationHistoryValidateBeforeCall(walletType, walletPaymentOperator, paymentId, participantLogin, occurredAtGte, occurredAtLte, group, marketplaceId, currency, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaymentOperations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRefundedPayments
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param id ID of the refund. (optional)
     * @param paymentId ID of the payment. (optional)
     * @param orderId ID of the order. (optional)
     * @param occurredAtGte Minimum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param occurredAtLte Maximum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param status Current status of payment refund. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of payments refunds returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Returned when any of the given search parameters have an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundedPaymentsCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable UUID id, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (paymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment.id", paymentId));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order.id", orderId));
        }

        if (occurredAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAt.gte", occurredAtGte));
        }

        if (occurredAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurredAt.lte", occurredAtLte));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundedPaymentsValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable UUID id, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> status, final ApiCallback _callback) throws ApiException {
        return getRefundedPaymentsCall(limit, offset, id, paymentId, orderId, occurredAtGte, occurredAtLte, status, _callback);

    }

    /**
     * Get a list of refunded payments
     * Get a list of refunded payments. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow-platnosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-a-list-of-refunded-payment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param id ID of the refund. (optional)
     * @param paymentId ID of the payment. (optional)
     * @param orderId ID of the order. (optional)
     * @param occurredAtGte Minimum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param occurredAtLte Maximum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param status Current status of payment refund. (optional)
     * @return GetRefundedPayments200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of payments refunds returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Returned when any of the given search parameters have an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public GetRefundedPayments200Response getRefundedPayments(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable UUID id, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> status) throws ApiException {
        ApiResponse<GetRefundedPayments200Response> localVarResp = getRefundedPaymentsWithHttpInfo(limit, offset, id, paymentId, orderId, occurredAtGte, occurredAtLte, status);
        return localVarResp.getData();
    }

    /**
     * Get a list of refunded payments
     * Get a list of refunded payments. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow-platnosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-a-list-of-refunded-payment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param id ID of the refund. (optional)
     * @param paymentId ID of the payment. (optional)
     * @param orderId ID of the order. (optional)
     * @param occurredAtGte Minimum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param occurredAtLte Maximum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param status Current status of payment refund. (optional)
     * @return ApiResponse&lt;GetRefundedPayments200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of payments refunds returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Returned when any of the given search parameters have an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRefundedPayments200Response> getRefundedPaymentsWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable UUID id, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> status) throws ApiException {
        okhttp3.Call localVarCall = getRefundedPaymentsValidateBeforeCall(limit, offset, id, paymentId, orderId, occurredAtGte, occurredAtLte, status, null);
        Type localVarReturnType = new TypeToken<GetRefundedPayments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of refunded payments (asynchronously)
     * Get a list of refunded payments. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow-platnosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-a-list-of-refunded-payment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Number of returned operations. (optional, default to 50)
     * @param offset Index of the first returned payment operation from all search results. (optional, default to 0)
     * @param id ID of the refund. (optional)
     * @param paymentId ID of the payment. (optional)
     * @param orderId ID of the order. (optional)
     * @param occurredAtGte Minimum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param occurredAtLte Maximum date and time when the refund occurred provided in ISO 8601 format. (optional)
     * @param status Current status of payment refund. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of payments refunds returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Returned when any of the given search parameters have an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundedPaymentsAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable UUID id, @javax.annotation.Nullable UUID paymentId, @javax.annotation.Nullable UUID orderId, @javax.annotation.Nullable OffsetDateTime occurredAtGte, @javax.annotation.Nullable OffsetDateTime occurredAtLte, @javax.annotation.Nullable List<String> status, final ApiCallback<GetRefundedPayments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRefundedPaymentsValidateBeforeCall(limit, offset, id, paymentId, orderId, occurredAtGte, occurredAtLte, status, _callback);
        Type localVarReturnType = new TypeToken<GetRefundedPayments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiateRefund
     * @param initializeRefund  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund request created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateRefundCall(@javax.annotation.Nullable InitializeRefund initializeRefund, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = initializeRefund;

        // create path and map variables
        String localVarPath = "/payments/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateRefundValidateBeforeCall(@javax.annotation.Nullable InitializeRefund initializeRefund, final ApiCallback _callback) throws ApiException {
        return initiateRefundCall(initializeRefund, _callback);

    }

    /**
     * Initiate a refund of a payment
     * Use this endpoint to initiate a refund of a payment. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-wykonac-zwrot-platnosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-refund-a-payment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param initializeRefund  (optional)
     * @return RefundDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund request created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment not found. </td><td>  -  </td></tr>
     </table>
     */
    public RefundDetails initiateRefund(@javax.annotation.Nullable InitializeRefund initializeRefund) throws ApiException {
        ApiResponse<RefundDetails> localVarResp = initiateRefundWithHttpInfo(initializeRefund);
        return localVarResp.getData();
    }

    /**
     * Initiate a refund of a payment
     * Use this endpoint to initiate a refund of a payment. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-wykonac-zwrot-platnosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-refund-a-payment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param initializeRefund  (optional)
     * @return ApiResponse&lt;RefundDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund request created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundDetails> initiateRefundWithHttpInfo(@javax.annotation.Nullable InitializeRefund initializeRefund) throws ApiException {
        okhttp3.Call localVarCall = initiateRefundValidateBeforeCall(initializeRefund, null);
        Type localVarReturnType = new TypeToken<RefundDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate a refund of a payment (asynchronously)
     * Use this endpoint to initiate a refund of a payment. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-wykonac-zwrot-platnosci\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-refund-a-payment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param initializeRefund  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refund request created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateRefundAsync(@javax.annotation.Nullable InitializeRefund initializeRefund, final ApiCallback<RefundDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateRefundValidateBeforeCall(initializeRefund, _callback);
        Type localVarReturnType = new TypeToken<RefundDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
