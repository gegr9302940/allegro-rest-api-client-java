/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Can be null if availability range is &#39;DISABLED&#39;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ReturnPolicyOptions {
  public static final String SERIALIZED_NAME_CASH_ON_DELIVERY_NOT_ALLOWED = "cashOnDeliveryNotAllowed";
  @SerializedName(SERIALIZED_NAME_CASH_ON_DELIVERY_NOT_ALLOWED)
  @javax.annotation.Nonnull
  private Boolean cashOnDeliveryNotAllowed;

  public static final String SERIALIZED_NAME_FREE_ACCESSORIES_RETURN_REQUIRED = "freeAccessoriesReturnRequired";
  @SerializedName(SERIALIZED_NAME_FREE_ACCESSORIES_RETURN_REQUIRED)
  @javax.annotation.Nonnull
  private Boolean freeAccessoriesReturnRequired;

  public static final String SERIALIZED_NAME_REFUND_LOWERED_BY_RECEIVED_DISCOUNT = "refundLoweredByReceivedDiscount";
  @SerializedName(SERIALIZED_NAME_REFUND_LOWERED_BY_RECEIVED_DISCOUNT)
  @javax.annotation.Nonnull
  private Boolean refundLoweredByReceivedDiscount;

  public static final String SERIALIZED_NAME_BUSINESS_RETURN_ALLOWED = "businessReturnAllowed";
  @SerializedName(SERIALIZED_NAME_BUSINESS_RETURN_ALLOWED)
  @javax.annotation.Nonnull
  private Boolean businessReturnAllowed;

  public static final String SERIALIZED_NAME_COLLECT_BY_SELLER_ONLY = "collectBySellerOnly";
  @SerializedName(SERIALIZED_NAME_COLLECT_BY_SELLER_ONLY)
  @javax.annotation.Nonnull
  private Boolean collectBySellerOnly;

  public ReturnPolicyOptions() {
  }

  public ReturnPolicyOptions cashOnDeliveryNotAllowed(@javax.annotation.Nonnull Boolean cashOnDeliveryNotAllowed) {
    this.cashOnDeliveryNotAllowed = cashOnDeliveryNotAllowed;
    return this;
  }

  /**
   * Order sent back with cash on pickup is not allowed
   * @return cashOnDeliveryNotAllowed
   */
  @javax.annotation.Nonnull
  public Boolean getCashOnDeliveryNotAllowed() {
    return cashOnDeliveryNotAllowed;
  }

  public void setCashOnDeliveryNotAllowed(@javax.annotation.Nonnull Boolean cashOnDeliveryNotAllowed) {
    this.cashOnDeliveryNotAllowed = cashOnDeliveryNotAllowed;
  }


  public ReturnPolicyOptions freeAccessoriesReturnRequired(@javax.annotation.Nonnull Boolean freeAccessoriesReturnRequired) {
    this.freeAccessoriesReturnRequired = freeAccessoriesReturnRequired;
    return this;
  }

  /**
   * If free accessories were added to the order, the client needs to send them back
   * @return freeAccessoriesReturnRequired
   */
  @javax.annotation.Nonnull
  public Boolean getFreeAccessoriesReturnRequired() {
    return freeAccessoriesReturnRequired;
  }

  public void setFreeAccessoriesReturnRequired(@javax.annotation.Nonnull Boolean freeAccessoriesReturnRequired) {
    this.freeAccessoriesReturnRequired = freeAccessoriesReturnRequired;
  }


  public ReturnPolicyOptions refundLoweredByReceivedDiscount(@javax.annotation.Nonnull Boolean refundLoweredByReceivedDiscount) {
    this.refundLoweredByReceivedDiscount = refundLoweredByReceivedDiscount;
    return this;
  }

  /**
   * If there was a discount granted after the order, the return is lowered by the received discount
   * @return refundLoweredByReceivedDiscount
   */
  @javax.annotation.Nonnull
  public Boolean getRefundLoweredByReceivedDiscount() {
    return refundLoweredByReceivedDiscount;
  }

  public void setRefundLoweredByReceivedDiscount(@javax.annotation.Nonnull Boolean refundLoweredByReceivedDiscount) {
    this.refundLoweredByReceivedDiscount = refundLoweredByReceivedDiscount;
  }


  public ReturnPolicyOptions businessReturnAllowed(@javax.annotation.Nonnull Boolean businessReturnAllowed) {
    this.businessReturnAllowed = businessReturnAllowed;
    return this;
  }

  /**
   * Returns for B2B purchases allowed
   * @return businessReturnAllowed
   */
  @javax.annotation.Nonnull
  public Boolean getBusinessReturnAllowed() {
    return businessReturnAllowed;
  }

  public void setBusinessReturnAllowed(@javax.annotation.Nonnull Boolean businessReturnAllowed) {
    this.businessReturnAllowed = businessReturnAllowed;
  }


  public ReturnPolicyOptions collectBySellerOnly(@javax.annotation.Nonnull Boolean collectBySellerOnly) {
    this.collectBySellerOnly = collectBySellerOnly;
    return this;
  }

  /**
   * Return items are picked up by the seller
   * @return collectBySellerOnly
   */
  @javax.annotation.Nonnull
  public Boolean getCollectBySellerOnly() {
    return collectBySellerOnly;
  }

  public void setCollectBySellerOnly(@javax.annotation.Nonnull Boolean collectBySellerOnly) {
    this.collectBySellerOnly = collectBySellerOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicyOptions returnPolicyOptions = (ReturnPolicyOptions) o;
    return Objects.equals(this.cashOnDeliveryNotAllowed, returnPolicyOptions.cashOnDeliveryNotAllowed) &&
        Objects.equals(this.freeAccessoriesReturnRequired, returnPolicyOptions.freeAccessoriesReturnRequired) &&
        Objects.equals(this.refundLoweredByReceivedDiscount, returnPolicyOptions.refundLoweredByReceivedDiscount) &&
        Objects.equals(this.businessReturnAllowed, returnPolicyOptions.businessReturnAllowed) &&
        Objects.equals(this.collectBySellerOnly, returnPolicyOptions.collectBySellerOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashOnDeliveryNotAllowed, freeAccessoriesReturnRequired, refundLoweredByReceivedDiscount, businessReturnAllowed, collectBySellerOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicyOptions {\n");
    sb.append("    cashOnDeliveryNotAllowed: ").append(toIndentedString(cashOnDeliveryNotAllowed)).append("\n");
    sb.append("    freeAccessoriesReturnRequired: ").append(toIndentedString(freeAccessoriesReturnRequired)).append("\n");
    sb.append("    refundLoweredByReceivedDiscount: ").append(toIndentedString(refundLoweredByReceivedDiscount)).append("\n");
    sb.append("    businessReturnAllowed: ").append(toIndentedString(businessReturnAllowed)).append("\n");
    sb.append("    collectBySellerOnly: ").append(toIndentedString(collectBySellerOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cashOnDeliveryNotAllowed");
    openapiFields.add("freeAccessoriesReturnRequired");
    openapiFields.add("refundLoweredByReceivedDiscount");
    openapiFields.add("businessReturnAllowed");
    openapiFields.add("collectBySellerOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cashOnDeliveryNotAllowed");
    openapiRequiredFields.add("freeAccessoriesReturnRequired");
    openapiRequiredFields.add("refundLoweredByReceivedDiscount");
    openapiRequiredFields.add("businessReturnAllowed");
    openapiRequiredFields.add("collectBySellerOnly");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicyOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicyOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicyOptions is not found in the empty JSON string", ReturnPolicyOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicyOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicyOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReturnPolicyOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicyOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicyOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicyOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicyOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicyOptions>() {
           @Override
           public void write(JsonWriter out, ReturnPolicyOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicyOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicyOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicyOptions
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicyOptions
   */
  public static ReturnPolicyOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicyOptions.class);
  }

  /**
   * Convert an instance of ReturnPolicyOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

