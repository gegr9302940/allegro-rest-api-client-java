/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ReceivingStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ReceivingStatus {
  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nullable
  private Integer quantity;

  /**
   * Received item condition.
   */
  @JsonAdapter(ReceivedTypeEnum.Adapter.class)
  public enum ReceivedTypeEnum {
    SELLABLE("SELLABLE"),
    
    DAMAGE("DAMAGE"),
    
    REJECT("REJECT");

    private String value;

    ReceivedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReceivedTypeEnum fromValue(String value) {
      for (ReceivedTypeEnum b : ReceivedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReceivedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReceivedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReceivedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReceivedTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReceivedTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECEIVED_TYPE = "receivedType";
  @SerializedName(SERIALIZED_NAME_RECEIVED_TYPE)
  @javax.annotation.Nullable
  private ReceivedTypeEnum receivedType;

  /**
   * The reasonCode indicates the condition of the product after unpacking. For sellable product is given the reasonCode SELLABLE. For a product that is not suitable for sale receives a code specifying a detailed reason for rejection, e.g. \&quot;DAMAGED_IN_TRANSPORT\&quot; or \&quot;NO_BARCODE\&quot;
   */
  @JsonAdapter(ReasonCodeEnum.Adapter.class)
  public enum ReasonCodeEnum {
    SELLABLE("SELLABLE"),
    
    DAMAGED_CARRIER_CLAIM("DAMAGED_CARRIER_CLAIM"),
    
    DAMAGED_IN_TRANSPORT("DAMAGED_IN_TRANSPORT"),
    
    NO_BARCODE("NO_BARCODE"),
    
    PRODUCT_NOT_ACCEPTABLE_IN_FULFILLMENT("PRODUCT_NOT_ACCEPTABLE_IN_FULFILLMENT"),
    
    SHORT_EXPIRY_DATE("SHORT_EXPIRY_DATE"),
    
    UNACCEPTABLE_HAZMAT("UNACCEPTABLE_HAZMAT"),
    
    UNACCEPTABLE_PRODUCT_SIZE("UNACCEPTABLE_PRODUCT_SIZE"),
    
    UNACCEPTABLE_PRODUCT_VARIANT("UNACCEPTABLE_PRODUCT_VARIANT"),
    
    UNSCANNABLE_BARCODE("UNSCANNABLE_BARCODE");

    private String value;

    ReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonCodeEnum fromValue(String value) {
      for (ReasonCodeEnum b : ReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  @javax.annotation.Nullable
  private ReasonCodeEnum reasonCode;

  public ReceivingStatus() {
  }

  public ReceivingStatus quantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Product quantity.
   * minimum: 0
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
  }


  public ReceivingStatus receivedType(@javax.annotation.Nullable ReceivedTypeEnum receivedType) {
    this.receivedType = receivedType;
    return this;
  }

  /**
   * Received item condition.
   * @return receivedType
   */
  @javax.annotation.Nullable
  public ReceivedTypeEnum getReceivedType() {
    return receivedType;
  }

  public void setReceivedType(@javax.annotation.Nullable ReceivedTypeEnum receivedType) {
    this.receivedType = receivedType;
  }


  public ReceivingStatus reasonCode(@javax.annotation.Nullable ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * The reasonCode indicates the condition of the product after unpacking. For sellable product is given the reasonCode SELLABLE. For a product that is not suitable for sale receives a code specifying a detailed reason for rejection, e.g. \&quot;DAMAGED_IN_TRANSPORT\&quot; or \&quot;NO_BARCODE\&quot;
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public ReasonCodeEnum getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(@javax.annotation.Nullable ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceivingStatus receivingStatus = (ReceivingStatus) o;
    return Objects.equals(this.quantity, receivingStatus.quantity) &&
        Objects.equals(this.receivedType, receivingStatus.receivedType) &&
        Objects.equals(this.reasonCode, receivingStatus.reasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, receivedType, reasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceivingStatus {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    receivedType: ").append(toIndentedString(receivedType)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantity");
    openapiFields.add("receivedType");
    openapiFields.add("reasonCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceivingStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceivingStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceivingStatus is not found in the empty JSON string", ReceivingStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceivingStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceivingStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("receivedType") != null && !jsonObj.get("receivedType").isJsonNull()) && !jsonObj.get("receivedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivedType").toString()));
      }
      // validate the optional field `receivedType`
      if (jsonObj.get("receivedType") != null && !jsonObj.get("receivedType").isJsonNull()) {
        ReceivedTypeEnum.validateJsonElement(jsonObj.get("receivedType"));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      // validate the optional field `reasonCode`
      if (jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) {
        ReasonCodeEnum.validateJsonElement(jsonObj.get("reasonCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceivingStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceivingStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceivingStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceivingStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceivingStatus>() {
           @Override
           public void write(JsonWriter out, ReceivingStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceivingStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceivingStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceivingStatus
   * @throws IOException if the JSON string is invalid with respect to ReceivingStatus
   */
  public static ReceivingStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceivingStatus.class);
  }

  /**
   * Convert an instance of ReceivingStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

