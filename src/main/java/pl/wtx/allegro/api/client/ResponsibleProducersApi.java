/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.CreateResponsibleProducerRequest;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.ResponsibleProducerResponse;
import pl.wtx.allegro.api.client.model.ResponsibleProducersGET200Response;
import java.util.UUID;
import pl.wtx.allegro.api.client.model.UpdateResponsibleProducerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResponsibleProducersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResponsibleProducersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResponsibleProducersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for responsibleProducerGET
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducerGETCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/responsible-producers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call responsibleProducerGETValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling responsibleProducerGET(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling responsibleProducerGET(Async)");
        }

        return responsibleProducerGETCall(id, accept, _callback);

    }

    /**
     * Get responsible producer
     * Use this resource to get a responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @return ResponsibleProducerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ResponsibleProducerResponse responsibleProducerGET(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept) throws ApiException {
        ApiResponse<ResponsibleProducerResponse> localVarResp = responsibleProducerGETWithHttpInfo(id, accept);
        return localVarResp.getData();
    }

    /**
     * Get responsible producer
     * Use this resource to get a responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @return ApiResponse&lt;ResponsibleProducerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsibleProducerResponse> responsibleProducerGETWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept) throws ApiException {
        okhttp3.Call localVarCall = responsibleProducerGETValidateBeforeCall(id, accept, null);
        Type localVarReturnType = new TypeToken<ResponsibleProducerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get responsible producer (asynchronously)
     * Use this resource to get a responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducerGETAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, final ApiCallback<ResponsibleProducerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = responsibleProducerGETValidateBeforeCall(id, accept, _callback);
        Type localVarReturnType = new TypeToken<ResponsibleProducerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for responsibleProducersGET
     * @param accept Acceptable representation of the response. (required)
     * @param offset Index of first returned responsible producers data from all search results. (optional, default to 0)
     * @param limit Number of returned responsible producers data. (optional, default to 1000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducersGETCall(@javax.annotation.Nonnull String accept, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/responsible-producers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call responsibleProducersGETValidateBeforeCall(@javax.annotation.Nonnull String accept, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling responsibleProducersGET(Async)");
        }

        return responsibleProducersGETCall(accept, offset, limit, _callback);

    }

    /**
     * Get the list of responsible producers
     * Use this resource to get a list of responsible producers for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param accept Acceptable representation of the response. (required)
     * @param offset Index of first returned responsible producers data from all search results. (optional, default to 0)
     * @param limit Number of returned responsible producers data. (optional, default to 1000)
     * @return ResponsibleProducersGET200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ResponsibleProducersGET200Response responsibleProducersGET(@javax.annotation.Nonnull String accept, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<ResponsibleProducersGET200Response> localVarResp = responsibleProducersGETWithHttpInfo(accept, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get the list of responsible producers
     * Use this resource to get a list of responsible producers for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param accept Acceptable representation of the response. (required)
     * @param offset Index of first returned responsible producers data from all search results. (optional, default to 0)
     * @param limit Number of returned responsible producers data. (optional, default to 1000)
     * @return ApiResponse&lt;ResponsibleProducersGET200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsibleProducersGET200Response> responsibleProducersGETWithHttpInfo(@javax.annotation.Nonnull String accept, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = responsibleProducersGETValidateBeforeCall(accept, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResponsibleProducersGET200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of responsible producers (asynchronously)
     * Use this resource to get a list of responsible producers for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param accept Acceptable representation of the response. (required)
     * @param offset Index of first returned responsible producers data from all search results. (optional, default to 0)
     * @param limit Number of returned responsible producers data. (optional, default to 1000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducersGETAsync(@javax.annotation.Nonnull String accept, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<ResponsibleProducersGET200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = responsibleProducersGETValidateBeforeCall(accept, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResponsibleProducersGET200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for responsibleProducersPOST
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param createResponsibleProducerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducersPOSTCall(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull CreateResponsibleProducerRequest createResponsibleProducerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createResponsibleProducerRequest;

        // create path and map variables
        String localVarPath = "/sale/responsible-producers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call responsibleProducersPOSTValidateBeforeCall(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull CreateResponsibleProducerRequest createResponsibleProducerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling responsibleProducersPOST(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling responsibleProducersPOST(Async)");
        }

        // verify the required parameter 'createResponsibleProducerRequest' is set
        if (createResponsibleProducerRequest == null) {
            throw new ApiException("Missing the required parameter 'createResponsibleProducerRequest' when calling responsibleProducersPOST(Async)");
        }

        return responsibleProducersPOSTCall(accept, contentType, createResponsibleProducerRequest, _callback);

    }

    /**
     * Create responsible producer
     * Use this resource to create a new responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param createResponsibleProducerRequest  (required)
     * @return ResponsibleProducerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ResponsibleProducerResponse responsibleProducersPOST(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull CreateResponsibleProducerRequest createResponsibleProducerRequest) throws ApiException {
        ApiResponse<ResponsibleProducerResponse> localVarResp = responsibleProducersPOSTWithHttpInfo(accept, contentType, createResponsibleProducerRequest);
        return localVarResp.getData();
    }

    /**
     * Create responsible producer
     * Use this resource to create a new responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param createResponsibleProducerRequest  (required)
     * @return ApiResponse&lt;ResponsibleProducerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsibleProducerResponse> responsibleProducersPOSTWithHttpInfo(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull CreateResponsibleProducerRequest createResponsibleProducerRequest) throws ApiException {
        okhttp3.Call localVarCall = responsibleProducersPOSTValidateBeforeCall(accept, contentType, createResponsibleProducerRequest, null);
        Type localVarReturnType = new TypeToken<ResponsibleProducerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create responsible producer (asynchronously)
     * Use this resource to create a new responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param createResponsibleProducerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducersPOSTAsync(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull CreateResponsibleProducerRequest createResponsibleProducerRequest, final ApiCallback<ResponsibleProducerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = responsibleProducersPOSTValidateBeforeCall(accept, contentType, createResponsibleProducerRequest, _callback);
        Type localVarReturnType = new TypeToken<ResponsibleProducerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for responsibleProducersPUT
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param updateResponsibleProducerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducersPUTCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull UpdateResponsibleProducerRequest updateResponsibleProducerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateResponsibleProducerRequest;

        // create path and map variables
        String localVarPath = "/sale/responsible-producers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call responsibleProducersPUTValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull UpdateResponsibleProducerRequest updateResponsibleProducerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling responsibleProducersPUT(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling responsibleProducersPUT(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling responsibleProducersPUT(Async)");
        }

        // verify the required parameter 'updateResponsibleProducerRequest' is set
        if (updateResponsibleProducerRequest == null) {
            throw new ApiException("Missing the required parameter 'updateResponsibleProducerRequest' when calling responsibleProducersPUT(Async)");
        }

        return responsibleProducersPUTCall(id, accept, contentType, updateResponsibleProducerRequest, _callback);

    }

    /**
     * Update responsible producer
     * Use this resource to update the responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param updateResponsibleProducerRequest  (required)
     * @return ResponsibleProducerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ResponsibleProducerResponse responsibleProducersPUT(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull UpdateResponsibleProducerRequest updateResponsibleProducerRequest) throws ApiException {
        ApiResponse<ResponsibleProducerResponse> localVarResp = responsibleProducersPUTWithHttpInfo(id, accept, contentType, updateResponsibleProducerRequest);
        return localVarResp.getData();
    }

    /**
     * Update responsible producer
     * Use this resource to update the responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param updateResponsibleProducerRequest  (required)
     * @return ApiResponse&lt;ResponsibleProducerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsibleProducerResponse> responsibleProducersPUTWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull UpdateResponsibleProducerRequest updateResponsibleProducerRequest) throws ApiException {
        okhttp3.Call localVarCall = responsibleProducersPUTValidateBeforeCall(id, accept, contentType, updateResponsibleProducerRequest, null);
        Type localVarReturnType = new TypeToken<ResponsibleProducerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update responsible producer (asynchronously)
     * Use this resource to update the responsible producer for the compliance of the product with EU regulations. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#dane-teleadresowe-producenta\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#responsible-producers-contact-information\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param id Responsible producer ID. (required)
     * @param accept Acceptable representation of the response. (required)
     * @param contentType Content type of the request body. (required)
     * @param updateResponsibleProducerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responsibleProducersPUTAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull UpdateResponsibleProducerRequest updateResponsibleProducerRequest, final ApiCallback<ResponsibleProducerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = responsibleProducersPUTValidateBeforeCall(id, accept, contentType, updateResponsibleProducerRequest, _callback);
        Type localVarReturnType = new TypeToken<ResponsibleProducerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
