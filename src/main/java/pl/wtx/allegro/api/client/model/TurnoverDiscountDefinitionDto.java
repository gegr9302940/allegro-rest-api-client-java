/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.allegro.api.client.model.TurnoverDiscountThresholdDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Turnover discount definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class TurnoverDiscountDefinitionDto {
  public static final String SERIALIZED_NAME_CUMULATING_FROM_DATE = "cumulatingFromDate";
  @SerializedName(SERIALIZED_NAME_CUMULATING_FROM_DATE)
  @javax.annotation.Nullable
  private LocalDate cumulatingFromDate;

  public static final String SERIALIZED_NAME_CUMULATING_TO_DATE = "cumulatingToDate";
  @SerializedName(SERIALIZED_NAME_CUMULATING_TO_DATE)
  @javax.annotation.Nullable
  private LocalDate cumulatingToDate;

  public static final String SERIALIZED_NAME_SPENDING_FROM_DATE = "spendingFromDate";
  @SerializedName(SERIALIZED_NAME_SPENDING_FROM_DATE)
  @javax.annotation.Nullable
  private LocalDate spendingFromDate;

  public static final String SERIALIZED_NAME_SPENDING_TO_DATE = "spendingToDate";
  @SerializedName(SERIALIZED_NAME_SPENDING_TO_DATE)
  @javax.annotation.Nullable
  private LocalDate spendingToDate;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_THRESHOLDS = "thresholds";
  @SerializedName(SERIALIZED_NAME_THRESHOLDS)
  @javax.annotation.Nullable
  private List<TurnoverDiscountThresholdDto> thresholds = new ArrayList<>();

  public TurnoverDiscountDefinitionDto() {
  }

  public TurnoverDiscountDefinitionDto cumulatingFromDate(@javax.annotation.Nullable LocalDate cumulatingFromDate) {
    this.cumulatingFromDate = cumulatingFromDate;
    return this;
  }

  /**
   * First day of cumulating turnover against definition.
   * @return cumulatingFromDate
   */
  @javax.annotation.Nullable
  public LocalDate getCumulatingFromDate() {
    return cumulatingFromDate;
  }

  public void setCumulatingFromDate(@javax.annotation.Nullable LocalDate cumulatingFromDate) {
    this.cumulatingFromDate = cumulatingFromDate;
  }


  public TurnoverDiscountDefinitionDto cumulatingToDate(@javax.annotation.Nullable LocalDate cumulatingToDate) {
    this.cumulatingToDate = cumulatingToDate;
    return this;
  }

  /**
   * First day when cumulating turnover against definition is no longer happening. If empty - cumulating turnover will be continued indefinitely.
   * @return cumulatingToDate
   */
  @javax.annotation.Nullable
  public LocalDate getCumulatingToDate() {
    return cumulatingToDate;
  }

  public void setCumulatingToDate(@javax.annotation.Nullable LocalDate cumulatingToDate) {
    this.cumulatingToDate = cumulatingToDate;
  }


  public TurnoverDiscountDefinitionDto spendingFromDate(@javax.annotation.Nullable LocalDate spendingFromDate) {
    this.spendingFromDate = spendingFromDate;
    return this;
  }

  /**
   * First day of applying discount from this definition based on cumulated turnover.
   * @return spendingFromDate
   */
  @javax.annotation.Nullable
  public LocalDate getSpendingFromDate() {
    return spendingFromDate;
  }

  public void setSpendingFromDate(@javax.annotation.Nullable LocalDate spendingFromDate) {
    this.spendingFromDate = spendingFromDate;
  }


  public TurnoverDiscountDefinitionDto spendingToDate(@javax.annotation.Nullable LocalDate spendingToDate) {
    this.spendingToDate = spendingToDate;
    return this;
  }

  /**
   * First day when applying discount from definition is no longer happening. If empty - applying discount will be continued indefinitely.
   * @return spendingToDate
   */
  @javax.annotation.Nullable
  public LocalDate getSpendingToDate() {
    return spendingToDate;
  }

  public void setSpendingToDate(@javax.annotation.Nullable LocalDate spendingToDate) {
    this.spendingToDate = spendingToDate;
  }


  public TurnoverDiscountDefinitionDto createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date of the definition.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TurnoverDiscountDefinitionDto updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Last update date of the definition.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TurnoverDiscountDefinitionDto thresholds(@javax.annotation.Nullable List<TurnoverDiscountThresholdDto> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public TurnoverDiscountDefinitionDto addThresholdsItem(TurnoverDiscountThresholdDto thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new ArrayList<>();
    }
    this.thresholds.add(thresholdsItem);
    return this;
  }

  /**
   * Turnover discount thresholds.
   * @return thresholds
   */
  @javax.annotation.Nullable
  public List<TurnoverDiscountThresholdDto> getThresholds() {
    return thresholds;
  }

  public void setThresholds(@javax.annotation.Nullable List<TurnoverDiscountThresholdDto> thresholds) {
    this.thresholds = thresholds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TurnoverDiscountDefinitionDto turnoverDiscountDefinitionDto = (TurnoverDiscountDefinitionDto) o;
    return Objects.equals(this.cumulatingFromDate, turnoverDiscountDefinitionDto.cumulatingFromDate) &&
        Objects.equals(this.cumulatingToDate, turnoverDiscountDefinitionDto.cumulatingToDate) &&
        Objects.equals(this.spendingFromDate, turnoverDiscountDefinitionDto.spendingFromDate) &&
        Objects.equals(this.spendingToDate, turnoverDiscountDefinitionDto.spendingToDate) &&
        Objects.equals(this.createdAt, turnoverDiscountDefinitionDto.createdAt) &&
        Objects.equals(this.updatedAt, turnoverDiscountDefinitionDto.updatedAt) &&
        Objects.equals(this.thresholds, turnoverDiscountDefinitionDto.thresholds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cumulatingFromDate, cumulatingToDate, spendingFromDate, spendingToDate, createdAt, updatedAt, thresholds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TurnoverDiscountDefinitionDto {\n");
    sb.append("    cumulatingFromDate: ").append(toIndentedString(cumulatingFromDate)).append("\n");
    sb.append("    cumulatingToDate: ").append(toIndentedString(cumulatingToDate)).append("\n");
    sb.append("    spendingFromDate: ").append(toIndentedString(spendingFromDate)).append("\n");
    sb.append("    spendingToDate: ").append(toIndentedString(spendingToDate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cumulatingFromDate");
    openapiFields.add("cumulatingToDate");
    openapiFields.add("spendingFromDate");
    openapiFields.add("spendingToDate");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("thresholds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TurnoverDiscountDefinitionDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TurnoverDiscountDefinitionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TurnoverDiscountDefinitionDto is not found in the empty JSON string", TurnoverDiscountDefinitionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TurnoverDiscountDefinitionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TurnoverDiscountDefinitionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("thresholds") != null && !jsonObj.get("thresholds").isJsonNull()) {
        JsonArray jsonArraythresholds = jsonObj.getAsJsonArray("thresholds");
        if (jsonArraythresholds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thresholds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thresholds` to be an array in the JSON string but got `%s`", jsonObj.get("thresholds").toString()));
          }

          // validate the optional field `thresholds` (array)
          for (int i = 0; i < jsonArraythresholds.size(); i++) {
            TurnoverDiscountThresholdDto.validateJsonElement(jsonArraythresholds.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TurnoverDiscountDefinitionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TurnoverDiscountDefinitionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TurnoverDiscountDefinitionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TurnoverDiscountDefinitionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TurnoverDiscountDefinitionDto>() {
           @Override
           public void write(JsonWriter out, TurnoverDiscountDefinitionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TurnoverDiscountDefinitionDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TurnoverDiscountDefinitionDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TurnoverDiscountDefinitionDto
   * @throws IOException if the JSON string is invalid with respect to TurnoverDiscountDefinitionDto
   */
  public static TurnoverDiscountDefinitionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TurnoverDiscountDefinitionDto.class);
  }

  /**
   * Convert an instance of TurnoverDiscountDefinitionDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

