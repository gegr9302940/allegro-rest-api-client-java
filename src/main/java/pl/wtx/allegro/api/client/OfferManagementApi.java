/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.AvailablePromotionPackages;
import pl.wtx.allegro.api.client.model.ChangePrice;
import pl.wtx.allegro.api.client.model.ChangePriceWithoutOutput;
import pl.wtx.allegro.api.client.model.CreateProductOffers422Response;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.GeneralReport;
import pl.wtx.allegro.api.client.model.OfferPromoOptions;
import pl.wtx.allegro.api.client.model.OfferPromoOptionsForSeller;
import pl.wtx.allegro.api.client.model.PromoGeneralReport;
import pl.wtx.allegro.api.client.model.PromoModificationReport;
import pl.wtx.allegro.api.client.model.PromoOptionsCommand;
import pl.wtx.allegro.api.client.model.PromoOptionsModifications;
import pl.wtx.allegro.api.client.model.PublicationChangeCommandDto;
import pl.wtx.allegro.api.client.model.SaleProductOfferPatchRequestV1;
import pl.wtx.allegro.api.client.model.SaleProductOfferRequestV1;
import pl.wtx.allegro.api.client.model.SaleProductOfferResponseV1;
import pl.wtx.allegro.api.client.model.SaleProductOfferStatusResponse;
import pl.wtx.allegro.api.client.model.TaskReport;
import java.util.UUID;
import pl.wtx.allegro.api.client.model.UnfilledParametersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OfferManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OfferManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OfferManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePublicationStatusUsingPUT
     * @param commandId Command identifier. (required)
     * @param publicationChangeCommandDto publicationChangeCommandDto (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePublicationStatusUsingPUTCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PublicationChangeCommandDto publicationChangeCommandDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicationChangeCommandDto;

        // create path and map variables
        String localVarPath = "/sale/offer-publication-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePublicationStatusUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PublicationChangeCommandDto publicationChangeCommandDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling changePublicationStatusUsingPUT(Async)");
        }

        // verify the required parameter 'publicationChangeCommandDto' is set
        if (publicationChangeCommandDto == null) {
            throw new ApiException("Missing the required parameter 'publicationChangeCommandDto' when calling changePublicationStatusUsingPUT(Async)");
        }

        return changePublicationStatusUsingPUTCall(commandId, publicationChangeCommandDto, _callback);

    }

    /**
     * Batch offer publish / unpublish
     * Use this resource to modify multiple offers publication at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250Â 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param publicationChangeCommandDto publicationChangeCommandDto (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport changePublicationStatusUsingPUT(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PublicationChangeCommandDto publicationChangeCommandDto) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = changePublicationStatusUsingPUTWithHttpInfo(commandId, publicationChangeCommandDto);
        return localVarResp.getData();
    }

    /**
     * Batch offer publish / unpublish
     * Use this resource to modify multiple offers publication at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250Â 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param publicationChangeCommandDto publicationChangeCommandDto (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> changePublicationStatusUsingPUTWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PublicationChangeCommandDto publicationChangeCommandDto) throws ApiException {
        okhttp3.Call localVarCall = changePublicationStatusUsingPUTValidateBeforeCall(commandId, publicationChangeCommandDto, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch offer publish / unpublish (asynchronously)
     * Use this resource to modify multiple offers publication at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250Â 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param publicationChangeCommandDto publicationChangeCommandDto (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePublicationStatusUsingPUTAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PublicationChangeCommandDto publicationChangeCommandDto, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePublicationStatusUsingPUTValidateBeforeCall(commandId, publicationChangeCommandDto, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChangePriceCommandUsingPUT
     * @param offerId The offer identifier. (required)
     * @param commandId The unique command id generated by you. (required)
     * @param changePriceWithoutOutput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The command was created successfully and is queued for processing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An immediate error response is returned whether the command input data is not valid or there is an internal problem with our systems. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChangePriceCommandUsingPUTCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull ChangePriceWithoutOutput changePriceWithoutOutput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePriceWithoutOutput;

        // create path and map variables
        String localVarPath = "/offers/{offerId}/change-price-commands/{commandId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChangePriceCommandUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull ChangePriceWithoutOutput changePriceWithoutOutput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling createChangePriceCommandUsingPUT(Async)");
        }

        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling createChangePriceCommandUsingPUT(Async)");
        }

        // verify the required parameter 'changePriceWithoutOutput' is set
        if (changePriceWithoutOutput == null) {
            throw new ApiException("Missing the required parameter 'changePriceWithoutOutput' when calling createChangePriceCommandUsingPUT(Async)");
        }

        return createChangePriceCommandUsingPUTCall(offerId, commandId, changePriceWithoutOutput, _callback);

    }

    /**
     * Modify the Buy Now price in an offer
     * Use this resource to change the Buy Now price in a single offer. Read more: &lt;a href&#x3D;\&quot;../../news/mozliwosc-zmiany-ceny-kup-teraz-2YzrKRrr3Sl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/possibility-to-change-the-buy-it-now-price-q018mq8D2hW\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId The offer identifier. (required)
     * @param commandId The unique command id generated by you. (required)
     * @param changePriceWithoutOutput  (required)
     * @return ChangePrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The command was created successfully and is queued for processing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An immediate error response is returned whether the command input data is not valid or there is an internal problem with our systems. </td><td>  -  </td></tr>
     </table>
     */
    public ChangePrice createChangePriceCommandUsingPUT(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull ChangePriceWithoutOutput changePriceWithoutOutput) throws ApiException {
        ApiResponse<ChangePrice> localVarResp = createChangePriceCommandUsingPUTWithHttpInfo(offerId, commandId, changePriceWithoutOutput);
        return localVarResp.getData();
    }

    /**
     * Modify the Buy Now price in an offer
     * Use this resource to change the Buy Now price in a single offer. Read more: &lt;a href&#x3D;\&quot;../../news/mozliwosc-zmiany-ceny-kup-teraz-2YzrKRrr3Sl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/possibility-to-change-the-buy-it-now-price-q018mq8D2hW\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId The offer identifier. (required)
     * @param commandId The unique command id generated by you. (required)
     * @param changePriceWithoutOutput  (required)
     * @return ApiResponse&lt;ChangePrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The command was created successfully and is queued for processing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An immediate error response is returned whether the command input data is not valid or there is an internal problem with our systems. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangePrice> createChangePriceCommandUsingPUTWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull ChangePriceWithoutOutput changePriceWithoutOutput) throws ApiException {
        okhttp3.Call localVarCall = createChangePriceCommandUsingPUTValidateBeforeCall(offerId, commandId, changePriceWithoutOutput, null);
        Type localVarReturnType = new TypeToken<ChangePrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the Buy Now price in an offer (asynchronously)
     * Use this resource to change the Buy Now price in a single offer. Read more: &lt;a href&#x3D;\&quot;../../news/mozliwosc-zmiany-ceny-kup-teraz-2YzrKRrr3Sl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/possibility-to-change-the-buy-it-now-price-q018mq8D2hW\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId The offer identifier. (required)
     * @param commandId The unique command id generated by you. (required)
     * @param changePriceWithoutOutput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The command was created successfully and is queued for processing. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An immediate error response is returned whether the command input data is not valid or there is an internal problem with our systems. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChangePriceCommandUsingPUTAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull UUID commandId, @javax.annotation.Nonnull ChangePriceWithoutOutput changePriceWithoutOutput, final ApiCallback<ChangePrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChangePriceCommandUsingPUTValidateBeforeCall(offerId, commandId, changePriceWithoutOutput, _callback);
        Type localVarReturnType = new TypeToken<ChangePrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProductOffers
     * @param saleProductOfferRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The product-offer creation request has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductOffersCall(@javax.annotation.Nonnull SaleProductOfferRequestV1 saleProductOfferRequestV1, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saleProductOfferRequestV1;

        // create path and map variables
        String localVarPath = "/sale/product-offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductOffersValidateBeforeCall(@javax.annotation.Nonnull SaleProductOfferRequestV1 saleProductOfferRequestV1, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'saleProductOfferRequestV1' is set
        if (saleProductOfferRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'saleProductOfferRequestV1' when calling createProductOffers(Async)");
        }

        return createProductOffersCall(saleProductOfferRequestV1, acceptLanguage, _callback);

    }

    /**
     * Create offer based on product
     * Use this resource to create offer based on product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-wystawic-oferte-z-produktem-za-pomoca-zasobu-sale-product-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-list-an-offer-with-a-product-via-sale-product-offers-resource\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Note that requests may be limited.
     * @param saleProductOfferRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return SaleProductOfferResponseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The product-offer creation request has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public SaleProductOfferResponseV1 createProductOffers(@javax.annotation.Nonnull SaleProductOfferRequestV1 saleProductOfferRequestV1, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<SaleProductOfferResponseV1> localVarResp = createProductOffersWithHttpInfo(saleProductOfferRequestV1, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Create offer based on product
     * Use this resource to create offer based on product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-wystawic-oferte-z-produktem-za-pomoca-zasobu-sale-product-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-list-an-offer-with-a-product-via-sale-product-offers-resource\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Note that requests may be limited.
     * @param saleProductOfferRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ApiResponse&lt;SaleProductOfferResponseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The product-offer creation request has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaleProductOfferResponseV1> createProductOffersWithHttpInfo(@javax.annotation.Nonnull SaleProductOfferRequestV1 saleProductOfferRequestV1, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = createProductOffersValidateBeforeCall(saleProductOfferRequestV1, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<SaleProductOfferResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create offer based on product (asynchronously)
     * Use this resource to create offer based on product. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-wystawic-oferte-z-produktem-za-pomoca-zasobu-sale-product-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-list-an-offer-with-a-product-via-sale-product-offers-resource\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Note that requests may be limited.
     * @param saleProductOfferRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The product-offer creation request has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductOffersAsync(@javax.annotation.Nonnull SaleProductOfferRequestV1 saleProductOfferRequestV1, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<SaleProductOfferResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductOffersValidateBeforeCall(saleProductOfferRequestV1, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<SaleProductOfferResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOfferUsingDELETE
     * @param offerId Offer identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOfferUsingDELETECall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/{offerId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOfferUsingDELETEValidateBeforeCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling deleteOfferUsingDELETE(Async)");
        }

        return deleteOfferUsingDELETECall(offerId, _callback);

    }

    /**
     * Delete a draft offer
     * Use this resource to delete a draft offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowy-zasob-do-usuwania-draftow-ofert-aMDnGka2RuL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resource-draft-delete-yPy9lq6myh0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOfferUsingDELETE(@javax.annotation.Nonnull String offerId) throws ApiException {
        deleteOfferUsingDELETEWithHttpInfo(offerId);
    }

    /**
     * Delete a draft offer
     * Use this resource to delete a draft offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowy-zasob-do-usuwania-draftow-ofert-aMDnGka2RuL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resource-draft-delete-yPy9lq6myh0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOfferUsingDELETEWithHttpInfo(@javax.annotation.Nonnull String offerId) throws ApiException {
        okhttp3.Call localVarCall = deleteOfferUsingDELETEValidateBeforeCall(offerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a draft offer (asynchronously)
     * Use this resource to delete a draft offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowy-zasob-do-usuwania-draftow-ofert-aMDnGka2RuL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resource-draft-delete-yPy9lq6myh0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOfferUsingDELETEAsync(@javax.annotation.Nonnull String offerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOfferUsingDELETEValidateBeforeCall(offerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editProductOffers
     * @param offerId The offer identifier. (required)
     * @param saleProductOfferPatchRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer edited successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to edit product-offer has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Offer not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. The current state of the offer does not allow to perform the request (e.g. The previous edition of the offer is still being processed). </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editProductOffersCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull SaleProductOfferPatchRequestV1 saleProductOfferPatchRequestV1, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saleProductOfferPatchRequestV1;

        // create path and map variables
        String localVarPath = "/sale/product-offers/{offerId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editProductOffersValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull SaleProductOfferPatchRequestV1 saleProductOfferPatchRequestV1, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling editProductOffers(Async)");
        }

        // verify the required parameter 'saleProductOfferPatchRequestV1' is set
        if (saleProductOfferPatchRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'saleProductOfferPatchRequestV1' when calling editProductOffers(Async)");
        }

        return editProductOffersCall(offerId, saleProductOfferPatchRequestV1, acceptLanguage, _callback);

    }

    /**
     * Edit an offer
     * Use this resource to edit offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-pojedynczej-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-single-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Note that requests may be limited.
     * @param offerId The offer identifier. (required)
     * @param saleProductOfferPatchRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return SaleProductOfferResponseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer edited successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to edit product-offer has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Offer not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. The current state of the offer does not allow to perform the request (e.g. The previous edition of the offer is still being processed). </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public SaleProductOfferResponseV1 editProductOffers(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull SaleProductOfferPatchRequestV1 saleProductOfferPatchRequestV1, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<SaleProductOfferResponseV1> localVarResp = editProductOffersWithHttpInfo(offerId, saleProductOfferPatchRequestV1, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Edit an offer
     * Use this resource to edit offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-pojedynczej-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-single-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Note that requests may be limited.
     * @param offerId The offer identifier. (required)
     * @param saleProductOfferPatchRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ApiResponse&lt;SaleProductOfferResponseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer edited successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to edit product-offer has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Offer not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. The current state of the offer does not allow to perform the request (e.g. The previous edition of the offer is still being processed). </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaleProductOfferResponseV1> editProductOffersWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull SaleProductOfferPatchRequestV1 saleProductOfferPatchRequestV1, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = editProductOffersValidateBeforeCall(offerId, saleProductOfferPatchRequestV1, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<SaleProductOfferResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an offer (asynchronously)
     * Use this resource to edit offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-pojedynczej-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-single-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Note that requests may be limited.
     * @param offerId The offer identifier. (required)
     * @param saleProductOfferPatchRequestV1  (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer edited successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to edit product-offer has been accepted for processing, but the processing has not been completed. </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  * Retry-after - An estimate time in seconds of when you should poll the location uri to get the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - not allowed to access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Offer not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. The current state of the offer does not allow to perform the request (e.g. The previous edition of the offer is still being processed). </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editProductOffersAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull SaleProductOfferPatchRequestV1 saleProductOfferPatchRequestV1, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<SaleProductOfferResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = editProductOffersValidateBeforeCall(offerId, saleProductOfferPatchRequestV1, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<SaleProductOfferResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableOfferPromotionPackages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableOfferPromotionPackagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-promotion-packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableOfferPromotionPackagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAvailableOfferPromotionPackagesCall(_callback);

    }

    /**
     * Get all available offer promotion packages
     * Use this resource to retrieve all available offer promotion packages. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-dostepne-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return AvailablePromotionPackages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public AvailablePromotionPackages getAvailableOfferPromotionPackages() throws ApiException {
        ApiResponse<AvailablePromotionPackages> localVarResp = getAvailableOfferPromotionPackagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all available offer promotion packages
     * Use this resource to retrieve all available offer promotion packages. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-dostepne-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return ApiResponse&lt;AvailablePromotionPackages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AvailablePromotionPackages> getAvailableOfferPromotionPackagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAvailableOfferPromotionPackagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AvailablePromotionPackages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all available offer promotion packages (asynchronously)
     * Use this resource to retrieve all available offer promotion packages. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-dostepne-opcje-promowania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableOfferPromotionPackagesAsync(final ApiCallback<AvailablePromotionPackages> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableOfferPromotionPackagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AvailablePromotionPackages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOfferPromoOptionsUsingGET
     * @param offerId Offer identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferPromoOptionsUsingGETCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/{offerId}/promo-options"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferPromoOptionsUsingGETValidateBeforeCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getOfferPromoOptionsUsingGET(Async)");
        }

        return getOfferPromoOptionsUsingGETCall(offerId, _callback);

    }

    /**
     * Get offer promotion packages
     * Use this resource to get promotion packages assigned to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-przypisane-do-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-promo-options-assigned-to-an-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @return OfferPromoOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
     </table>
     */
    public OfferPromoOptions getOfferPromoOptionsUsingGET(@javax.annotation.Nonnull String offerId) throws ApiException {
        ApiResponse<OfferPromoOptions> localVarResp = getOfferPromoOptionsUsingGETWithHttpInfo(offerId);
        return localVarResp.getData();
    }

    /**
     * Get offer promotion packages
     * Use this resource to get promotion packages assigned to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-przypisane-do-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-promo-options-assigned-to-an-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @return ApiResponse&lt;OfferPromoOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferPromoOptions> getOfferPromoOptionsUsingGETWithHttpInfo(@javax.annotation.Nonnull String offerId) throws ApiException {
        okhttp3.Call localVarCall = getOfferPromoOptionsUsingGETValidateBeforeCall(offerId, null);
        Type localVarReturnType = new TypeToken<OfferPromoOptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get offer promotion packages (asynchronously)
     * Use this resource to get promotion packages assigned to an offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-przypisane-do-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-promo-options-assigned-to-an-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferPromoOptionsUsingGETAsync(@javax.annotation.Nonnull String offerId, final ApiCallback<OfferPromoOptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfferPromoOptionsUsingGETValidateBeforeCall(offerId, _callback);
        Type localVarReturnType = new TypeToken<OfferPromoOptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOffersUnfilledParametersUsingGET1
     * @param offerId List of offer ids. If empty all offers with unfilled parameters will be returned. (optional)
     * @param parameterType Filter by parameter type. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unfilled offer parameters were returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersUnfilledParametersUsingGET1Call(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String parameterType, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/unfilled-parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "offer.id", offerId));
        }

        if (parameterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterType", parameterType));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOffersUnfilledParametersUsingGET1ValidateBeforeCall(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String parameterType, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getOffersUnfilledParametersUsingGET1Call(offerId, parameterType, offset, limit, _callback);

    }

    /**
     * Get offers with missing parameters
     * Use this resource to get information about required parameters or parameters scheduled to become required that are not filled in offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-nieuzupelnione-parametry-w-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-unfilled-parameters-in-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer ids. If empty all offers with unfilled parameters will be returned. (optional)
     * @param parameterType Filter by parameter type. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @return UnfilledParametersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unfilled offer parameters were returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public UnfilledParametersResponse getOffersUnfilledParametersUsingGET1(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String parameterType, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<UnfilledParametersResponse> localVarResp = getOffersUnfilledParametersUsingGET1WithHttpInfo(offerId, parameterType, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get offers with missing parameters
     * Use this resource to get information about required parameters or parameters scheduled to become required that are not filled in offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-nieuzupelnione-parametry-w-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-unfilled-parameters-in-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer ids. If empty all offers with unfilled parameters will be returned. (optional)
     * @param parameterType Filter by parameter type. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @return ApiResponse&lt;UnfilledParametersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unfilled offer parameters were returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnfilledParametersResponse> getOffersUnfilledParametersUsingGET1WithHttpInfo(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String parameterType, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getOffersUnfilledParametersUsingGET1ValidateBeforeCall(offerId, parameterType, offset, limit, null);
        Type localVarReturnType = new TypeToken<UnfilledParametersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get offers with missing parameters (asynchronously)
     * Use this resource to get information about required parameters or parameters scheduled to become required that are not filled in offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-nieuzupelnione-parametry-w-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-unfilled-parameters-in-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId List of offer ids. If empty all offers with unfilled parameters will be returned. (optional)
     * @param parameterType Filter by parameter type. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unfilled offer parameters were returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersUnfilledParametersUsingGET1Async(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String parameterType, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<UnfilledParametersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOffersUnfilledParametersUsingGET1ValidateBeforeCall(offerId, parameterType, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<UnfilledParametersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductOfferProcessingStatus
     * @param offerId Offer identifier. (required)
     * @param operationId Operation identifier provided in location header of POST or PATCH request. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> The processing of product-offer has been completed. The Location header provide information about the location of processed resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductOfferProcessingStatusCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String operationId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/product-offers/{offerId}/operations/{operationId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductOfferProcessingStatusValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String operationId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getProductOfferProcessingStatus(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling getProductOfferProcessingStatus(Async)");
        }

        return getProductOfferProcessingStatusCall(offerId, operationId, acceptLanguage, _callback);

    }

    /**
     * Check the processing status of a POST or PATCH request
     * The URI for the resource given by Location header of POST /sale/product-offers and PATCH /sale/product-offers/{offerId}. Use this resource to check processing status of a POST or PATCH request. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param operationId Operation identifier provided in location header of POST or PATCH request. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return SaleProductOfferStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> The processing of product-offer has been completed. The Location header provide information about the location of processed resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SaleProductOfferStatusResponse getProductOfferProcessingStatus(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String operationId, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<SaleProductOfferStatusResponse> localVarResp = getProductOfferProcessingStatusWithHttpInfo(offerId, operationId, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Check the processing status of a POST or PATCH request
     * The URI for the resource given by Location header of POST /sale/product-offers and PATCH /sale/product-offers/{offerId}. Use this resource to check processing status of a POST or PATCH request. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param operationId Operation identifier provided in location header of POST or PATCH request. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ApiResponse&lt;SaleProductOfferStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> The processing of product-offer has been completed. The Location header provide information about the location of processed resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaleProductOfferStatusResponse> getProductOfferProcessingStatusWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String operationId, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getProductOfferProcessingStatusValidateBeforeCall(offerId, operationId, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<SaleProductOfferStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check the processing status of a POST or PATCH request (asynchronously)
     * The URI for the resource given by Location header of POST /sale/product-offers and PATCH /sale/product-offers/{offerId}. Use this resource to check processing status of a POST or PATCH request. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param operationId Operation identifier provided in location header of POST or PATCH request. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> The processing of product-offer has been completed. The Location header provide information about the location of processed resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductOfferProcessingStatusAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull String operationId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<SaleProductOfferStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductOfferProcessingStatusValidateBeforeCall(offerId, operationId, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<SaleProductOfferStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPromoModificationCommandDetailedResultUsingGET
     * @param commandId Command identifier. (required)
     * @param limit The limit of returned items. (optional, default to 100)
     * @param offset The offset of returned items. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromoModificationCommandDetailedResultUsingGETCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/promo-options-commands/{commandId}/tasks"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromoModificationCommandDetailedResultUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getPromoModificationCommandDetailedResultUsingGET(Async)");
        }

        return getPromoModificationCommandDetailedResultUsingGETCall(commandId, limit, offset, _callback);

    }

    /**
     * Modification command detailed result
     * Use this resource to retrieve the result of an offer modification command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-szczegolowy-raport-zadania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-a-detailed-report-of-your-task\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. (required)
     * @param limit The limit of returned items. (optional, default to 100)
     * @param offset The offset of returned items. (optional, default to 0)
     * @return PromoModificationReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PromoModificationReport getPromoModificationCommandDetailedResultUsingGET(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<PromoModificationReport> localVarResp = getPromoModificationCommandDetailedResultUsingGETWithHttpInfo(commandId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Modification command detailed result
     * Use this resource to retrieve the result of an offer modification command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-szczegolowy-raport-zadania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-a-detailed-report-of-your-task\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. (required)
     * @param limit The limit of returned items. (optional, default to 100)
     * @param offset The offset of returned items. (optional, default to 0)
     * @return ApiResponse&lt;PromoModificationReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromoModificationReport> getPromoModificationCommandDetailedResultUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPromoModificationCommandDetailedResultUsingGETValidateBeforeCall(commandId, limit, offset, null);
        Type localVarReturnType = new TypeToken<PromoModificationReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification command detailed result (asynchronously)
     * Use this resource to retrieve the result of an offer modification command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-szczegolowy-raport-zadania\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-a-detailed-report-of-your-task\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. (required)
     * @param limit The limit of returned items. (optional, default to 100)
     * @param offset The offset of returned items. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromoModificationCommandDetailedResultUsingGETAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<PromoModificationReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromoModificationCommandDetailedResultUsingGETValidateBeforeCall(commandId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PromoModificationReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPromoModificationCommandResultUsingGET
     * @param commandId Command identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromoModificationCommandResultUsingGETCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/promo-options-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromoModificationCommandResultUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getPromoModificationCommandResultUsingGET(Async)");
        }

        return getPromoModificationCommandResultUsingGETCall(commandId, _callback);

    }

    /**
     * Modification command summary
     * Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers and errors. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. (required)
     * @return PromoGeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PromoGeneralReport getPromoModificationCommandResultUsingGET(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<PromoGeneralReport> localVarResp = getPromoModificationCommandResultUsingGETWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Modification command summary
     * Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers and errors. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. (required)
     * @return ApiResponse&lt;PromoGeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromoGeneralReport> getPromoModificationCommandResultUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getPromoModificationCommandResultUsingGETValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<PromoGeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification command summary (asynchronously)
     * Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers and errors. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary successfully returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Batch modification command does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Batch modification command does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromoModificationCommandResultUsingGETAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<PromoGeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromoModificationCommandResultUsingGETValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<PromoGeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPromoOptionsForSellerOffersUsingGET
     * @param limit Limit of promo options per page. (optional, default to 5000)
     * @param offset Distance between the beginning of the document and the point from which promo options are returned. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promo options for seller offers successfully returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromoOptionsForSellerOffersUsingGETCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/promo-options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromoOptionsForSellerOffersUsingGETValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, final ApiCallback _callback) throws ApiException {
        return getPromoOptionsForSellerOffersUsingGETCall(limit, offset, _callback);

    }

    /**
     * Get promo options for seller&#39;s offers
     * Use this resource to retrieve promo options for seller offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-dla-wielu-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options-for-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Limit of promo options per page. (optional, default to 5000)
     * @param offset Distance between the beginning of the document and the point from which promo options are returned. (optional, default to 0)
     * @return OfferPromoOptionsForSeller
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promo options for seller offers successfully returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public OfferPromoOptionsForSeller getPromoOptionsForSellerOffersUsingGET(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset) throws ApiException {
        ApiResponse<OfferPromoOptionsForSeller> localVarResp = getPromoOptionsForSellerOffersUsingGETWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get promo options for seller&#39;s offers
     * Use this resource to retrieve promo options for seller offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-dla-wielu-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options-for-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Limit of promo options per page. (optional, default to 5000)
     * @param offset Distance between the beginning of the document and the point from which promo options are returned. (optional, default to 0)
     * @return ApiResponse&lt;OfferPromoOptionsForSeller&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promo options for seller offers successfully returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferPromoOptionsForSeller> getPromoOptionsForSellerOffersUsingGETWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset) throws ApiException {
        okhttp3.Call localVarCall = getPromoOptionsForSellerOffersUsingGETValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<OfferPromoOptionsForSeller>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get promo options for seller&#39;s offers (asynchronously)
     * Use this resource to retrieve promo options for seller offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-opcje-promowania-dla-wielu-ofert\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-retrieve-available-promo-options-for-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit Limit of promo options per page. (optional, default to 5000)
     * @param offset Distance between the beginning of the document and the point from which promo options are returned. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promo options for seller offers successfully returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromoOptionsForSellerOffersUsingGETAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Long offset, final ApiCallback<OfferPromoOptionsForSeller> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromoOptionsForSellerOffersUsingGETValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<OfferPromoOptionsForSeller>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationReportUsingGET
     * @param commandId Command identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationReportUsingGETCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-publication-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationReportUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getPublicationReportUsingGET(Async)");
        }

        return getPublicationReportUsingGETCall(commandId, _callback);

    }

    /**
     * Publish command summary
     * Use this resource to retrieve information about the offer listing statuses. You will receive a summary with a number of correctly listed offers and errors. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zestawienie-zadan\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#task-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270Â 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport getPublicationReportUsingGET(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = getPublicationReportUsingGETWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Publish command summary
     * Use this resource to retrieve information about the offer listing statuses. You will receive a summary with a number of correctly listed offers and errors. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zestawienie-zadan\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#task-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270Â 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> getPublicationReportUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getPublicationReportUsingGETValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish command summary (asynchronously)
     * Use this resource to retrieve information about the offer listing statuses. You will receive a summary with a number of correctly listed offers and errors. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#zestawienie-zadan\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#task-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270Â 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationReportUsingGETAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationReportUsingGETValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicationTasksUsingGET
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationTasksUsingGETCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-publication-commands/{commandId}/tasks"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicationTasksUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getPublicationTasksUsingGET(Async)");
        }

        return getPublicationTasksUsingGETCall(commandId, limit, offset, _callback);

    }

    /**
     * Publish command detailed report
     * Use this resource to retrieve information about the offer statuses on the site (Defaults: limit &#x3D; 100, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#informacje-o-publikacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#information-about-publication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270Â 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return TaskReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public TaskReport getPublicationTasksUsingGET(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<TaskReport> localVarResp = getPublicationTasksUsingGETWithHttpInfo(commandId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Publish command detailed report
     * Use this resource to retrieve information about the offer statuses on the site (Defaults: limit &#x3D; 100, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#informacje-o-publikacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#information-about-publication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270Â 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;TaskReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskReport> getPublicationTasksUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPublicationTasksUsingGETValidateBeforeCall(commandId, limit, offset, null);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish command detailed report (asynchronously)
     * Use this resource to retrieve information about the offer statuses on the site (Defaults: limit &#x3D; 100, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#informacje-o-publikacji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#information-about-publication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270Â 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicationTasksUsingGETAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<TaskReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicationTasksUsingGETValidateBeforeCall(commandId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyOfferPromoOptionsUsingPOST
     * @param offerId Offer identifier. (required)
     * @param promoOptionsModifications request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages modified successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Offer does not exist or unsupported package name or unsupported change type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyOfferPromoOptionsUsingPOSTCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull PromoOptionsModifications promoOptionsModifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoOptionsModifications;

        // create path and map variables
        String localVarPath = "/sale/offers/{offerId}/promo-options-modification"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyOfferPromoOptionsUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull PromoOptionsModifications promoOptionsModifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling modifyOfferPromoOptionsUsingPOST(Async)");
        }

        // verify the required parameter 'promoOptionsModifications' is set
        if (promoOptionsModifications == null) {
            throw new ApiException("Missing the required parameter 'promoOptionsModifications' when calling modifyOfferPromoOptionsUsingPOST(Async)");
        }

        return modifyOfferPromoOptionsUsingPOSTCall(offerId, promoOptionsModifications, _callback);

    }

    /**
     * Modify offer promotion packages
     * Use this resource to modify offer promotion packages. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-zmienic-opcje-promowania-w-pojedynczej-ofercie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-a-single-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param promoOptionsModifications request (required)
     * @return OfferPromoOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages modified successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Offer does not exist or unsupported package name or unsupported change type. </td><td>  -  </td></tr>
     </table>
     */
    public OfferPromoOptions modifyOfferPromoOptionsUsingPOST(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull PromoOptionsModifications promoOptionsModifications) throws ApiException {
        ApiResponse<OfferPromoOptions> localVarResp = modifyOfferPromoOptionsUsingPOSTWithHttpInfo(offerId, promoOptionsModifications);
        return localVarResp.getData();
    }

    /**
     * Modify offer promotion packages
     * Use this resource to modify offer promotion packages. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-zmienic-opcje-promowania-w-pojedynczej-ofercie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-a-single-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param promoOptionsModifications request (required)
     * @return ApiResponse&lt;OfferPromoOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages modified successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Offer does not exist or unsupported package name or unsupported change type. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferPromoOptions> modifyOfferPromoOptionsUsingPOSTWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull PromoOptionsModifications promoOptionsModifications) throws ApiException {
        okhttp3.Call localVarCall = modifyOfferPromoOptionsUsingPOSTValidateBeforeCall(offerId, promoOptionsModifications, null);
        Type localVarReturnType = new TypeToken<OfferPromoOptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify offer promotion packages (asynchronously)
     * Use this resource to modify offer promotion packages. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-zmienic-opcje-promowania-w-pojedynczej-ofercie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-a-single-offer\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param promoOptionsModifications request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer promotion packages modified successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Offer does not exist or unsupported package name or unsupported change type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyOfferPromoOptionsUsingPOSTAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull PromoOptionsModifications promoOptionsModifications, final ApiCallback<OfferPromoOptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyOfferPromoOptionsUsingPOSTValidateBeforeCall(offerId, promoOptionsModifications, _callback);
        Type localVarReturnType = new TypeToken<OfferPromoOptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for promoModificationCommandUsingPUT
     * @param commandId Command identifier. Must be a UUID. (required)
     * @param promoOptionsCommand Promo packages modification command request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id already in use. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Size of batch should be between 1 and 1000 offers or unsupported modification time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoModificationCommandUsingPUTCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PromoOptionsCommand promoOptionsCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoOptionsCommand;

        // create path and map variables
        String localVarPath = "/sale/offers/promo-options-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoModificationCommandUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PromoOptionsCommand promoOptionsCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling promoModificationCommandUsingPUT(Async)");
        }

        // verify the required parameter 'promoOptionsCommand' is set
        if (promoOptionsCommand == null) {
            throw new ApiException("Missing the required parameter 'promoOptionsCommand' when calling promoModificationCommandUsingPUT(Async)");
        }

        return promoModificationCommandUsingPUTCall(commandId, promoOptionsCommand, _callback);

    }

    /**
     * Batch offer promotion package modification
     * Use this resource to modify promotion packages on multiple offers at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. Must be a UUID. (required)
     * @param promoOptionsCommand Promo packages modification command request. (required)
     * @return PromoGeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id already in use. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Size of batch should be between 1 and 1000 offers or unsupported modification time. </td><td>  -  </td></tr>
     </table>
     */
    public PromoGeneralReport promoModificationCommandUsingPUT(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PromoOptionsCommand promoOptionsCommand) throws ApiException {
        ApiResponse<PromoGeneralReport> localVarResp = promoModificationCommandUsingPUTWithHttpInfo(commandId, promoOptionsCommand);
        return localVarResp.getData();
    }

    /**
     * Batch offer promotion package modification
     * Use this resource to modify promotion packages on multiple offers at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. Must be a UUID. (required)
     * @param promoOptionsCommand Promo packages modification command request. (required)
     * @return ApiResponse&lt;PromoGeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id already in use. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Size of batch should be between 1 and 1000 offers or unsupported modification time. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromoGeneralReport> promoModificationCommandUsingPUTWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PromoOptionsCommand promoOptionsCommand) throws ApiException {
        okhttp3.Call localVarCall = promoModificationCommandUsingPUTValidateBeforeCall(commandId, promoOptionsCommand, null);
        Type localVarReturnType = new TypeToken<PromoGeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch offer promotion package modification (asynchronously)
     * Use this resource to modify promotion packages on multiple offers at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-dodac-lub-edytowac-opcje-promowania-na-wielu-ofertach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-add-or-change-promo-options-in-multiple-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command identifier. Must be a UUID. (required)
     * @param promoOptionsCommand Promo packages modification command request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id already in use. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Size of batch should be between 1 and 1000 offers or unsupported modification time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoModificationCommandUsingPUTAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull PromoOptionsCommand promoOptionsCommand, final ApiCallback<PromoGeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoModificationCommandUsingPUTValidateBeforeCall(commandId, promoOptionsCommand, _callback);
        Type localVarReturnType = new TypeToken<PromoGeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
