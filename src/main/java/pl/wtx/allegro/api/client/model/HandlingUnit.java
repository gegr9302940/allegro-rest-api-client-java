/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Represents information about handling unit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class HandlingUnit {
  public static final String SERIALIZED_NAME_UNIT_TYPE = "unitType";
  @SerializedName(SERIALIZED_NAME_UNIT_TYPE)
  @javax.annotation.Nullable
  private String unitType;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_LABELS_TYPE = "labelsType";
  @SerializedName(SERIALIZED_NAME_LABELS_TYPE)
  @javax.annotation.Nullable
  private String labelsType;

  public HandlingUnit() {
  }

  public HandlingUnit unitType(@javax.annotation.Nullable String unitType) {
    this.unitType = unitType;
    return this;
  }

  /**
   * The unit type of Advance Ship Notice. Available values - BOX, PALLET, CONTAINER.
   * @return unitType
   */
  @javax.annotation.Nullable
  public String getUnitType() {
    return unitType;
  }

  public void setUnitType(@javax.annotation.Nullable String unitType) {
    this.unitType = unitType;
  }


  public HandlingUnit amount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount of unit type. Not required when ASN status is DRAFT. When unit type is BOX or PALLET then it means how many handling units will be sent. When unit type is CONTAINER then it means how many handling units inside a container will be sent.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
  }


  public HandlingUnit labelsType(@javax.annotation.Nullable String labelsType) {
    this.labelsType = labelsType;
    return this;
  }

  /**
   * Not required when ASN status is DRAFT. Available values - ONE_FULFILMENT, NONE. When unit type is CONTAINER labelsType can not be set to ONE_FULFILMENT.
   * @return labelsType
   */
  @javax.annotation.Nullable
  public String getLabelsType() {
    return labelsType;
  }

  public void setLabelsType(@javax.annotation.Nullable String labelsType) {
    this.labelsType = labelsType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HandlingUnit handlingUnit = (HandlingUnit) o;
    return Objects.equals(this.unitType, handlingUnit.unitType) &&
        Objects.equals(this.amount, handlingUnit.amount) &&
        Objects.equals(this.labelsType, handlingUnit.labelsType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitType, amount, labelsType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HandlingUnit {\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    labelsType: ").append(toIndentedString(labelsType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unitType");
    openapiFields.add("amount");
    openapiFields.add("labelsType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HandlingUnit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HandlingUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HandlingUnit is not found in the empty JSON string", HandlingUnit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HandlingUnit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HandlingUnit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("unitType") != null && !jsonObj.get("unitType").isJsonNull()) && !jsonObj.get("unitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitType").toString()));
      }
      if ((jsonObj.get("labelsType") != null && !jsonObj.get("labelsType").isJsonNull()) && !jsonObj.get("labelsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelsType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HandlingUnit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HandlingUnit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HandlingUnit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HandlingUnit.class));

       return (TypeAdapter<T>) new TypeAdapter<HandlingUnit>() {
           @Override
           public void write(JsonWriter out, HandlingUnit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HandlingUnit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HandlingUnit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HandlingUnit
   * @throws IOException if the JSON string is invalid with respect to HandlingUnit
   */
  public static HandlingUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HandlingUnit.class);
  }

  /**
   * Convert an instance of HandlingUnit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

