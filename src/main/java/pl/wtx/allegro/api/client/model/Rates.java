/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Rates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Rates {
  /**
   * Delivery rate value
   */
  @JsonAdapter(DeliveryEnum.Adapter.class)
  public enum DeliveryEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    DeliveryEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryEnum fromValue(Integer value) {
      for (DeliveryEnum b : DeliveryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DeliveryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DeliveryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  @javax.annotation.Nullable
  private DeliveryEnum delivery;

  /**
   * Delivery cost rate value
   */
  @JsonAdapter(DeliveryCostEnum.Adapter.class)
  public enum DeliveryCostEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    DeliveryCostEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryCostEnum fromValue(Integer value) {
      for (DeliveryCostEnum b : DeliveryCostEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryCostEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryCostEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryCostEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DeliveryCostEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DeliveryCostEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_COST = "deliveryCost";
  @SerializedName(SERIALIZED_NAME_DELIVERY_COST)
  @javax.annotation.Nullable
  private DeliveryCostEnum deliveryCost;

  /**
   * Description rate value
   */
  @JsonAdapter(DescriptionEnum.Adapter.class)
  public enum DescriptionEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    DescriptionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DescriptionEnum fromValue(Integer value) {
      for (DescriptionEnum b : DescriptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DescriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DescriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DescriptionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DescriptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DescriptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private DescriptionEnum description;

  /**
   * Service rate value
   */
  @JsonAdapter(ServiceEnum.Adapter.class)
  public enum ServiceEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    ServiceEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceEnum fromValue(Integer value) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  @javax.annotation.Nullable
  private ServiceEnum service;

  public Rates() {
  }

  public Rates delivery(@javax.annotation.Nullable DeliveryEnum delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Delivery rate value
   * minimum: 0
   * @return delivery
   */
  @javax.annotation.Nullable
  public DeliveryEnum getDelivery() {
    return delivery;
  }

  public void setDelivery(@javax.annotation.Nullable DeliveryEnum delivery) {
    this.delivery = delivery;
  }


  public Rates deliveryCost(@javax.annotation.Nullable DeliveryCostEnum deliveryCost) {
    this.deliveryCost = deliveryCost;
    return this;
  }

  /**
   * Delivery cost rate value
   * minimum: 0
   * @return deliveryCost
   */
  @javax.annotation.Nullable
  public DeliveryCostEnum getDeliveryCost() {
    return deliveryCost;
  }

  public void setDeliveryCost(@javax.annotation.Nullable DeliveryCostEnum deliveryCost) {
    this.deliveryCost = deliveryCost;
  }


  public Rates description(@javax.annotation.Nullable DescriptionEnum description) {
    this.description = description;
    return this;
  }

  /**
   * Description rate value
   * minimum: 0
   * @return description
   */
  @javax.annotation.Nullable
  public DescriptionEnum getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable DescriptionEnum description) {
    this.description = description;
  }


  public Rates service(@javax.annotation.Nullable ServiceEnum service) {
    this.service = service;
    return this;
  }

  /**
   * Service rate value
   * minimum: 0
   * @return service
   */
  @javax.annotation.Nullable
  public ServiceEnum getService() {
    return service;
  }

  public void setService(@javax.annotation.Nullable ServiceEnum service) {
    this.service = service;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rates rates = (Rates) o;
    return Objects.equals(this.delivery, rates.delivery) &&
        Objects.equals(this.deliveryCost, rates.deliveryCost) &&
        Objects.equals(this.description, rates.description) &&
        Objects.equals(this.service, rates.service);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delivery, deliveryCost, description, service);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rates {\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    deliveryCost: ").append(toIndentedString(deliveryCost)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delivery");
    openapiFields.add("deliveryCost");
    openapiFields.add("description");
    openapiFields.add("service");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rates is not found in the empty JSON string", Rates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        DeliveryEnum.validateJsonElement(jsonObj.get("delivery"));
      }
      // validate the optional field `deliveryCost`
      if (jsonObj.get("deliveryCost") != null && !jsonObj.get("deliveryCost").isJsonNull()) {
        DeliveryCostEnum.validateJsonElement(jsonObj.get("deliveryCost"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        DescriptionEnum.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        ServiceEnum.validateJsonElement(jsonObj.get("service"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rates.class));

       return (TypeAdapter<T>) new TypeAdapter<Rates>() {
           @Override
           public void write(JsonWriter out, Rates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rates
   * @throws IOException if the JSON string is invalid with respect to Rates
   */
  public static Rates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rates.class);
  }

  /**
   * Convert an instance of Rates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

