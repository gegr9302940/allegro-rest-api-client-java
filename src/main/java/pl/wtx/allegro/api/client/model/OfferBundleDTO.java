/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.BundleDiscountDTO;
import pl.wtx.allegro.api.client.model.BundledOfferDTO;
import pl.wtx.allegro.api.client.model.OfferBundleDTOPublication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * OfferBundleDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class OfferBundleDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  @javax.annotation.Nonnull
  private List<BundledOfferDTO> offers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLICATION = "publication";
  @SerializedName(SERIALIZED_NAME_PUBLICATION)
  @javax.annotation.Nonnull
  private OfferBundleDTOPublication publication;

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  @javax.annotation.Nullable
  private List<BundleDiscountDTO> discounts;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  /**
   * Who created this bundle. It is set to: &lt;ul&gt; &lt;li&gt; &#x60;USER&#x60; for all bundles created by seller on Allegro web page or via public API;&lt;/li&gt; &lt;li&gt; &#x60;ALLEGRO&#x60; when bundle was created &lt;a href&#x3D;\&quot;https://allegro.pl/dla-sprzedajacych/automatycznie-laczymy-wybrane-oferty-w-zestaw-K6VYllRgbs0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;automatically&lt;/a&gt; by Allegro. &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(CreatedByEnum.Adapter.class)
  public enum CreatedByEnum {
    USER("USER"),
    
    ALLEGRO("ALLEGRO");

    private String value;

    CreatedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreatedByEnum fromValue(String value) {
      for (CreatedByEnum b : CreatedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreatedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreatedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreatedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreatedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreatedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  @javax.annotation.Nonnull
  private CreatedByEnum createdBy;

  public OfferBundleDTO() {
  }

  public OfferBundleDTO id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Bundle ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public OfferBundleDTO offers(@javax.annotation.Nonnull List<BundledOfferDTO> offers) {
    this.offers = offers;
    return this;
  }

  public OfferBundleDTO addOffersItem(BundledOfferDTO offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * Offers included in bundle.
   * @return offers
   */
  @javax.annotation.Nonnull
  public List<BundledOfferDTO> getOffers() {
    return offers;
  }

  public void setOffers(@javax.annotation.Nonnull List<BundledOfferDTO> offers) {
    this.offers = offers;
  }


  public OfferBundleDTO publication(@javax.annotation.Nonnull OfferBundleDTOPublication publication) {
    this.publication = publication;
    return this;
  }

  /**
   * Get publication
   * @return publication
   */
  @javax.annotation.Nonnull
  public OfferBundleDTOPublication getPublication() {
    return publication;
  }

  public void setPublication(@javax.annotation.Nonnull OfferBundleDTOPublication publication) {
    this.publication = publication;
  }


  public OfferBundleDTO discounts(@javax.annotation.Nullable List<BundleDiscountDTO> discounts) {
    this.discounts = discounts;
    return this;
  }

  public OfferBundleDTO addDiscountsItem(BundleDiscountDTO discountsItem) {
    if (this.discounts == null) {
      this.discounts = new ArrayList<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

  /**
   * Discounts on marketplaces.
   * @return discounts
   */
  @javax.annotation.Nullable
  public List<BundleDiscountDTO> getDiscounts() {
    return discounts;
  }

  public void setDiscounts(@javax.annotation.Nullable List<BundleDiscountDTO> discounts) {
    this.discounts = discounts;
  }


  public OfferBundleDTO createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When this bundle was created in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO_8601&lt;/a&gt; format.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OfferBundleDTO createdBy(@javax.annotation.Nonnull CreatedByEnum createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Who created this bundle. It is set to: &lt;ul&gt; &lt;li&gt; &#x60;USER&#x60; for all bundles created by seller on Allegro web page or via public API;&lt;/li&gt; &lt;li&gt; &#x60;ALLEGRO&#x60; when bundle was created &lt;a href&#x3D;\&quot;https://allegro.pl/dla-sprzedajacych/automatycznie-laczymy-wybrane-oferty-w-zestaw-K6VYllRgbs0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;automatically&lt;/a&gt; by Allegro. &lt;/li&gt; &lt;/ul&gt;
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public CreatedByEnum getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(@javax.annotation.Nonnull CreatedByEnum createdBy) {
    this.createdBy = createdBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferBundleDTO offerBundleDTO = (OfferBundleDTO) o;
    return Objects.equals(this.id, offerBundleDTO.id) &&
        Objects.equals(this.offers, offerBundleDTO.offers) &&
        Objects.equals(this.publication, offerBundleDTO.publication) &&
        Objects.equals(this.discounts, offerBundleDTO.discounts) &&
        Objects.equals(this.createdAt, offerBundleDTO.createdAt) &&
        Objects.equals(this.createdBy, offerBundleDTO.createdBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, offers, publication, discounts, createdAt, createdBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferBundleDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("offers");
    openapiFields.add("publication");
    openapiFields.add("discounts");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("offers");
    openapiRequiredFields.add("publication");
    openapiRequiredFields.add("discounts");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("createdBy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferBundleDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferBundleDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferBundleDTO is not found in the empty JSON string", OfferBundleDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferBundleDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferBundleDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OfferBundleDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("offers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
      }

      JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
      // validate the required field `offers` (array)
      for (int i = 0; i < jsonArrayoffers.size(); i++) {
        BundledOfferDTO.validateJsonElement(jsonArrayoffers.get(i));
      };
      // validate the required field `publication`
      OfferBundleDTOPublication.validateJsonElement(jsonObj.get("publication"));
      // ensure the json data is an array
      if (!jsonObj.get("discounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
      }

      JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
      // validate the required field `discounts` (array)
      for (int i = 0; i < jsonArraydiscounts.size(); i++) {
        BundleDiscountDTO.validateJsonElement(jsonArraydiscounts.get(i));
      };
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      // validate the required field `createdBy`
      CreatedByEnum.validateJsonElement(jsonObj.get("createdBy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferBundleDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferBundleDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferBundleDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferBundleDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferBundleDTO>() {
           @Override
           public void write(JsonWriter out, OfferBundleDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferBundleDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferBundleDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferBundleDTO
   * @throws IOException if the JSON string is invalid with respect to OfferBundleDTO
   */
  public static OfferBundleDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferBundleDTO.class);
  }

  /**
   * Convert an instance of OfferBundleDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

