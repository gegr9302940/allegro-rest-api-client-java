/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.StockStorageFeeDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Information about storage fee for a given product in merchant&#39;s stock.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class StockStorageFee {
  /**
   * Status of the storage fee. * NOT_APPLICABLE - fee for yesterday has not been charged and there are no available items of the product. * INCLUDED_IN_SERVICE_PRICE - fee for yesterday has not been charged and there are available items of the product. * CHARGED - the fee has been charged on seller&#39;s billing. * PREDICTION - prediction of upcoming fee, based on yesterday selling stats and quantity. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_APPLICABLE("NOT_APPLICABLE"),
    
    INCLUDED_IN_SERVICE_PRICE("INCLUDED_IN_SERVICE_PRICE"),
    
    CHARGED("CHARGED"),
    
    PREDICTION("PREDICTION");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FEE_STATUS_AT = "feeStatusAt";
  @SerializedName(SERIALIZED_NAME_FEE_STATUS_AT)
  @javax.annotation.Nullable
  private String feeStatusAt;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  @javax.annotation.Nullable
  private StockStorageFeeDetails details;

  public StockStorageFee() {
  }

  public StockStorageFee status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the storage fee. * NOT_APPLICABLE - fee for yesterday has not been charged and there are no available items of the product. * INCLUDED_IN_SERVICE_PRICE - fee for yesterday has not been charged and there are available items of the product. * CHARGED - the fee has been charged on seller&#39;s billing. * PREDICTION - prediction of upcoming fee, based on yesterday selling stats and quantity. 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public StockStorageFee feeStatusAt(@javax.annotation.Nullable String feeStatusAt) {
    this.feeStatusAt = feeStatusAt;
    return this;
  }

  /**
   * Date when the fee was charged. Normally we return the data for the day before. However, due to asynchronous nature of fee update process, which are calculated overnight, it is possible to have some outdated entries when querying during fee recalculation process. This value allows to ensure that you work on the most recent data.
   * @return feeStatusAt
   */
  @javax.annotation.Nullable
  public String getFeeStatusAt() {
    return feeStatusAt;
  }

  public void setFeeStatusAt(@javax.annotation.Nullable String feeStatusAt) {
    this.feeStatusAt = feeStatusAt;
  }


  public StockStorageFee details(@javax.annotation.Nullable StockStorageFeeDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public StockStorageFeeDetails getDetails() {
    return details;
  }

  public void setDetails(@javax.annotation.Nullable StockStorageFeeDetails details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StockStorageFee stockStorageFee = (StockStorageFee) o;
    return Objects.equals(this.status, stockStorageFee.status) &&
        Objects.equals(this.feeStatusAt, stockStorageFee.feeStatusAt) &&
        Objects.equals(this.details, stockStorageFee.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, feeStatusAt, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockStorageFee {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    feeStatusAt: ").append(toIndentedString(feeStatusAt)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("feeStatusAt");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StockStorageFee
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StockStorageFee.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StockStorageFee is not found in the empty JSON string", StockStorageFee.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StockStorageFee.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StockStorageFee` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("feeStatusAt") != null && !jsonObj.get("feeStatusAt").isJsonNull()) && !jsonObj.get("feeStatusAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeStatusAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeStatusAt").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        StockStorageFeeDetails.validateJsonElement(jsonObj.get("details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StockStorageFee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StockStorageFee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StockStorageFee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StockStorageFee.class));

       return (TypeAdapter<T>) new TypeAdapter<StockStorageFee>() {
           @Override
           public void write(JsonWriter out, StockStorageFee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StockStorageFee read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StockStorageFee given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StockStorageFee
   * @throws IOException if the JSON string is invalid with respect to StockStorageFee
   */
  public static StockStorageFee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StockStorageFee.class);
  }

  /**
   * Convert an instance of StockStorageFee to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

