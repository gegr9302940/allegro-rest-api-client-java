/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import pl.wtx.allegro.api.client.model.AllegroPricesEligibilityResponseAdditionalMarketplacesValue;
import pl.wtx.allegro.api.client.model.AllegroPricesQualificationResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * AllegroPricesEligibilityResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AllegroPricesEligibilityResponse {
  /**
   * Gets or Sets consent
   */
  @JsonAdapter(ConsentEnum.Adapter.class)
  public enum ConsentEnum {
    ALLOWED("ALLOWED"),
    
    DENIED("DENIED");

    private String value;

    ConsentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConsentEnum fromValue(String value) {
      for (ConsentEnum b : ConsentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConsentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConsentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConsentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConsentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConsentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONSENT = "consent";
  @SerializedName(SERIALIZED_NAME_CONSENT)
  @javax.annotation.Nullable
  private ConsentEnum consent;

  public static final String SERIALIZED_NAME_QUALIFICATION = "qualification";
  @SerializedName(SERIALIZED_NAME_QUALIFICATION)
  @javax.annotation.Nullable
  private AllegroPricesQualificationResponse qualification;

  public static final String SERIALIZED_NAME_ADDITIONAL_MARKETPLACES = "additionalMarketplaces";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MARKETPLACES)
  @javax.annotation.Nullable
  private Map<String, AllegroPricesEligibilityResponseAdditionalMarketplacesValue> additionalMarketplaces = new HashMap<>();

  public AllegroPricesEligibilityResponse() {
  }

  public AllegroPricesEligibilityResponse consent(@javax.annotation.Nullable ConsentEnum consent) {
    this.consent = consent;
    return this;
  }

  /**
   * Get consent
   * @return consent
   */
  @javax.annotation.Nullable
  public ConsentEnum getConsent() {
    return consent;
  }

  public void setConsent(@javax.annotation.Nullable ConsentEnum consent) {
    this.consent = consent;
  }


  public AllegroPricesEligibilityResponse qualification(@javax.annotation.Nullable AllegroPricesQualificationResponse qualification) {
    this.qualification = qualification;
    return this;
  }

  /**
   * Get qualification
   * @return qualification
   */
  @javax.annotation.Nullable
  public AllegroPricesQualificationResponse getQualification() {
    return qualification;
  }

  public void setQualification(@javax.annotation.Nullable AllegroPricesQualificationResponse qualification) {
    this.qualification = qualification;
  }


  public AllegroPricesEligibilityResponse additionalMarketplaces(@javax.annotation.Nullable Map<String, AllegroPricesEligibilityResponseAdditionalMarketplacesValue> additionalMarketplaces) {
    this.additionalMarketplaces = additionalMarketplaces;
    return this;
  }

  public AllegroPricesEligibilityResponse putAdditionalMarketplacesItem(String key, AllegroPricesEligibilityResponseAdditionalMarketplacesValue additionalMarketplacesItem) {
    if (this.additionalMarketplaces == null) {
      this.additionalMarketplaces = new HashMap<>();
    }
    this.additionalMarketplaces.put(key, additionalMarketplacesItem);
    return this;
  }

  /**
   * Eligibility state on marketplces other than the base marketplace of the account.
   * @return additionalMarketplaces
   */
  @javax.annotation.Nullable
  public Map<String, AllegroPricesEligibilityResponseAdditionalMarketplacesValue> getAdditionalMarketplaces() {
    return additionalMarketplaces;
  }

  public void setAdditionalMarketplaces(@javax.annotation.Nullable Map<String, AllegroPricesEligibilityResponseAdditionalMarketplacesValue> additionalMarketplaces) {
    this.additionalMarketplaces = additionalMarketplaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllegroPricesEligibilityResponse allegroPricesEligibilityResponse = (AllegroPricesEligibilityResponse) o;
    return Objects.equals(this.consent, allegroPricesEligibilityResponse.consent) &&
        Objects.equals(this.qualification, allegroPricesEligibilityResponse.qualification) &&
        Objects.equals(this.additionalMarketplaces, allegroPricesEligibilityResponse.additionalMarketplaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consent, qualification, additionalMarketplaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllegroPricesEligibilityResponse {\n");
    sb.append("    consent: ").append(toIndentedString(consent)).append("\n");
    sb.append("    qualification: ").append(toIndentedString(qualification)).append("\n");
    sb.append("    additionalMarketplaces: ").append(toIndentedString(additionalMarketplaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consent");
    openapiFields.add("qualification");
    openapiFields.add("additionalMarketplaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllegroPricesEligibilityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllegroPricesEligibilityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllegroPricesEligibilityResponse is not found in the empty JSON string", AllegroPricesEligibilityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllegroPricesEligibilityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllegroPricesEligibilityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consent") != null && !jsonObj.get("consent").isJsonNull()) && !jsonObj.get("consent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consent").toString()));
      }
      // validate the optional field `consent`
      if (jsonObj.get("consent") != null && !jsonObj.get("consent").isJsonNull()) {
        ConsentEnum.validateJsonElement(jsonObj.get("consent"));
      }
      // validate the optional field `qualification`
      if (jsonObj.get("qualification") != null && !jsonObj.get("qualification").isJsonNull()) {
        AllegroPricesQualificationResponse.validateJsonElement(jsonObj.get("qualification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllegroPricesEligibilityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllegroPricesEligibilityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllegroPricesEligibilityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllegroPricesEligibilityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AllegroPricesEligibilityResponse>() {
           @Override
           public void write(JsonWriter out, AllegroPricesEligibilityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllegroPricesEligibilityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllegroPricesEligibilityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllegroPricesEligibilityResponse
   * @throws IOException if the JSON string is invalid with respect to AllegroPricesEligibilityResponse
   */
  public static AllegroPricesEligibilityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllegroPricesEligibilityResponse.class);
  }

  /**
   * Convert an instance of AllegroPricesEligibilityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

