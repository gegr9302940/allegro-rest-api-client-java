/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.CheckoutFormInvoiceAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CheckoutFormInvoiceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckoutFormInvoiceInfo {
  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  @javax.annotation.Nonnull
  private Boolean required;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private CheckoutFormInvoiceAddress address;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  @javax.annotation.Nullable
  private String dueDate;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  @javax.annotation.Nullable
  private List<String> features = new ArrayList<>();

  public CheckoutFormInvoiceInfo() {
  }

  public CheckoutFormInvoiceInfo required(@javax.annotation.Nonnull Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Is invoice required by buyer?
   * @return required
   */
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(@javax.annotation.Nonnull Boolean required) {
    this.required = required;
  }


  public CheckoutFormInvoiceInfo address(@javax.annotation.Nullable CheckoutFormInvoiceAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public CheckoutFormInvoiceAddress getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable CheckoutFormInvoiceAddress address) {
    this.address = address;
  }


  public CheckoutFormInvoiceInfo dueDate(@javax.annotation.Nullable String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Due date to put on an invoice for Extended Payment Terms purchases. For other payment methods this field will be null.
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(@javax.annotation.Nullable String dueDate) {
    this.dueDate = dueDate;
  }


  public CheckoutFormInvoiceInfo features(@javax.annotation.Nullable List<String> features) {
    this.features = features;
    return this;
  }

  public CheckoutFormInvoiceInfo addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * Invoice features list:  - VAT_EU_VERIFIED - order&#39;s data is verified for VAT EU transactions. The presence of this feature means that VAT_EU number will appear in &#x60;address.company.ids&#x60; field. This feature flag is mutually exclusive with &#x60;VAT_EU_UNVERIFIED&#x60; feature. Read more: &lt;a href&#x3D;\&quot;../../news/serwisy-zagraniczne-allegro-od-18-listopada-2024-pozwolimy-wszystkim-sprzedajacym-udostepnic-oferty-na-business-allegro-cz-oraz-wdrozymy-wsparcie-dla-transakcji-wewnatrzwspolnotowych-1nayOPKLaSr\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/allegro-foreign-marketplaces-starting-november-18-2024-we-will-allow-all-sellers-to-list-offers-on-business-allegro-cz-and-implement-support-for-intra-community-transactions-1nayOPKLaSr\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.  - VAT_EU_UNVERIFIED - order meets the conditions of VAT EU transaction, but the Buyer&#39;s VAT_EU number is not verified. This feature flag is mutually exclusive with &#x60;VAT_EU_VERIFIED&#x60; feature. Read more: &lt;a href&#x3D;\&quot;../../news/serwisy-zagraniczne-allegro-od-18-listopada-2024-pozwolimy-wszystkim-sprzedajacym-udostepnic-oferty-na-business-allegro-cz-oraz-wdrozymy-wsparcie-dla-transakcji-wewnatrzwspolnotowych-1nayOPKLaSr\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/allegro-foreign-marketplaces-starting-november-18-2024-we-will-allow-all-sellers-to-list-offers-on-business-allegro-cz-and-implement-support-for-intra-community-transactions-1nayOPKLaSr\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
   * @return features
   */
  @javax.annotation.Nullable
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(@javax.annotation.Nullable List<String> features) {
    this.features = features;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutFormInvoiceInfo checkoutFormInvoiceInfo = (CheckoutFormInvoiceInfo) o;
    return Objects.equals(this.required, checkoutFormInvoiceInfo.required) &&
        Objects.equals(this.address, checkoutFormInvoiceInfo.address) &&
        Objects.equals(this.dueDate, checkoutFormInvoiceInfo.dueDate) &&
        Objects.equals(this.features, checkoutFormInvoiceInfo.features);
  }

  @Override
  public int hashCode() {
    return Objects.hash(required, address, dueDate, features);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutFormInvoiceInfo {\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("required");
    openapiFields.add("address");
    openapiFields.add("dueDate");
    openapiFields.add("features");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("required");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutFormInvoiceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutFormInvoiceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutFormInvoiceInfo is not found in the empty JSON string", CheckoutFormInvoiceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutFormInvoiceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutFormInvoiceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutFormInvoiceInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        CheckoutFormInvoiceAddress.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) && !jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull() && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutFormInvoiceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutFormInvoiceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutFormInvoiceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutFormInvoiceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutFormInvoiceInfo>() {
           @Override
           public void write(JsonWriter out, CheckoutFormInvoiceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutFormInvoiceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutFormInvoiceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutFormInvoiceInfo
   * @throws IOException if the JSON string is invalid with respect to CheckoutFormInvoiceInfo
   */
  public static CheckoutFormInvoiceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutFormInvoiceInfo.class);
  }

  /**
   * Convert an instance of CheckoutFormInvoiceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

