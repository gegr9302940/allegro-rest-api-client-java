/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The publication status of the offer on an additional marketplace. The possible values:    - *NOT_REQUESTED* - The seller has not declared their intention to list this offer on the marketplace   - *PENDING* - The qualification process has not started; the offer is not listed yet   - *IN_PROGRESS* - We are processing whether the offer qualifies to be listed on the marketplace; the offer is not listed yet   - *APPROVED* - The offer is approved to be listed on the marketplace   - *REFUSED* - The offer will not be listed on the marketplace; the offer may be re-qualified if is corrected
 */
@JsonAdapter(AdditionalMarketplacePublicationState.Adapter.class)
public enum AdditionalMarketplacePublicationState {
  
  NOT_REQUESTED("NOT_REQUESTED"),
  
  PENDING("PENDING"),
  
  IN_PROGRESS("IN_PROGRESS"),
  
  APPROVED("APPROVED"),
  
  REFUSED("REFUSED");

  private String value;

  AdditionalMarketplacePublicationState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AdditionalMarketplacePublicationState fromValue(String value) {
    for (AdditionalMarketplacePublicationState b : AdditionalMarketplacePublicationState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AdditionalMarketplacePublicationState> {
    @Override
    public void write(final JsonWriter jsonWriter, final AdditionalMarketplacePublicationState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AdditionalMarketplacePublicationState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AdditionalMarketplacePublicationState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AdditionalMarketplacePublicationState.fromValue(value);
  }
}

