/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Order seller status. The status is managed by the seller, however in some cases the seller can enable automatic change of the status in the Orders [settings](https://salescenter.allegro.com/orders/settings). Order changes to &#x60;SENT&#x60; status when a tracking number is added to the order and the seller has enabled corresponding setting (see: [here](https://help.allegro.com/sell/en/a/sales-management-via-advanced-settings-of-the-list-of-offers-and-orders-6M9E0wr5Rt5#automatic-status-change-after-adding-a-tracking-number)). Order can be switched to &#x60;RETURNED&#x60; status when both the buyer returns all order&#39;s items and the seller makes a refund for all of the order&#39;s items (either automatically or manually, see: [here](https://help.allegro.com/sell/en/a/how-can-i-issue-a-refund-to-the-buyer-k1wRo9wBXUx)). The &#x60;RETURNED&#x60; status cannot be set by the seller - it changes automatically when corresponding setting is enabled in sale settings (see: [here](https://help.allegro.com/sell/en/a/how-to-use-the-orders-tab-6M9E0wO9BFw#filtering-and-searching-for-orders)). 
 */
@JsonAdapter(CheckoutFormFulfillmentStatus.Adapter.class)
public enum CheckoutFormFulfillmentStatus {
  
  NEW("NEW"),
  
  PROCESSING("PROCESSING"),
  
  READY_FOR_SHIPMENT("READY_FOR_SHIPMENT"),
  
  READY_FOR_PICKUP("READY_FOR_PICKUP"),
  
  SENT("SENT"),
  
  PICKED_UP("PICKED_UP"),
  
  CANCELLED("CANCELLED"),
  
  SUSPENDED("SUSPENDED"),
  
  RETURNED("RETURNED");

  private String value;

  CheckoutFormFulfillmentStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CheckoutFormFulfillmentStatus fromValue(String value) {
    for (CheckoutFormFulfillmentStatus b : CheckoutFormFulfillmentStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CheckoutFormFulfillmentStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final CheckoutFormFulfillmentStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CheckoutFormFulfillmentStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CheckoutFormFulfillmentStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CheckoutFormFulfillmentStatus.fromValue(value);
  }
}

