/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.allegro.api.client.model.CustomerReturnParcelSender;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CustomerReturnReturnParcel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CustomerReturnReturnParcel {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_WAYBILL = "waybill";
  @SerializedName(SERIALIZED_NAME_WAYBILL)
  @javax.annotation.Nullable
  private String waybill;

  public static final String SERIALIZED_NAME_TRANSPORTING_WAYBILL = "transportingWaybill";
  @SerializedName(SERIALIZED_NAME_TRANSPORTING_WAYBILL)
  @javax.annotation.Nullable
  private String transportingWaybill;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrierId";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  @javax.annotation.Nullable
  private String carrierId;

  public static final String SERIALIZED_NAME_TRANSPORTING_CARRIER_ID = "transportingCarrierId";
  @SerializedName(SERIALIZED_NAME_TRANSPORTING_CARRIER_ID)
  @javax.annotation.Nullable
  private String transportingCarrierId;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nullable
  private CustomerReturnParcelSender sender;

  public CustomerReturnReturnParcel() {
  }

  public CustomerReturnReturnParcel createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CustomerReturnReturnParcel waybill(@javax.annotation.Nullable String waybill) {
    this.waybill = waybill;
    return this;
  }

  /**
   * Get waybill
   * @return waybill
   */
  @javax.annotation.Nullable
  public String getWaybill() {
    return waybill;
  }

  public void setWaybill(@javax.annotation.Nullable String waybill) {
    this.waybill = waybill;
  }


  public CustomerReturnReturnParcel transportingWaybill(@javax.annotation.Nullable String transportingWaybill) {
    this.transportingWaybill = transportingWaybill;
    return this;
  }

  /**
   * Waybill id as generated by carriers physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment.
   * @return transportingWaybill
   */
  @javax.annotation.Nullable
  public String getTransportingWaybill() {
    return transportingWaybill;
  }

  public void setTransportingWaybill(@javax.annotation.Nullable String transportingWaybill) {
    this.transportingWaybill = transportingWaybill;
  }


  public CustomerReturnReturnParcel carrierId(@javax.annotation.Nullable String carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  /**
   * Get carrierId
   * @return carrierId
   */
  @javax.annotation.Nullable
  public String getCarrierId() {
    return carrierId;
  }

  public void setCarrierId(@javax.annotation.Nullable String carrierId) {
    this.carrierId = carrierId;
  }


  public CustomerReturnReturnParcel transportingCarrierId(@javax.annotation.Nullable String transportingCarrierId) {
    this.transportingCarrierId = transportingCarrierId;
    return this;
  }

  /**
   * Carrier id of a carrier physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment.
   * @return transportingCarrierId
   */
  @javax.annotation.Nullable
  public String getTransportingCarrierId() {
    return transportingCarrierId;
  }

  public void setTransportingCarrierId(@javax.annotation.Nullable String transportingCarrierId) {
    this.transportingCarrierId = transportingCarrierId;
  }


  public CustomerReturnReturnParcel sender(@javax.annotation.Nullable CustomerReturnParcelSender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public CustomerReturnParcelSender getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nullable CustomerReturnParcelSender sender) {
    this.sender = sender;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerReturnReturnParcel customerReturnReturnParcel = (CustomerReturnReturnParcel) o;
    return Objects.equals(this.createdAt, customerReturnReturnParcel.createdAt) &&
        Objects.equals(this.waybill, customerReturnReturnParcel.waybill) &&
        Objects.equals(this.transportingWaybill, customerReturnReturnParcel.transportingWaybill) &&
        Objects.equals(this.carrierId, customerReturnReturnParcel.carrierId) &&
        Objects.equals(this.transportingCarrierId, customerReturnReturnParcel.transportingCarrierId) &&
        Objects.equals(this.sender, customerReturnReturnParcel.sender);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, waybill, transportingWaybill, carrierId, transportingCarrierId, sender);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerReturnReturnParcel {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    waybill: ").append(toIndentedString(waybill)).append("\n");
    sb.append("    transportingWaybill: ").append(toIndentedString(transportingWaybill)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    transportingCarrierId: ").append(toIndentedString(transportingCarrierId)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("waybill");
    openapiFields.add("transportingWaybill");
    openapiFields.add("carrierId");
    openapiFields.add("transportingCarrierId");
    openapiFields.add("sender");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerReturnReturnParcel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerReturnReturnParcel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerReturnReturnParcel is not found in the empty JSON string", CustomerReturnReturnParcel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerReturnReturnParcel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerReturnReturnParcel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("waybill") != null && !jsonObj.get("waybill").isJsonNull()) && !jsonObj.get("waybill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waybill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waybill").toString()));
      }
      if ((jsonObj.get("transportingWaybill") != null && !jsonObj.get("transportingWaybill").isJsonNull()) && !jsonObj.get("transportingWaybill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportingWaybill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportingWaybill").toString()));
      }
      if ((jsonObj.get("carrierId") != null && !jsonObj.get("carrierId").isJsonNull()) && !jsonObj.get("carrierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierId").toString()));
      }
      if ((jsonObj.get("transportingCarrierId") != null && !jsonObj.get("transportingCarrierId").isJsonNull()) && !jsonObj.get("transportingCarrierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportingCarrierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportingCarrierId").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        CustomerReturnParcelSender.validateJsonElement(jsonObj.get("sender"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerReturnReturnParcel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerReturnReturnParcel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerReturnReturnParcel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerReturnReturnParcel.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerReturnReturnParcel>() {
           @Override
           public void write(JsonWriter out, CustomerReturnReturnParcel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerReturnReturnParcel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerReturnReturnParcel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerReturnReturnParcel
   * @throws IOException if the JSON string is invalid with respect to CustomerReturnReturnParcel
   */
  public static CustomerReturnReturnParcel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerReturnReturnParcel.class);
  }

  /**
   * Convert an instance of CustomerReturnReturnParcel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

