/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.OfferStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Publication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Publication {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private String duration;

  public static final String SERIALIZED_NAME_STARTING_AT = "startingAt";
  @SerializedName(SERIALIZED_NAME_STARTING_AT)
  @javax.annotation.Nullable
  private OffsetDateTime startingAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private OfferStatus status;

  public static final String SERIALIZED_NAME_REPUBLISH = "republish";
  @SerializedName(SERIALIZED_NAME_REPUBLISH)
  @javax.annotation.Nullable
  private Boolean republish;

  public static final String SERIALIZED_NAME_ENDING_AT = "endingAt";
  @SerializedName(SERIALIZED_NAME_ENDING_AT)
  @javax.annotation.Nullable
  private OffsetDateTime endingAt;

  /**
   * Indicates the reason for ending the offer: - &#x60;USER&#x60; - offer ended by the seller. - &#x60;ADMIN&#x60; - offer ended by an admin. - &#x60;EXPIRATION&#x60; - offer duration had expired (valid for offers with specified duration). - &#x60;EMPTY_STOCK&#x60; - offer ended because all available items had been sold out. - &#x60;PRODUCT_DETACHMENT&#x60; - offer ended because its link to the product was removed. Status will only occur   if the base marketplace of offer requires full productization. - &#x60;ERROR&#x60; - offer ended due to internal problem with offer publication. The publication command responded with   success status, but further processing failed.
   */
  @JsonAdapter(EndedByEnum.Adapter.class)
  public enum EndedByEnum {
    USER("USER"),
    
    ADMIN("ADMIN"),
    
    EXPIRATION("EXPIRATION"),
    
    EMPTY_STOCK("EMPTY_STOCK"),
    
    PRODUCT_DETACHMENT("PRODUCT_DETACHMENT"),
    
    ERROR("ERROR");

    private String value;

    EndedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndedByEnum fromValue(String value) {
      for (EndedByEnum b : EndedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EndedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENDED_BY = "endedBy";
  @SerializedName(SERIALIZED_NAME_ENDED_BY)
  @javax.annotation.Nullable
  private EndedByEnum endedBy;

  public Publication() {
  }

  public Publication(
     EndedByEnum endedBy
  ) {
    this();
    this.endedBy = endedBy;
  }

  public Publication duration(@javax.annotation.Nullable String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * This field must be set to one of the following:&lt;br/&gt; - for auctions: 1 day, 3 days, 5 days, 7 days, 10 days&lt;br/&gt; - for buy-now offers: 3 days, 5 days, 7 days, 10 days, 20 days, 30 days&lt;br/&gt; - for advertisements: 10 days, 20 days, 30 days.&lt;br/&gt; The value is in ISO 8601 format (example: PT24H, PT72H).
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable String duration) {
    this.duration = duration;
  }


  public Publication startingAt(@javax.annotation.Nullable OffsetDateTime startingAt) {
    this.startingAt = startingAt;
    return this;
  }

  /**
   * Publication starting date: Format (ISO 8601) - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. Cannot be modified after activation or ending of the offer.
   * @return startingAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartingAt() {
    return startingAt;
  }

  public void setStartingAt(@javax.annotation.Nullable OffsetDateTime startingAt) {
    this.startingAt = startingAt;
  }


  public Publication status(@javax.annotation.Nullable OfferStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OfferStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable OfferStatus status) {
    this.status = status;
  }


  public Publication republish(@javax.annotation.Nullable Boolean republish) {
    this.republish = republish;
    return this;
  }

  /**
   * Whether to republish an offer after ending. Automatically republish offers or auctions:&lt;/br&gt; - &#x60;BUY_NOW&#x60; offer type are republished with initial stock, regardless of how many items you have sold.&lt;/br&gt; - &#x60;AUCTION&#x60; offer type are republished only if they were not concluded with purchase.&lt;/br&gt; - &#x60;ADVERTISEMENT&#x60; offer type are republished until it will be finished manually.
   * @return republish
   */
  @javax.annotation.Nullable
  public Boolean getRepublish() {
    return republish;
  }

  public void setRepublish(@javax.annotation.Nullable Boolean republish) {
    this.republish = republish;
  }


  public Publication endingAt(@javax.annotation.Nullable OffsetDateTime endingAt) {
    this.endingAt = endingAt;
    return this;
  }

  /**
   * Publication ending date: Format (ISO 8601) - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. Cannot be modified
   * @return endingAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndingAt() {
    return endingAt;
  }

  public void setEndingAt(@javax.annotation.Nullable OffsetDateTime endingAt) {
    this.endingAt = endingAt;
  }


  /**
   * Indicates the reason for ending the offer: - &#x60;USER&#x60; - offer ended by the seller. - &#x60;ADMIN&#x60; - offer ended by an admin. - &#x60;EXPIRATION&#x60; - offer duration had expired (valid for offers with specified duration). - &#x60;EMPTY_STOCK&#x60; - offer ended because all available items had been sold out. - &#x60;PRODUCT_DETACHMENT&#x60; - offer ended because its link to the product was removed. Status will only occur   if the base marketplace of offer requires full productization. - &#x60;ERROR&#x60; - offer ended due to internal problem with offer publication. The publication command responded with   success status, but further processing failed.
   * @return endedBy
   */
  @javax.annotation.Nullable
  public EndedByEnum getEndedBy() {
    return endedBy;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Publication publication = (Publication) o;
    return Objects.equals(this.duration, publication.duration) &&
        Objects.equals(this.startingAt, publication.startingAt) &&
        Objects.equals(this.status, publication.status) &&
        Objects.equals(this.republish, publication.republish) &&
        Objects.equals(this.endingAt, publication.endingAt) &&
        Objects.equals(this.endedBy, publication.endedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, startingAt, status, republish, endingAt, endedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Publication {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    startingAt: ").append(toIndentedString(startingAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    republish: ").append(toIndentedString(republish)).append("\n");
    sb.append("    endingAt: ").append(toIndentedString(endingAt)).append("\n");
    sb.append("    endedBy: ").append(toIndentedString(endedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("startingAt");
    openapiFields.add("status");
    openapiFields.add("republish");
    openapiFields.add("endingAt");
    openapiFields.add("endedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Publication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Publication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Publication is not found in the empty JSON string", Publication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Publication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Publication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        OfferStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("endedBy") != null && !jsonObj.get("endedBy").isJsonNull()) && !jsonObj.get("endedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endedBy").toString()));
      }
      // validate the optional field `endedBy`
      if (jsonObj.get("endedBy") != null && !jsonObj.get("endedBy").isJsonNull()) {
        EndedByEnum.validateJsonElement(jsonObj.get("endedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Publication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Publication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Publication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Publication.class));

       return (TypeAdapter<T>) new TypeAdapter<Publication>() {
           @Override
           public void write(JsonWriter out, Publication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Publication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Publication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Publication
   * @throws IOException if the JSON string is invalid with respect to Publication
   */
  public static Publication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Publication.class);
  }

  /**
   * Convert an instance of Publication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

