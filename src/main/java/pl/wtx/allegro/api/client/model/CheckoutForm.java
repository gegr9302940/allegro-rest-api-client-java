/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import pl.wtx.allegro.api.client.model.CheckoutFormBuyerReference;
import pl.wtx.allegro.api.client.model.CheckoutFormDeliveryReference;
import pl.wtx.allegro.api.client.model.CheckoutFormDiscount;
import pl.wtx.allegro.api.client.model.CheckoutFormFulfillment;
import pl.wtx.allegro.api.client.model.CheckoutFormInvoiceInfo;
import pl.wtx.allegro.api.client.model.CheckoutFormLineItem;
import pl.wtx.allegro.api.client.model.CheckoutFormMarketplace;
import pl.wtx.allegro.api.client.model.CheckoutFormNoteReference;
import pl.wtx.allegro.api.client.model.CheckoutFormPaymentReference;
import pl.wtx.allegro.api.client.model.CheckoutFormStatus;
import pl.wtx.allegro.api.client.model.CheckoutFormSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CheckoutForm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckoutForm {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_MESSAGE_TO_SELLER = "messageToSeller";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TO_SELLER)
  @javax.annotation.Nullable
  private String messageToSeller;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  @javax.annotation.Nonnull
  private CheckoutFormBuyerReference buyer;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  @javax.annotation.Nullable
  private CheckoutFormPaymentReference payment;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private CheckoutFormStatus status;

  public static final String SERIALIZED_NAME_FULFILLMENT = "fulfillment";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT)
  @javax.annotation.Nullable
  private CheckoutFormFulfillment fulfillment;

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  @javax.annotation.Nullable
  private CheckoutFormDeliveryReference delivery;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  @javax.annotation.Nullable
  private CheckoutFormInvoiceInfo invoice;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  @javax.annotation.Nonnull
  private List<CheckoutFormLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_SURCHARGES = "surcharges";
  @SerializedName(SERIALIZED_NAME_SURCHARGES)
  @javax.annotation.Nonnull
  private List<CheckoutFormPaymentReference> surcharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  @javax.annotation.Nonnull
  private List<CheckoutFormDiscount> discounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  @javax.annotation.Nullable
  private CheckoutFormNoteReference note;

  public static final String SERIALIZED_NAME_MARKETPLACE = "marketplace";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE)
  @javax.annotation.Nullable
  private CheckoutFormMarketplace marketplace;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  @javax.annotation.Nonnull
  private CheckoutFormSummary summary;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private String updatedAt;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  @javax.annotation.Nullable
  private String revision;

  public CheckoutForm() {
  }

  public CheckoutForm id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Checkout form id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public CheckoutForm messageToSeller(@javax.annotation.Nullable String messageToSeller) {
    this.messageToSeller = messageToSeller;
    return this;
  }

  /**
   * Message from buyer to seller
   * @return messageToSeller
   */
  @javax.annotation.Nullable
  public String getMessageToSeller() {
    return messageToSeller;
  }

  public void setMessageToSeller(@javax.annotation.Nullable String messageToSeller) {
    this.messageToSeller = messageToSeller;
  }


  public CheckoutForm buyer(@javax.annotation.Nonnull CheckoutFormBuyerReference buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nonnull
  public CheckoutFormBuyerReference getBuyer() {
    return buyer;
  }

  public void setBuyer(@javax.annotation.Nonnull CheckoutFormBuyerReference buyer) {
    this.buyer = buyer;
  }


  public CheckoutForm payment(@javax.annotation.Nullable CheckoutFormPaymentReference payment) {
    this.payment = payment;
    return this;
  }

  /**
   * Get payment
   * @return payment
   */
  @javax.annotation.Nullable
  public CheckoutFormPaymentReference getPayment() {
    return payment;
  }

  public void setPayment(@javax.annotation.Nullable CheckoutFormPaymentReference payment) {
    this.payment = payment;
  }


  public CheckoutForm status(@javax.annotation.Nonnull CheckoutFormStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public CheckoutFormStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull CheckoutFormStatus status) {
    this.status = status;
  }


  public CheckoutForm fulfillment(@javax.annotation.Nullable CheckoutFormFulfillment fulfillment) {
    this.fulfillment = fulfillment;
    return this;
  }

  /**
   * Get fulfillment
   * @return fulfillment
   */
  @javax.annotation.Nullable
  public CheckoutFormFulfillment getFulfillment() {
    return fulfillment;
  }

  public void setFulfillment(@javax.annotation.Nullable CheckoutFormFulfillment fulfillment) {
    this.fulfillment = fulfillment;
  }


  public CheckoutForm delivery(@javax.annotation.Nullable CheckoutFormDeliveryReference delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Get delivery
   * @return delivery
   */
  @javax.annotation.Nullable
  public CheckoutFormDeliveryReference getDelivery() {
    return delivery;
  }

  public void setDelivery(@javax.annotation.Nullable CheckoutFormDeliveryReference delivery) {
    this.delivery = delivery;
  }


  public CheckoutForm invoice(@javax.annotation.Nullable CheckoutFormInvoiceInfo invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public CheckoutFormInvoiceInfo getInvoice() {
    return invoice;
  }

  public void setInvoice(@javax.annotation.Nullable CheckoutFormInvoiceInfo invoice) {
    this.invoice = invoice;
  }


  public CheckoutForm lineItems(@javax.annotation.Nonnull List<CheckoutFormLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public CheckoutForm addLineItemsItem(CheckoutFormLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Get lineItems
   * @return lineItems
   */
  @javax.annotation.Nonnull
  public List<CheckoutFormLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(@javax.annotation.Nonnull List<CheckoutFormLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public CheckoutForm surcharges(@javax.annotation.Nonnull List<CheckoutFormPaymentReference> surcharges) {
    this.surcharges = surcharges;
    return this;
  }

  public CheckoutForm addSurchargesItem(CheckoutFormPaymentReference surchargesItem) {
    if (this.surcharges == null) {
      this.surcharges = new ArrayList<>();
    }
    this.surcharges.add(surchargesItem);
    return this;
  }

  /**
   * Get surcharges
   * @return surcharges
   */
  @javax.annotation.Nonnull
  public List<CheckoutFormPaymentReference> getSurcharges() {
    return surcharges;
  }

  public void setSurcharges(@javax.annotation.Nonnull List<CheckoutFormPaymentReference> surcharges) {
    this.surcharges = surcharges;
  }


  @Deprecated
  public CheckoutForm discounts(@javax.annotation.Nonnull List<CheckoutFormDiscount> discounts) {
    this.discounts = discounts;
    return this;
  }

  public CheckoutForm addDiscountsItem(CheckoutFormDiscount discountsItem) {
    if (this.discounts == null) {
      this.discounts = new ArrayList<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

  /**
   * Deprecated. This field is deprecated in favor of &#x60;lineItems[].discounts&#x60; and will be removed in the future.
   * @return discounts
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public List<CheckoutFormDiscount> getDiscounts() {
    return discounts;
  }

  @Deprecated
  public void setDiscounts(@javax.annotation.Nonnull List<CheckoutFormDiscount> discounts) {
    this.discounts = discounts;
  }


  public CheckoutForm note(@javax.annotation.Nullable CheckoutFormNoteReference note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public CheckoutFormNoteReference getNote() {
    return note;
  }

  public void setNote(@javax.annotation.Nullable CheckoutFormNoteReference note) {
    this.note = note;
  }


  public CheckoutForm marketplace(@javax.annotation.Nullable CheckoutFormMarketplace marketplace) {
    this.marketplace = marketplace;
    return this;
  }

  /**
   * Get marketplace
   * @return marketplace
   */
  @javax.annotation.Nullable
  public CheckoutFormMarketplace getMarketplace() {
    return marketplace;
  }

  public void setMarketplace(@javax.annotation.Nullable CheckoutFormMarketplace marketplace) {
    this.marketplace = marketplace;
  }


  public CheckoutForm summary(@javax.annotation.Nonnull CheckoutFormSummary summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nonnull
  public CheckoutFormSummary getSummary() {
    return summary;
  }

  public void setSummary(@javax.annotation.Nonnull CheckoutFormSummary summary) {
    this.summary = summary;
  }


  public CheckoutForm updatedAt(@javax.annotation.Nullable String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Provided in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CheckoutForm revision(@javax.annotation.Nullable String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Checkout form revision
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(@javax.annotation.Nullable String revision) {
    this.revision = revision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutForm checkoutForm = (CheckoutForm) o;
    return Objects.equals(this.id, checkoutForm.id) &&
        Objects.equals(this.messageToSeller, checkoutForm.messageToSeller) &&
        Objects.equals(this.buyer, checkoutForm.buyer) &&
        Objects.equals(this.payment, checkoutForm.payment) &&
        Objects.equals(this.status, checkoutForm.status) &&
        Objects.equals(this.fulfillment, checkoutForm.fulfillment) &&
        Objects.equals(this.delivery, checkoutForm.delivery) &&
        Objects.equals(this.invoice, checkoutForm.invoice) &&
        Objects.equals(this.lineItems, checkoutForm.lineItems) &&
        Objects.equals(this.surcharges, checkoutForm.surcharges) &&
        Objects.equals(this.discounts, checkoutForm.discounts) &&
        Objects.equals(this.note, checkoutForm.note) &&
        Objects.equals(this.marketplace, checkoutForm.marketplace) &&
        Objects.equals(this.summary, checkoutForm.summary) &&
        Objects.equals(this.updatedAt, checkoutForm.updatedAt) &&
        Objects.equals(this.revision, checkoutForm.revision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, messageToSeller, buyer, payment, status, fulfillment, delivery, invoice, lineItems, surcharges, discounts, note, marketplace, summary, updatedAt, revision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutForm {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    messageToSeller: ").append(toIndentedString(messageToSeller)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    fulfillment: ").append(toIndentedString(fulfillment)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    surcharges: ").append(toIndentedString(surcharges)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    marketplace: ").append(toIndentedString(marketplace)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("messageToSeller");
    openapiFields.add("buyer");
    openapiFields.add("payment");
    openapiFields.add("status");
    openapiFields.add("fulfillment");
    openapiFields.add("delivery");
    openapiFields.add("invoice");
    openapiFields.add("lineItems");
    openapiFields.add("surcharges");
    openapiFields.add("discounts");
    openapiFields.add("note");
    openapiFields.add("marketplace");
    openapiFields.add("summary");
    openapiFields.add("updatedAt");
    openapiFields.add("revision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("buyer");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("lineItems");
    openapiRequiredFields.add("surcharges");
    openapiRequiredFields.add("discounts");
    openapiRequiredFields.add("summary");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutForm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutForm is not found in the empty JSON string", CheckoutForm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutForm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutForm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutForm.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("messageToSeller") != null && !jsonObj.get("messageToSeller").isJsonNull()) && !jsonObj.get("messageToSeller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageToSeller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageToSeller").toString()));
      }
      // validate the required field `buyer`
      CheckoutFormBuyerReference.validateJsonElement(jsonObj.get("buyer"));
      // validate the optional field `payment`
      if (jsonObj.get("payment") != null && !jsonObj.get("payment").isJsonNull()) {
        CheckoutFormPaymentReference.validateJsonElement(jsonObj.get("payment"));
      }
      // validate the required field `status`
      CheckoutFormStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `fulfillment`
      if (jsonObj.get("fulfillment") != null && !jsonObj.get("fulfillment").isJsonNull()) {
        CheckoutFormFulfillment.validateJsonElement(jsonObj.get("fulfillment"));
      }
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        CheckoutFormDeliveryReference.validateJsonElement(jsonObj.get("delivery"));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        CheckoutFormInvoiceInfo.validateJsonElement(jsonObj.get("invoice"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("lineItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
      }

      JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
      // validate the required field `lineItems` (array)
      for (int i = 0; i < jsonArraylineItems.size(); i++) {
        CheckoutFormLineItem.validateJsonElement(jsonArraylineItems.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("surcharges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `surcharges` to be an array in the JSON string but got `%s`", jsonObj.get("surcharges").toString()));
      }

      JsonArray jsonArraysurcharges = jsonObj.getAsJsonArray("surcharges");
      // validate the required field `surcharges` (array)
      for (int i = 0; i < jsonArraysurcharges.size(); i++) {
        CheckoutFormPaymentReference.validateJsonElement(jsonArraysurcharges.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("discounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
      }

      JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
      // validate the required field `discounts` (array)
      for (int i = 0; i < jsonArraydiscounts.size(); i++) {
        CheckoutFormDiscount.validateJsonElement(jsonArraydiscounts.get(i));
      };
      // validate the optional field `note`
      if (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) {
        CheckoutFormNoteReference.validateJsonElement(jsonObj.get("note"));
      }
      // validate the optional field `marketplace`
      if (jsonObj.get("marketplace") != null && !jsonObj.get("marketplace").isJsonNull()) {
        CheckoutFormMarketplace.validateJsonElement(jsonObj.get("marketplace"));
      }
      // validate the required field `summary`
      CheckoutFormSummary.validateJsonElement(jsonObj.get("summary"));
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutForm.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutForm>() {
           @Override
           public void write(JsonWriter out, CheckoutForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutForm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutForm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutForm
   * @throws IOException if the JSON string is invalid with respect to CheckoutForm
   */
  public static CheckoutForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutForm.class);
  }

  /**
   * Convert an instance of CheckoutForm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

