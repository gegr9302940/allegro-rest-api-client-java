/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.ListingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublicOfferInformationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublicOfferInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicOfferInformationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getListing
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param sellerId The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param sellerLogin The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param marketplaceId Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;, &#x60;allegro-hu&#x60;. (optional, default to allegro-pl)
     * @param shippingCountry Expected language of messages. (optional)
     * @param currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param acceptLanguage Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param searchMode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to REGULAR)
     * @param offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param limit The maximum number of offers in a response. (optional, default to 60)
     * @param sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to relevance)
     * @param include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request successfully returns the search result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check if all necessary parameters are provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied. Application verification required. Read more: &lt;a href&#x3D;\&quot;../../listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../en/listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given category was not found. Check category.id parameter. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Value of one of Accept headers is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value or given parameters combination is forbidden. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request was rejected because the limit was exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Error caused by upstream service failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListingCall(@javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String sellerId, @javax.annotation.Nullable String sellerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String shippingCountry, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String searchMode, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String include, @javax.annotation.Nullable Boolean fallback, @javax.annotation.Nullable Map<String, String> dynamicFilters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category.id", categoryId));
        }

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller.id", sellerId));
        }

        if (sellerLogin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller.login", sellerLogin));
        }

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceId", marketplaceId));
        }

        if (shippingCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipping.country", shippingCountry));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (searchMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchMode", searchMode));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (fallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fallback", fallback));
        }

        if (dynamicFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Dynamic filters", dynamicFilters));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListingValidateBeforeCall(@javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String sellerId, @javax.annotation.Nullable String sellerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String shippingCountry, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String searchMode, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String include, @javax.annotation.Nullable Boolean fallback, @javax.annotation.Nullable Map<String, String> dynamicFilters, final ApiCallback _callback) throws ApiException {
        return getListingCall(categoryId, phrase, sellerId, sellerLogin, marketplaceId, shippingCountry, currency, acceptLanguage, searchMode, offset, limit, sort, include, fallback, dynamicFilters, _callback);

    }

    /**
     * Search offers
     * &lt;a href&#x3D;\&quot;../../listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Access for verified applications only&lt;/a&gt;. Use this resource to get a list of offers based on the provided query parameters. At least one of: phrase, seller.id or category.id is required. Additional available parameters vary depending on category.id. The parameters are defined in the filters entity. Changing the marketplace, country of delivery, currency or language may impact the availability of offers and filters. Note that requests for closed offers may be limited.  Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wyszukiwac-przegladac-oferty-ZM9YAKAwgfk\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-search-and-browse-offers-XxWm2ykMYHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param sellerId The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param sellerLogin The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param marketplaceId Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;, &#x60;allegro-hu&#x60;. (optional, default to allegro-pl)
     * @param shippingCountry Expected language of messages. (optional)
     * @param currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param acceptLanguage Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param searchMode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to REGULAR)
     * @param offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param limit The maximum number of offers in a response. (optional, default to 60)
     * @param sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to relevance)
     * @param include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     * @return ListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request successfully returns the search result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check if all necessary parameters are provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied. Application verification required. Read more: &lt;a href&#x3D;\&quot;../../listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../en/listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given category was not found. Check category.id parameter. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Value of one of Accept headers is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value or given parameters combination is forbidden. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request was rejected because the limit was exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Error caused by upstream service failure. </td><td>  -  </td></tr>
     </table>
     */
    public ListingResponse getListing(@javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String sellerId, @javax.annotation.Nullable String sellerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String shippingCountry, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String searchMode, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String include, @javax.annotation.Nullable Boolean fallback, @javax.annotation.Nullable Map<String, String> dynamicFilters) throws ApiException {
        ApiResponse<ListingResponse> localVarResp = getListingWithHttpInfo(categoryId, phrase, sellerId, sellerLogin, marketplaceId, shippingCountry, currency, acceptLanguage, searchMode, offset, limit, sort, include, fallback, dynamicFilters);
        return localVarResp.getData();
    }

    /**
     * Search offers
     * &lt;a href&#x3D;\&quot;../../listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Access for verified applications only&lt;/a&gt;. Use this resource to get a list of offers based on the provided query parameters. At least one of: phrase, seller.id or category.id is required. Additional available parameters vary depending on category.id. The parameters are defined in the filters entity. Changing the marketplace, country of delivery, currency or language may impact the availability of offers and filters. Note that requests for closed offers may be limited.  Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wyszukiwac-przegladac-oferty-ZM9YAKAwgfk\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-search-and-browse-offers-XxWm2ykMYHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param sellerId The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param sellerLogin The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param marketplaceId Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;, &#x60;allegro-hu&#x60;. (optional, default to allegro-pl)
     * @param shippingCountry Expected language of messages. (optional)
     * @param currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param acceptLanguage Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param searchMode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to REGULAR)
     * @param offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param limit The maximum number of offers in a response. (optional, default to 60)
     * @param sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to relevance)
     * @param include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     * @return ApiResponse&lt;ListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request successfully returns the search result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check if all necessary parameters are provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied. Application verification required. Read more: &lt;a href&#x3D;\&quot;../../listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../en/listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given category was not found. Check category.id parameter. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Value of one of Accept headers is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value or given parameters combination is forbidden. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request was rejected because the limit was exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Error caused by upstream service failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListingResponse> getListingWithHttpInfo(@javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String sellerId, @javax.annotation.Nullable String sellerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String shippingCountry, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String searchMode, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String include, @javax.annotation.Nullable Boolean fallback, @javax.annotation.Nullable Map<String, String> dynamicFilters) throws ApiException {
        okhttp3.Call localVarCall = getListingValidateBeforeCall(categoryId, phrase, sellerId, sellerLogin, marketplaceId, shippingCountry, currency, acceptLanguage, searchMode, offset, limit, sort, include, fallback, dynamicFilters, null);
        Type localVarReturnType = new TypeToken<ListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search offers (asynchronously)
     * &lt;a href&#x3D;\&quot;../../listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Access for verified applications only&lt;/a&gt;. Use this resource to get a list of offers based on the provided query parameters. At least one of: phrase, seller.id or category.id is required. Additional available parameters vary depending on category.id. The parameters are defined in the filters entity. Changing the marketplace, country of delivery, currency or language may impact the availability of offers and filters. Note that requests for closed offers may be limited.  Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-wyszukiwac-przegladac-oferty-ZM9YAKAwgfk\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-search-and-browse-offers-XxWm2ykMYHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param sellerId The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param sellerLogin The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param marketplaceId Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;, &#x60;allegro-hu&#x60;. (optional, default to allegro-pl)
     * @param shippingCountry Expected language of messages. (optional)
     * @param currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param acceptLanguage Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param searchMode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to REGULAR)
     * @param offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param limit The maximum number of offers in a response. (optional, default to 60)
     * @param sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to relevance)
     * @param include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param dynamicFilters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request successfully returns the search result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check if all necessary parameters are provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access is denied. Application verification required. Read more: &lt;a href&#x3D;\&quot;../../listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../en/listing/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given category was not found. Check category.id parameter. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Value of one of Accept headers is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> One of parameters have invalid value or given parameters combination is forbidden. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request was rejected because the limit was exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal service error. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Error caused by upstream service failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListingAsync(@javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String phrase, @javax.annotation.Nullable String sellerId, @javax.annotation.Nullable String sellerLogin, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String shippingCountry, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String searchMode, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String include, @javax.annotation.Nullable Boolean fallback, @javax.annotation.Nullable Map<String, String> dynamicFilters, final ApiCallback<ListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListingValidateBeforeCall(categoryId, phrase, sellerId, sellerLogin, marketplaceId, shippingCountry, currency, acceptLanguage, searchMode, offset, limit, sort, include, fallback, dynamicFilters, _callback);
        Type localVarReturnType = new TypeToken<ListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
