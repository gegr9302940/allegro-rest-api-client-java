/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.ReserveInfo;
import pl.wtx.allegro.api.client.model.StockProduct;
import pl.wtx.allegro.api.client.model.StockQuantity;
import pl.wtx.allegro.api.client.model.StockSellingStats;
import pl.wtx.allegro.api.client.model.StockStorageFee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Groups together product and its quantity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class StockProductItem {
  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  @javax.annotation.Nullable
  private StockProduct product;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nullable
  private StockQuantity quantity;

  public static final String SERIALIZED_NAME_SELLING_STATS = "sellingStats";
  @SerializedName(SERIALIZED_NAME_SELLING_STATS)
  @javax.annotation.Nullable
  private StockSellingStats sellingStats;

  public static final String SERIALIZED_NAME_RESERVE = "reserve";
  @SerializedName(SERIALIZED_NAME_RESERVE)
  @javax.annotation.Nullable
  private ReserveInfo reserve;

  public static final String SERIALIZED_NAME_STORAGE_FEE = "storageFee";
  @SerializedName(SERIALIZED_NAME_STORAGE_FEE)
  @javax.annotation.Nullable
  private StockStorageFee storageFee;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  @javax.annotation.Nullable
  private String offerId;

  public StockProductItem() {
  }

  public StockProductItem product(@javax.annotation.Nullable StockProduct product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public StockProduct getProduct() {
    return product;
  }

  public void setProduct(@javax.annotation.Nullable StockProduct product) {
    this.product = product;
  }


  public StockProductItem quantity(@javax.annotation.Nullable StockQuantity quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public StockQuantity getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nullable StockQuantity quantity) {
    this.quantity = quantity;
  }


  public StockProductItem sellingStats(@javax.annotation.Nullable StockSellingStats sellingStats) {
    this.sellingStats = sellingStats;
    return this;
  }

  /**
   * Get sellingStats
   * @return sellingStats
   */
  @javax.annotation.Nullable
  public StockSellingStats getSellingStats() {
    return sellingStats;
  }

  public void setSellingStats(@javax.annotation.Nullable StockSellingStats sellingStats) {
    this.sellingStats = sellingStats;
  }


  public StockProductItem reserve(@javax.annotation.Nullable ReserveInfo reserve) {
    this.reserve = reserve;
    return this;
  }

  /**
   * Get reserve
   * @return reserve
   */
  @javax.annotation.Nullable
  public ReserveInfo getReserve() {
    return reserve;
  }

  public void setReserve(@javax.annotation.Nullable ReserveInfo reserve) {
    this.reserve = reserve;
  }


  public StockProductItem storageFee(@javax.annotation.Nullable StockStorageFee storageFee) {
    this.storageFee = storageFee;
    return this;
  }

  /**
   * Get storageFee
   * @return storageFee
   */
  @javax.annotation.Nullable
  public StockStorageFee getStorageFee() {
    return storageFee;
  }

  public void setStorageFee(@javax.annotation.Nullable StockStorageFee storageFee) {
    this.storageFee = storageFee;
  }


  public StockProductItem offerId(@javax.annotation.Nullable String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Identifier of the offer currently attached to the product.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(@javax.annotation.Nullable String offerId) {
    this.offerId = offerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StockProductItem stockProductItem = (StockProductItem) o;
    return Objects.equals(this.product, stockProductItem.product) &&
        Objects.equals(this.quantity, stockProductItem.quantity) &&
        Objects.equals(this.sellingStats, stockProductItem.sellingStats) &&
        Objects.equals(this.reserve, stockProductItem.reserve) &&
        Objects.equals(this.storageFee, stockProductItem.storageFee) &&
        Objects.equals(this.offerId, stockProductItem.offerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(product, quantity, sellingStats, reserve, storageFee, offerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockProductItem {\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    sellingStats: ").append(toIndentedString(sellingStats)).append("\n");
    sb.append("    reserve: ").append(toIndentedString(reserve)).append("\n");
    sb.append("    storageFee: ").append(toIndentedString(storageFee)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product");
    openapiFields.add("quantity");
    openapiFields.add("sellingStats");
    openapiFields.add("reserve");
    openapiFields.add("storageFee");
    openapiFields.add("offerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StockProductItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StockProductItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StockProductItem is not found in the empty JSON string", StockProductItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StockProductItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StockProductItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        StockProduct.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `quantity`
      if (jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull()) {
        StockQuantity.validateJsonElement(jsonObj.get("quantity"));
      }
      // validate the optional field `sellingStats`
      if (jsonObj.get("sellingStats") != null && !jsonObj.get("sellingStats").isJsonNull()) {
        StockSellingStats.validateJsonElement(jsonObj.get("sellingStats"));
      }
      // validate the optional field `reserve`
      if (jsonObj.get("reserve") != null && !jsonObj.get("reserve").isJsonNull()) {
        ReserveInfo.validateJsonElement(jsonObj.get("reserve"));
      }
      // validate the optional field `storageFee`
      if (jsonObj.get("storageFee") != null && !jsonObj.get("storageFee").isJsonNull()) {
        StockStorageFee.validateJsonElement(jsonObj.get("storageFee"));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StockProductItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StockProductItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StockProductItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StockProductItem.class));

       return (TypeAdapter<T>) new TypeAdapter<StockProductItem>() {
           @Override
           public void write(JsonWriter out, StockProductItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StockProductItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StockProductItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StockProductItem
   * @throws IOException if the JSON string is invalid with respect to StockProductItem
   */
  public static StockProductItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StockProductItem.class);
  }

  /**
   * Convert an instance of StockProductItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

