/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.CustomerReturn;
import pl.wtx.allegro.api.client.model.CustomerReturnRefundRejectionRequest;
import pl.wtx.allegro.api.client.model.CustomerReturnResponse;
import pl.wtx.allegro.api.client.model.ErrorsHolder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerReturnsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerReturnsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerReturnsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCustomerReturnById
     * @param customerReturnId Id of the customer return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerReturnByIdCall(@javax.annotation.Nonnull String customerReturnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/customer-returns/{customerReturnId}"
            .replace("{" + "customerReturnId" + "}", localVarApiClient.escapeString(customerReturnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.beta.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerReturnByIdValidateBeforeCall(@javax.annotation.Nonnull String customerReturnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerReturnId' is set
        if (customerReturnId == null) {
            throw new ApiException("Missing the required parameter 'customerReturnId' when calling getCustomerReturnById(Async)");
        }

        return getCustomerReturnByIdCall(customerReturnId, _callback);

    }

    /**
     * [BETA] Get customer return by id
     * Use this resource to get customer returns by its identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-szczegolowe-informacje-o-zwrocie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-detailed-information-about-customer-return\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param customerReturnId Id of the customer return. (required)
     * @return CustomerReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public CustomerReturn getCustomerReturnById(@javax.annotation.Nonnull String customerReturnId) throws ApiException {
        ApiResponse<CustomerReturn> localVarResp = getCustomerReturnByIdWithHttpInfo(customerReturnId);
        return localVarResp.getData();
    }

    /**
     * [BETA] Get customer return by id
     * Use this resource to get customer returns by its identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-szczegolowe-informacje-o-zwrocie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-detailed-information-about-customer-return\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param customerReturnId Id of the customer return. (required)
     * @return ApiResponse&lt;CustomerReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerReturn> getCustomerReturnByIdWithHttpInfo(@javax.annotation.Nonnull String customerReturnId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerReturnByIdValidateBeforeCall(customerReturnId, null);
        Type localVarReturnType = new TypeToken<CustomerReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [BETA] Get customer return by id (asynchronously)
     * Use this resource to get customer returns by its identifier. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-szczegolowe-informacje-o-zwrocie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-detailed-information-about-customer-return\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param customerReturnId Id of the customer return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerReturnByIdAsync(@javax.annotation.Nonnull String customerReturnId, final ApiCallback<CustomerReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerReturnByIdValidateBeforeCall(customerReturnId, _callback);
        Type localVarReturnType = new TypeToken<CustomerReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerReturns
     * @param customerReturnId One or more customer return id&#39;s. (optional)
     * @param orderId One or more order id&#39;s. (optional)
     * @param buyerEmail One or more buyer emails. (optional)
     * @param buyerLogin One or more buyer logins. (optional)
     * @param itemsOfferId One or more returned item offer id&#39;s. (optional)
     * @param itemsName One or more item names. (optional)
     * @param parcelsWaybill One or more waybill id&#39;s. (optional)
     * @param parcelsTransportingWaybill Waybill ids as generated by carriers physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsCarrierId One or more carrier id&#39;s. (optional)
     * @param parcelsTransportingCarrierId Carrier id of a carrier physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsSenderPhoneNumber One or more phone numbers. (optional)
     * @param referenceNumber One or more reference numbers. (optional)
     * @param from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param createdAtGte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param createdAtLte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * FINISHED_APT   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param limit Limit of customer returns per page. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer returns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerReturnsCall(@javax.annotation.Nullable String customerReturnId, @javax.annotation.Nullable String orderId, @javax.annotation.Nullable String buyerEmail, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String itemsOfferId, @javax.annotation.Nullable String itemsName, @javax.annotation.Nullable String parcelsWaybill, @javax.annotation.Nullable String parcelsTransportingWaybill, @javax.annotation.Nullable String parcelsCarrierId, @javax.annotation.Nullable String parcelsTransportingCarrierId, @javax.annotation.Nullable String parcelsSenderPhoneNumber, @javax.annotation.Nullable String referenceNumber, @javax.annotation.Nullable String from, @javax.annotation.Nullable String createdAtGte, @javax.annotation.Nullable String createdAtLte, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/customer-returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerReturnId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerReturnId", customerReturnId));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (buyerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer.email", buyerEmail));
        }

        if (buyerLogin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer.login", buyerLogin));
        }

        if (itemsOfferId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items.offerId", itemsOfferId));
        }

        if (itemsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items.name", itemsName));
        }

        if (parcelsWaybill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parcels.waybill", parcelsWaybill));
        }

        if (parcelsTransportingWaybill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parcels.transportingWaybill", parcelsTransportingWaybill));
        }

        if (parcelsCarrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parcels.carrierId", parcelsCarrierId));
        }

        if (parcelsTransportingCarrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parcels.transportingCarrierId", parcelsTransportingCarrierId));
        }

        if (parcelsSenderPhoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parcels.sender.phoneNumber", parcelsSenderPhoneNumber));
        }

        if (referenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceNumber", referenceNumber));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (createdAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt.gte", createdAtGte));
        }

        if (createdAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt.lte", createdAtLte));
        }

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceId", marketplaceId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.beta.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerReturnsValidateBeforeCall(@javax.annotation.Nullable String customerReturnId, @javax.annotation.Nullable String orderId, @javax.annotation.Nullable String buyerEmail, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String itemsOfferId, @javax.annotation.Nullable String itemsName, @javax.annotation.Nullable String parcelsWaybill, @javax.annotation.Nullable String parcelsTransportingWaybill, @javax.annotation.Nullable String parcelsCarrierId, @javax.annotation.Nullable String parcelsTransportingCarrierId, @javax.annotation.Nullable String parcelsSenderPhoneNumber, @javax.annotation.Nullable String referenceNumber, @javax.annotation.Nullable String from, @javax.annotation.Nullable String createdAtGte, @javax.annotation.Nullable String createdAtLte, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return getCustomerReturnsCall(customerReturnId, orderId, buyerEmail, buyerLogin, itemsOfferId, itemsName, parcelsWaybill, parcelsTransportingWaybill, parcelsCarrierId, parcelsTransportingCarrierId, parcelsSenderPhoneNumber, referenceNumber, from, createdAtGte, createdAtLte, marketplaceId, status, limit, offset, _callback);

    }

    /**
     * [BETA] Get customer returns by provided query parameters
     * Use this resource to get all customer returns filtered by query parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-customer-returns-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited to 25 requests per second for a single user and 50 requests per second for clientId.
     * @param customerReturnId One or more customer return id&#39;s. (optional)
     * @param orderId One or more order id&#39;s. (optional)
     * @param buyerEmail One or more buyer emails. (optional)
     * @param buyerLogin One or more buyer logins. (optional)
     * @param itemsOfferId One or more returned item offer id&#39;s. (optional)
     * @param itemsName One or more item names. (optional)
     * @param parcelsWaybill One or more waybill id&#39;s. (optional)
     * @param parcelsTransportingWaybill Waybill ids as generated by carriers physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsCarrierId One or more carrier id&#39;s. (optional)
     * @param parcelsTransportingCarrierId Carrier id of a carrier physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsSenderPhoneNumber One or more phone numbers. (optional)
     * @param referenceNumber One or more reference numbers. (optional)
     * @param from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param createdAtGte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param createdAtLte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * FINISHED_APT   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param limit Limit of customer returns per page. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return CustomerReturnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer returns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public CustomerReturnResponse getCustomerReturns(@javax.annotation.Nullable String customerReturnId, @javax.annotation.Nullable String orderId, @javax.annotation.Nullable String buyerEmail, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String itemsOfferId, @javax.annotation.Nullable String itemsName, @javax.annotation.Nullable String parcelsWaybill, @javax.annotation.Nullable String parcelsTransportingWaybill, @javax.annotation.Nullable String parcelsCarrierId, @javax.annotation.Nullable String parcelsTransportingCarrierId, @javax.annotation.Nullable String parcelsSenderPhoneNumber, @javax.annotation.Nullable String referenceNumber, @javax.annotation.Nullable String from, @javax.annotation.Nullable String createdAtGte, @javax.annotation.Nullable String createdAtLte, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<CustomerReturnResponse> localVarResp = getCustomerReturnsWithHttpInfo(customerReturnId, orderId, buyerEmail, buyerLogin, itemsOfferId, itemsName, parcelsWaybill, parcelsTransportingWaybill, parcelsCarrierId, parcelsTransportingCarrierId, parcelsSenderPhoneNumber, referenceNumber, from, createdAtGte, createdAtLte, marketplaceId, status, limit, offset);
        return localVarResp.getData();
    }

    /**
     * [BETA] Get customer returns by provided query parameters
     * Use this resource to get all customer returns filtered by query parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-customer-returns-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited to 25 requests per second for a single user and 50 requests per second for clientId.
     * @param customerReturnId One or more customer return id&#39;s. (optional)
     * @param orderId One or more order id&#39;s. (optional)
     * @param buyerEmail One or more buyer emails. (optional)
     * @param buyerLogin One or more buyer logins. (optional)
     * @param itemsOfferId One or more returned item offer id&#39;s. (optional)
     * @param itemsName One or more item names. (optional)
     * @param parcelsWaybill One or more waybill id&#39;s. (optional)
     * @param parcelsTransportingWaybill Waybill ids as generated by carriers physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsCarrierId One or more carrier id&#39;s. (optional)
     * @param parcelsTransportingCarrierId Carrier id of a carrier physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsSenderPhoneNumber One or more phone numbers. (optional)
     * @param referenceNumber One or more reference numbers. (optional)
     * @param from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param createdAtGte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param createdAtLte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * FINISHED_APT   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param limit Limit of customer returns per page. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;CustomerReturnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer returns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerReturnResponse> getCustomerReturnsWithHttpInfo(@javax.annotation.Nullable String customerReturnId, @javax.annotation.Nullable String orderId, @javax.annotation.Nullable String buyerEmail, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String itemsOfferId, @javax.annotation.Nullable String itemsName, @javax.annotation.Nullable String parcelsWaybill, @javax.annotation.Nullable String parcelsTransportingWaybill, @javax.annotation.Nullable String parcelsCarrierId, @javax.annotation.Nullable String parcelsTransportingCarrierId, @javax.annotation.Nullable String parcelsSenderPhoneNumber, @javax.annotation.Nullable String referenceNumber, @javax.annotation.Nullable String from, @javax.annotation.Nullable String createdAtGte, @javax.annotation.Nullable String createdAtLte, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCustomerReturnsValidateBeforeCall(customerReturnId, orderId, buyerEmail, buyerLogin, itemsOfferId, itemsName, parcelsWaybill, parcelsTransportingWaybill, parcelsCarrierId, parcelsTransportingCarrierId, parcelsSenderPhoneNumber, referenceNumber, from, createdAtGte, createdAtLte, marketplaceId, status, limit, offset, null);
        Type localVarReturnType = new TypeToken<CustomerReturnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [BETA] Get customer returns by provided query parameters (asynchronously)
     * Use this resource to get all customer returns filtered by query parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-zwrotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-customer-returns-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is limited to 25 requests per second for a single user and 50 requests per second for clientId.
     * @param customerReturnId One or more customer return id&#39;s. (optional)
     * @param orderId One or more order id&#39;s. (optional)
     * @param buyerEmail One or more buyer emails. (optional)
     * @param buyerLogin One or more buyer logins. (optional)
     * @param itemsOfferId One or more returned item offer id&#39;s. (optional)
     * @param itemsName One or more item names. (optional)
     * @param parcelsWaybill One or more waybill id&#39;s. (optional)
     * @param parcelsTransportingWaybill Waybill ids as generated by carriers physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsCarrierId One or more carrier id&#39;s. (optional)
     * @param parcelsTransportingCarrierId Carrier id of a carrier physically transporting the parcel. Will be null if there&#39;s only one carrier involved in a parcel shipment. (optional)
     * @param parcelsSenderPhoneNumber One or more phone numbers. (optional)
     * @param referenceNumber One or more reference numbers. (optional)
     * @param from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param createdAtGte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param createdAtLte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param marketplaceId The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * FINISHED_APT   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param limit Limit of customer returns per page. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved customer returns. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerReturnsAsync(@javax.annotation.Nullable String customerReturnId, @javax.annotation.Nullable String orderId, @javax.annotation.Nullable String buyerEmail, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String itemsOfferId, @javax.annotation.Nullable String itemsName, @javax.annotation.Nullable String parcelsWaybill, @javax.annotation.Nullable String parcelsTransportingWaybill, @javax.annotation.Nullable String parcelsCarrierId, @javax.annotation.Nullable String parcelsTransportingCarrierId, @javax.annotation.Nullable String parcelsSenderPhoneNumber, @javax.annotation.Nullable String referenceNumber, @javax.annotation.Nullable String from, @javax.annotation.Nullable String createdAtGte, @javax.annotation.Nullable String createdAtLte, @javax.annotation.Nullable String marketplaceId, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<CustomerReturnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerReturnsValidateBeforeCall(customerReturnId, orderId, buyerEmail, buyerLogin, itemsOfferId, itemsName, parcelsWaybill, parcelsTransportingWaybill, parcelsCarrierId, parcelsTransportingCarrierId, parcelsSenderPhoneNumber, referenceNumber, from, createdAtGte, createdAtLte, marketplaceId, status, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CustomerReturnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectCustomerReturnRefund
     * @param customerReturnId Id of the customer return. (required)
     * @param customerReturnRefundRejectionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully rejected customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Might occur when customer return has already been rejected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectCustomerReturnRefundCall(@javax.annotation.Nonnull String customerReturnId, @javax.annotation.Nonnull CustomerReturnRefundRejectionRequest customerReturnRefundRejectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerReturnRefundRejectionRequest;

        // create path and map variables
        String localVarPath = "/order/customer-returns/{customerReturnId}/rejection"
            .replace("{" + "customerReturnId" + "}", localVarApiClient.escapeString(customerReturnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.beta.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.beta.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectCustomerReturnRefundValidateBeforeCall(@javax.annotation.Nonnull String customerReturnId, @javax.annotation.Nonnull CustomerReturnRefundRejectionRequest customerReturnRefundRejectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerReturnId' is set
        if (customerReturnId == null) {
            throw new ApiException("Missing the required parameter 'customerReturnId' when calling rejectCustomerReturnRefund(Async)");
        }

        // verify the required parameter 'customerReturnRefundRejectionRequest' is set
        if (customerReturnRefundRejectionRequest == null) {
            throw new ApiException("Missing the required parameter 'customerReturnRefundRejectionRequest' when calling rejectCustomerReturnRefund(Async)");
        }

        return rejectCustomerReturnRefundCall(customerReturnId, customerReturnRefundRejectionRequest, _callback);

    }

    /**
     * [BETA] Reject customer return refund
     * Use this resource to reject customer return refund with provided reason. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-odmowic-zwrotu-wplaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-reject-customer-return-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param customerReturnId Id of the customer return. (required)
     * @param customerReturnRefundRejectionRequest  (required)
     * @return CustomerReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully rejected customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Might occur when customer return has already been rejected </td><td>  -  </td></tr>
     </table>
     */
    public CustomerReturn rejectCustomerReturnRefund(@javax.annotation.Nonnull String customerReturnId, @javax.annotation.Nonnull CustomerReturnRefundRejectionRequest customerReturnRefundRejectionRequest) throws ApiException {
        ApiResponse<CustomerReturn> localVarResp = rejectCustomerReturnRefundWithHttpInfo(customerReturnId, customerReturnRefundRejectionRequest);
        return localVarResp.getData();
    }

    /**
     * [BETA] Reject customer return refund
     * Use this resource to reject customer return refund with provided reason. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-odmowic-zwrotu-wplaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-reject-customer-return-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param customerReturnId Id of the customer return. (required)
     * @param customerReturnRefundRejectionRequest  (required)
     * @return ApiResponse&lt;CustomerReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully rejected customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Might occur when customer return has already been rejected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerReturn> rejectCustomerReturnRefundWithHttpInfo(@javax.annotation.Nonnull String customerReturnId, @javax.annotation.Nonnull CustomerReturnRefundRejectionRequest customerReturnRefundRejectionRequest) throws ApiException {
        okhttp3.Call localVarCall = rejectCustomerReturnRefundValidateBeforeCall(customerReturnId, customerReturnRefundRejectionRequest, null);
        Type localVarReturnType = new TypeToken<CustomerReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [BETA] Reject customer return refund (asynchronously)
     * Use this resource to reject customer return refund with provided reason. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-odmowic-zwrotu-wplaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-reject-customer-return-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param customerReturnId Id of the customer return. (required)
     * @param customerReturnRefundRejectionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully rejected customer return. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Might occur when customer return has already been rejected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectCustomerReturnRefundAsync(@javax.annotation.Nonnull String customerReturnId, @javax.annotation.Nonnull CustomerReturnRefundRejectionRequest customerReturnRefundRejectionRequest, final ApiCallback<CustomerReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectCustomerReturnRefundValidateBeforeCall(customerReturnId, customerReturnRefundRejectionRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
