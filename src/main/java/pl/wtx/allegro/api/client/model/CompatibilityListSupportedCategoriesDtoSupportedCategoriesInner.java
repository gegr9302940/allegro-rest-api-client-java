/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.CompatibilityListSupportedCategoriesDtoSupportedCategoriesInnerValidationRules;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  @javax.annotation.Nullable
  private String categoryId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ITEMS_TYPE = "itemsType";
  @SerializedName(SERIALIZED_NAME_ITEMS_TYPE)
  @javax.annotation.Nullable
  private String itemsType;

  /**
   * Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;&#x60;TEXT&#x60; - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;&#x60;ID&#x60; - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href&#x3D;\&quot;/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get\&quot;&gt;compatible-products&lt;/a&gt; resource together with &#x60;itemsType&#x60; supported in particular category. &lt;/li&gt; &lt;/ul&gt; 
   */
  @JsonAdapter(InputTypeEnum.Adapter.class)
  public enum InputTypeEnum {
    TEXT("TEXT"),
    
    ID("ID");

    private String value;

    InputTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InputTypeEnum fromValue(String value) {
      for (InputTypeEnum b : InputTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InputTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InputTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InputTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InputTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InputTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INPUT_TYPE = "inputType";
  @SerializedName(SERIALIZED_NAME_INPUT_TYPE)
  @javax.annotation.Nullable
  private InputTypeEnum inputType;

  public static final String SERIALIZED_NAME_VALIDATION_RULES = "validationRules";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RULES)
  @javax.annotation.Nullable
  private CompatibilityListSupportedCategoriesDtoSupportedCategoriesInnerValidationRules validationRules;

  public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner() {
  }

  public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner categoryId(@javax.annotation.Nullable String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Identifier of the category, where you can use the compatibility list in an offer listed in the category or in all subcategories, which belongs to returned category.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(@javax.annotation.Nullable String categoryId) {
    this.categoryId = categoryId;
  }


  public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of supported category.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner itemsType(@javax.annotation.Nullable String itemsType) {
    this.itemsType = itemsType;
    return this;
  }

  /**
   * Type of the compatible item.
   * @return itemsType
   */
  @javax.annotation.Nullable
  public String getItemsType() {
    return itemsType;
  }

  public void setItemsType(@javax.annotation.Nullable String itemsType) {
    this.itemsType = itemsType;
  }


  public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner inputType(@javax.annotation.Nullable InputTypeEnum inputType) {
    this.inputType = inputType;
    return this;
  }

  /**
   * Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;&#x60;TEXT&#x60; - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;&#x60;ID&#x60; - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href&#x3D;\&quot;/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get\&quot;&gt;compatible-products&lt;/a&gt; resource together with &#x60;itemsType&#x60; supported in particular category. &lt;/li&gt; &lt;/ul&gt; 
   * @return inputType
   */
  @javax.annotation.Nullable
  public InputTypeEnum getInputType() {
    return inputType;
  }

  public void setInputType(@javax.annotation.Nullable InputTypeEnum inputType) {
    this.inputType = inputType;
  }


  public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner validationRules(@javax.annotation.Nullable CompatibilityListSupportedCategoriesDtoSupportedCategoriesInnerValidationRules validationRules) {
    this.validationRules = validationRules;
    return this;
  }

  /**
   * Get validationRules
   * @return validationRules
   */
  @javax.annotation.Nullable
  public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInnerValidationRules getValidationRules() {
    return validationRules;
  }

  public void setValidationRules(@javax.annotation.Nullable CompatibilityListSupportedCategoriesDtoSupportedCategoriesInnerValidationRules validationRules) {
    this.validationRules = validationRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner compatibilityListSupportedCategoriesDtoSupportedCategoriesInner = (CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner) o;
    return Objects.equals(this.categoryId, compatibilityListSupportedCategoriesDtoSupportedCategoriesInner.categoryId) &&
        Objects.equals(this.name, compatibilityListSupportedCategoriesDtoSupportedCategoriesInner.name) &&
        Objects.equals(this.itemsType, compatibilityListSupportedCategoriesDtoSupportedCategoriesInner.itemsType) &&
        Objects.equals(this.inputType, compatibilityListSupportedCategoriesDtoSupportedCategoriesInner.inputType) &&
        Objects.equals(this.validationRules, compatibilityListSupportedCategoriesDtoSupportedCategoriesInner.validationRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, name, itemsType, inputType, validationRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    itemsType: ").append(toIndentedString(itemsType)).append("\n");
    sb.append("    inputType: ").append(toIndentedString(inputType)).append("\n");
    sb.append("    validationRules: ").append(toIndentedString(validationRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("name");
    openapiFields.add("itemsType");
    openapiFields.add("inputType");
    openapiFields.add("validationRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner is not found in the empty JSON string", CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("itemsType") != null && !jsonObj.get("itemsType").isJsonNull()) && !jsonObj.get("itemsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemsType").toString()));
      }
      if ((jsonObj.get("inputType") != null && !jsonObj.get("inputType").isJsonNull()) && !jsonObj.get("inputType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputType").toString()));
      }
      // validate the optional field `inputType`
      if (jsonObj.get("inputType") != null && !jsonObj.get("inputType").isJsonNull()) {
        InputTypeEnum.validateJsonElement(jsonObj.get("inputType"));
      }
      // validate the optional field `validationRules`
      if (jsonObj.get("validationRules") != null && !jsonObj.get("validationRules").isJsonNull()) {
        CompatibilityListSupportedCategoriesDtoSupportedCategoriesInnerValidationRules.validateJsonElement(jsonObj.get("validationRules"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner>() {
           @Override
           public void write(JsonWriter out, CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner
   * @throws IOException if the JSON string is invalid with respect to CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner
   */
  public static CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner.class);
  }

  /**
   * Convert an instance of CompatibilityListSupportedCategoriesDtoSupportedCategoriesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

