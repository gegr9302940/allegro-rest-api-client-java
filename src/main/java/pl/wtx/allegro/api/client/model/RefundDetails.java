/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import pl.wtx.allegro.api.client.model.InitializeRefundAdditionalServices;
import pl.wtx.allegro.api.client.model.InitializeRefundDelivery;
import pl.wtx.allegro.api.client.model.InitializeRefundOverpaid;
import pl.wtx.allegro.api.client.model.PaymentsSurcharge;
import pl.wtx.allegro.api.client.model.RefundLineItem;
import pl.wtx.allegro.api.client.model.RefundOrder;
import pl.wtx.allegro.api.client.model.RefundPayment;
import pl.wtx.allegro.api.client.model.RefundTotalValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Detailed information about the refund.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class RefundDetails {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  @javax.annotation.Nonnull
  private RefundPayment payment;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  @javax.annotation.Nullable
  private RefundOrder order;

  /**
   * Reason for a payment refund.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    REFUND("REFUND"),
    
    COMPLAINT("COMPLAINT"),
    
    PRODUCT_NOT_AVAILABLE("PRODUCT_NOT_AVAILABLE"),
    
    PAID_VALUE_TOO_LOW("PAID_VALUE_TOO_LOW"),
    
    OVERPAID("OVERPAID"),
    
    CANCELLED_BY_BUYER("CANCELLED_BY_BUYER"),
    
    NOT_COLLECTED("NOT_COLLECTED");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nonnull
  private ReasonEnum reason;

  /**
   * Current status of payment refund.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESS("SUCCESS"),
    
    CANCELED("CANCELED"),
    
    PARTIAL("PARTIAL"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    VALIDATED("VALIDATED"),
    
    VALIDATE_FAILED("VALIDATE_FAILED"),
    
    NEW("NEW");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TOTAL_VALUE = "totalValue";
  @SerializedName(SERIALIZED_NAME_TOTAL_VALUE)
  @javax.annotation.Nonnull
  private RefundTotalValue totalValue;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  @javax.annotation.Nullable
  private List<RefundLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  @javax.annotation.Nullable
  private InitializeRefundDelivery delivery;

  public static final String SERIALIZED_NAME_OVERPAID = "overpaid";
  @SerializedName(SERIALIZED_NAME_OVERPAID)
  @javax.annotation.Nullable
  private InitializeRefundOverpaid overpaid;

  public static final String SERIALIZED_NAME_SURCHARGES = "surcharges";
  @SerializedName(SERIALIZED_NAME_SURCHARGES)
  @javax.annotation.Nullable
  private List<PaymentsSurcharge> surcharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_SERVICES = "additionalServices";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SERVICES)
  @javax.annotation.Nullable
  private InitializeRefundAdditionalServices additionalServices;

  public static final String SERIALIZED_NAME_SELLER_COMMENT = "sellerComment";
  @SerializedName(SERIALIZED_NAME_SELLER_COMMENT)
  @javax.annotation.Nullable
  private String sellerComment;

  public RefundDetails() {
  }

  public RefundDetails id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The payment refund identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public RefundDetails payment(@javax.annotation.Nonnull RefundPayment payment) {
    this.payment = payment;
    return this;
  }

  /**
   * Get payment
   * @return payment
   */
  @javax.annotation.Nonnull
  public RefundPayment getPayment() {
    return payment;
  }

  public void setPayment(@javax.annotation.Nonnull RefundPayment payment) {
    this.payment = payment;
  }


  public RefundDetails order(@javax.annotation.Nullable RefundOrder order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public RefundOrder getOrder() {
    return order;
  }

  public void setOrder(@javax.annotation.Nullable RefundOrder order) {
    this.order = order;
  }


  public RefundDetails reason(@javax.annotation.Nonnull ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Reason for a payment refund.
   * @return reason
   */
  @javax.annotation.Nonnull
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nonnull ReasonEnum reason) {
    this.reason = reason;
  }


  public RefundDetails status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of payment refund.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public RefundDetails createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time when the refund was created provided in ISO 8601 format.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RefundDetails totalValue(@javax.annotation.Nonnull RefundTotalValue totalValue) {
    this.totalValue = totalValue;
    return this;
  }

  /**
   * Get totalValue
   * @return totalValue
   */
  @javax.annotation.Nonnull
  public RefundTotalValue getTotalValue() {
    return totalValue;
  }

  public void setTotalValue(@javax.annotation.Nonnull RefundTotalValue totalValue) {
    this.totalValue = totalValue;
  }


  public RefundDetails lineItems(@javax.annotation.Nullable List<RefundLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public RefundDetails addLineItemsItem(RefundLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * List of order&#39;s line items which can be refunded.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<RefundLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(@javax.annotation.Nullable List<RefundLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public RefundDetails delivery(@javax.annotation.Nullable InitializeRefundDelivery delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Get delivery
   * @return delivery
   */
  @javax.annotation.Nullable
  public InitializeRefundDelivery getDelivery() {
    return delivery;
  }

  public void setDelivery(@javax.annotation.Nullable InitializeRefundDelivery delivery) {
    this.delivery = delivery;
  }


  public RefundDetails overpaid(@javax.annotation.Nullable InitializeRefundOverpaid overpaid) {
    this.overpaid = overpaid;
    return this;
  }

  /**
   * Get overpaid
   * @return overpaid
   */
  @javax.annotation.Nullable
  public InitializeRefundOverpaid getOverpaid() {
    return overpaid;
  }

  public void setOverpaid(@javax.annotation.Nullable InitializeRefundOverpaid overpaid) {
    this.overpaid = overpaid;
  }


  public RefundDetails surcharges(@javax.annotation.Nullable List<PaymentsSurcharge> surcharges) {
    this.surcharges = surcharges;
    return this;
  }

  public RefundDetails addSurchargesItem(PaymentsSurcharge surchargesItem) {
    if (this.surcharges == null) {
      this.surcharges = new ArrayList<>();
    }
    this.surcharges.add(surchargesItem);
    return this;
  }

  /**
   * List of surcharges for payment which can be refunded.
   * @return surcharges
   */
  @javax.annotation.Nullable
  public List<PaymentsSurcharge> getSurcharges() {
    return surcharges;
  }

  public void setSurcharges(@javax.annotation.Nullable List<PaymentsSurcharge> surcharges) {
    this.surcharges = surcharges;
  }


  public RefundDetails additionalServices(@javax.annotation.Nullable InitializeRefundAdditionalServices additionalServices) {
    this.additionalServices = additionalServices;
    return this;
  }

  /**
   * Get additionalServices
   * @return additionalServices
   */
  @javax.annotation.Nullable
  public InitializeRefundAdditionalServices getAdditionalServices() {
    return additionalServices;
  }

  public void setAdditionalServices(@javax.annotation.Nullable InitializeRefundAdditionalServices additionalServices) {
    this.additionalServices = additionalServices;
  }


  public RefundDetails sellerComment(@javax.annotation.Nullable String sellerComment) {
    this.sellerComment = sellerComment;
    return this;
  }

  /**
   * Sellers optional justification for refund.
   * @return sellerComment
   */
  @javax.annotation.Nullable
  public String getSellerComment() {
    return sellerComment;
  }

  public void setSellerComment(@javax.annotation.Nullable String sellerComment) {
    this.sellerComment = sellerComment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundDetails refundDetails = (RefundDetails) o;
    return Objects.equals(this.id, refundDetails.id) &&
        Objects.equals(this.payment, refundDetails.payment) &&
        Objects.equals(this.order, refundDetails.order) &&
        Objects.equals(this.reason, refundDetails.reason) &&
        Objects.equals(this.status, refundDetails.status) &&
        Objects.equals(this.createdAt, refundDetails.createdAt) &&
        Objects.equals(this.totalValue, refundDetails.totalValue) &&
        Objects.equals(this.lineItems, refundDetails.lineItems) &&
        Objects.equals(this.delivery, refundDetails.delivery) &&
        Objects.equals(this.overpaid, refundDetails.overpaid) &&
        Objects.equals(this.surcharges, refundDetails.surcharges) &&
        Objects.equals(this.additionalServices, refundDetails.additionalServices) &&
        Objects.equals(this.sellerComment, refundDetails.sellerComment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, payment, order, reason, status, createdAt, totalValue, lineItems, delivery, overpaid, surcharges, additionalServices, sellerComment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundDetails {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    totalValue: ").append(toIndentedString(totalValue)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    overpaid: ").append(toIndentedString(overpaid)).append("\n");
    sb.append("    surcharges: ").append(toIndentedString(surcharges)).append("\n");
    sb.append("    additionalServices: ").append(toIndentedString(additionalServices)).append("\n");
    sb.append("    sellerComment: ").append(toIndentedString(sellerComment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("payment");
    openapiFields.add("order");
    openapiFields.add("reason");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("totalValue");
    openapiFields.add("lineItems");
    openapiFields.add("delivery");
    openapiFields.add("overpaid");
    openapiFields.add("surcharges");
    openapiFields.add("additionalServices");
    openapiFields.add("sellerComment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("payment");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("totalValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RefundDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefundDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefundDetails is not found in the empty JSON string", RefundDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefundDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefundDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RefundDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `payment`
      RefundPayment.validateJsonElement(jsonObj.get("payment"));
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        RefundOrder.validateJsonElement(jsonObj.get("order"));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the required field `reason`
      ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `totalValue`
      RefundTotalValue.validateJsonElement(jsonObj.get("totalValue"));
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            RefundLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        InitializeRefundDelivery.validateJsonElement(jsonObj.get("delivery"));
      }
      // validate the optional field `overpaid`
      if (jsonObj.get("overpaid") != null && !jsonObj.get("overpaid").isJsonNull()) {
        InitializeRefundOverpaid.validateJsonElement(jsonObj.get("overpaid"));
      }
      if (jsonObj.get("surcharges") != null && !jsonObj.get("surcharges").isJsonNull()) {
        JsonArray jsonArraysurcharges = jsonObj.getAsJsonArray("surcharges");
        if (jsonArraysurcharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("surcharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `surcharges` to be an array in the JSON string but got `%s`", jsonObj.get("surcharges").toString()));
          }

          // validate the optional field `surcharges` (array)
          for (int i = 0; i < jsonArraysurcharges.size(); i++) {
            PaymentsSurcharge.validateJsonElement(jsonArraysurcharges.get(i));
          };
        }
      }
      // validate the optional field `additionalServices`
      if (jsonObj.get("additionalServices") != null && !jsonObj.get("additionalServices").isJsonNull()) {
        InitializeRefundAdditionalServices.validateJsonElement(jsonObj.get("additionalServices"));
      }
      if ((jsonObj.get("sellerComment") != null && !jsonObj.get("sellerComment").isJsonNull()) && !jsonObj.get("sellerComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerComment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefundDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefundDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefundDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefundDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RefundDetails>() {
           @Override
           public void write(JsonWriter out, RefundDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefundDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RefundDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RefundDetails
   * @throws IOException if the JSON string is invalid with respect to RefundDetails
   */
  public static RefundDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefundDetails.class);
  }

  /**
   * Convert an instance of RefundDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

