/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * DictionaryCategoryParameterAllOfDictionary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class DictionaryCategoryParameterAllOfDictionary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public static final String SERIALIZED_NAME_DEPENDS_ON_VALUE_IDS = "dependsOnValueIds";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON_VALUE_IDS)
  @javax.annotation.Nullable
  private List<String> dependsOnValueIds = new ArrayList<>();

  public DictionaryCategoryParameterAllOfDictionary() {
  }

  public DictionaryCategoryParameterAllOfDictionary id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the dictionary value. Use it to set the value in an offer or in a product.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public DictionaryCategoryParameterAllOfDictionary value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * The label of the dictionary value in Polish.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }


  public DictionaryCategoryParameterAllOfDictionary dependsOnValueIds(@javax.annotation.Nullable List<String> dependsOnValueIds) {
    this.dependsOnValueIds = dependsOnValueIds;
    return this;
  }

  public DictionaryCategoryParameterAllOfDictionary addDependsOnValueIdsItem(String dependsOnValueIdsItem) {
    if (this.dependsOnValueIds == null) {
      this.dependsOnValueIds = new ArrayList<>();
    }
    this.dependsOnValueIds.add(dependsOnValueIdsItem);
    return this;
  }

  /**
   * The IDs of dictionary values from another parameter that this parameter value can be combined with. The other parameter has the id from &#x60;options.dependsOnParameterId&#x60;. Empty if this parameter value can be combined with any value from other parameters. Otherwise, this value might be set in the offer only when one of the given values of &#x60;dependsOnValueIds&#x60; is set as well.
   * @return dependsOnValueIds
   */
  @javax.annotation.Nullable
  public List<String> getDependsOnValueIds() {
    return dependsOnValueIds;
  }

  public void setDependsOnValueIds(@javax.annotation.Nullable List<String> dependsOnValueIds) {
    this.dependsOnValueIds = dependsOnValueIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DictionaryCategoryParameterAllOfDictionary dictionaryCategoryParameterAllOfDictionary = (DictionaryCategoryParameterAllOfDictionary) o;
    return Objects.equals(this.id, dictionaryCategoryParameterAllOfDictionary.id) &&
        Objects.equals(this.value, dictionaryCategoryParameterAllOfDictionary.value) &&
        Objects.equals(this.dependsOnValueIds, dictionaryCategoryParameterAllOfDictionary.dependsOnValueIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, value, dependsOnValueIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DictionaryCategoryParameterAllOfDictionary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    dependsOnValueIds: ").append(toIndentedString(dependsOnValueIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("value");
    openapiFields.add("dependsOnValueIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DictionaryCategoryParameterAllOfDictionary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DictionaryCategoryParameterAllOfDictionary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DictionaryCategoryParameterAllOfDictionary is not found in the empty JSON string", DictionaryCategoryParameterAllOfDictionary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DictionaryCategoryParameterAllOfDictionary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DictionaryCategoryParameterAllOfDictionary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dependsOnValueIds") != null && !jsonObj.get("dependsOnValueIds").isJsonNull() && !jsonObj.get("dependsOnValueIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependsOnValueIds` to be an array in the JSON string but got `%s`", jsonObj.get("dependsOnValueIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DictionaryCategoryParameterAllOfDictionary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DictionaryCategoryParameterAllOfDictionary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DictionaryCategoryParameterAllOfDictionary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DictionaryCategoryParameterAllOfDictionary.class));

       return (TypeAdapter<T>) new TypeAdapter<DictionaryCategoryParameterAllOfDictionary>() {
           @Override
           public void write(JsonWriter out, DictionaryCategoryParameterAllOfDictionary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DictionaryCategoryParameterAllOfDictionary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DictionaryCategoryParameterAllOfDictionary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DictionaryCategoryParameterAllOfDictionary
   * @throws IOException if the JSON string is invalid with respect to DictionaryCategoryParameterAllOfDictionary
   */
  public static DictionaryCategoryParameterAllOfDictionary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DictionaryCategoryParameterAllOfDictionary.class);
  }

  /**
   * Convert an instance of DictionaryCategoryParameterAllOfDictionary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

