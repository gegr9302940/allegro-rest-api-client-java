/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.DeliveryMethodId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * SmartOfferClassificationReportConditionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class SmartOfferClassificationReportConditionsInner {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_FULFILLED = "fulfilled";
  @SerializedName(SERIALIZED_NAME_FULFILLED)
  @javax.annotation.Nullable
  private Boolean fulfilled;

  public static final String SERIALIZED_NAME_PASSED_DELIVERY_METHODS = "passedDeliveryMethods";
  @SerializedName(SERIALIZED_NAME_PASSED_DELIVERY_METHODS)
  @javax.annotation.Nullable
  private List<DeliveryMethodId> passedDeliveryMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_DELIVERY_METHODS = "failedDeliveryMethods";
  @SerializedName(SERIALIZED_NAME_FAILED_DELIVERY_METHODS)
  @javax.annotation.Nullable
  private List<DeliveryMethodId> failedDeliveryMethods = new ArrayList<>();

  public SmartOfferClassificationReportConditionsInner() {
  }

  public SmartOfferClassificationReportConditionsInner code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Technical condition name
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public SmartOfferClassificationReportConditionsInner name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Condition name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public SmartOfferClassificationReportConditionsInner description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Brief condition description, might contain useful instructions to help making that particular condition pass
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public SmartOfferClassificationReportConditionsInner fulfilled(@javax.annotation.Nullable Boolean fulfilled) {
    this.fulfilled = fulfilled;
    return this;
  }

  /**
   * Indicates whether this condition is met
   * @return fulfilled
   */
  @javax.annotation.Nullable
  public Boolean getFulfilled() {
    return fulfilled;
  }

  public void setFulfilled(@javax.annotation.Nullable Boolean fulfilled) {
    this.fulfilled = fulfilled;
  }


  public SmartOfferClassificationReportConditionsInner passedDeliveryMethods(@javax.annotation.Nullable List<DeliveryMethodId> passedDeliveryMethods) {
    this.passedDeliveryMethods = passedDeliveryMethods;
    return this;
  }

  public SmartOfferClassificationReportConditionsInner addPassedDeliveryMethodsItem(DeliveryMethodId passedDeliveryMethodsItem) {
    if (this.passedDeliveryMethods == null) {
      this.passedDeliveryMethods = new ArrayList<>();
    }
    this.passedDeliveryMethods.add(passedDeliveryMethodsItem);
    return this;
  }

  /**
   * Set of delivery methods that meet this condition. May be null if the condition does not apply to delivery methods.
   * @return passedDeliveryMethods
   */
  @javax.annotation.Nullable
  public List<DeliveryMethodId> getPassedDeliveryMethods() {
    return passedDeliveryMethods;
  }

  public void setPassedDeliveryMethods(@javax.annotation.Nullable List<DeliveryMethodId> passedDeliveryMethods) {
    this.passedDeliveryMethods = passedDeliveryMethods;
  }


  public SmartOfferClassificationReportConditionsInner failedDeliveryMethods(@javax.annotation.Nullable List<DeliveryMethodId> failedDeliveryMethods) {
    this.failedDeliveryMethods = failedDeliveryMethods;
    return this;
  }

  public SmartOfferClassificationReportConditionsInner addFailedDeliveryMethodsItem(DeliveryMethodId failedDeliveryMethodsItem) {
    if (this.failedDeliveryMethods == null) {
      this.failedDeliveryMethods = new ArrayList<>();
    }
    this.failedDeliveryMethods.add(failedDeliveryMethodsItem);
    return this;
  }

  /**
   * Set of delivery methods that fail to meet this condition. May be null if the condition does not apply to delivery methods.
   * @return failedDeliveryMethods
   */
  @javax.annotation.Nullable
  public List<DeliveryMethodId> getFailedDeliveryMethods() {
    return failedDeliveryMethods;
  }

  public void setFailedDeliveryMethods(@javax.annotation.Nullable List<DeliveryMethodId> failedDeliveryMethods) {
    this.failedDeliveryMethods = failedDeliveryMethods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmartOfferClassificationReportConditionsInner smartOfferClassificationReportConditionsInner = (SmartOfferClassificationReportConditionsInner) o;
    return Objects.equals(this.code, smartOfferClassificationReportConditionsInner.code) &&
        Objects.equals(this.name, smartOfferClassificationReportConditionsInner.name) &&
        Objects.equals(this.description, smartOfferClassificationReportConditionsInner.description) &&
        Objects.equals(this.fulfilled, smartOfferClassificationReportConditionsInner.fulfilled) &&
        Objects.equals(this.passedDeliveryMethods, smartOfferClassificationReportConditionsInner.passedDeliveryMethods) &&
        Objects.equals(this.failedDeliveryMethods, smartOfferClassificationReportConditionsInner.failedDeliveryMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, name, description, fulfilled, passedDeliveryMethods, failedDeliveryMethods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmartOfferClassificationReportConditionsInner {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fulfilled: ").append(toIndentedString(fulfilled)).append("\n");
    sb.append("    passedDeliveryMethods: ").append(toIndentedString(passedDeliveryMethods)).append("\n");
    sb.append("    failedDeliveryMethods: ").append(toIndentedString(failedDeliveryMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("fulfilled");
    openapiFields.add("passedDeliveryMethods");
    openapiFields.add("failedDeliveryMethods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmartOfferClassificationReportConditionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmartOfferClassificationReportConditionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmartOfferClassificationReportConditionsInner is not found in the empty JSON string", SmartOfferClassificationReportConditionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmartOfferClassificationReportConditionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmartOfferClassificationReportConditionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("passedDeliveryMethods") != null && !jsonObj.get("passedDeliveryMethods").isJsonNull()) {
        JsonArray jsonArraypassedDeliveryMethods = jsonObj.getAsJsonArray("passedDeliveryMethods");
        if (jsonArraypassedDeliveryMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("passedDeliveryMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `passedDeliveryMethods` to be an array in the JSON string but got `%s`", jsonObj.get("passedDeliveryMethods").toString()));
          }

          // validate the optional field `passedDeliveryMethods` (array)
          for (int i = 0; i < jsonArraypassedDeliveryMethods.size(); i++) {
            DeliveryMethodId.validateJsonElement(jsonArraypassedDeliveryMethods.get(i));
          };
        }
      }
      if (jsonObj.get("failedDeliveryMethods") != null && !jsonObj.get("failedDeliveryMethods").isJsonNull()) {
        JsonArray jsonArrayfailedDeliveryMethods = jsonObj.getAsJsonArray("failedDeliveryMethods");
        if (jsonArrayfailedDeliveryMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("failedDeliveryMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `failedDeliveryMethods` to be an array in the JSON string but got `%s`", jsonObj.get("failedDeliveryMethods").toString()));
          }

          // validate the optional field `failedDeliveryMethods` (array)
          for (int i = 0; i < jsonArrayfailedDeliveryMethods.size(); i++) {
            DeliveryMethodId.validateJsonElement(jsonArrayfailedDeliveryMethods.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmartOfferClassificationReportConditionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmartOfferClassificationReportConditionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmartOfferClassificationReportConditionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmartOfferClassificationReportConditionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SmartOfferClassificationReportConditionsInner>() {
           @Override
           public void write(JsonWriter out, SmartOfferClassificationReportConditionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmartOfferClassificationReportConditionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmartOfferClassificationReportConditionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmartOfferClassificationReportConditionsInner
   * @throws IOException if the JSON string is invalid with respect to SmartOfferClassificationReportConditionsInner
   */
  public static SmartOfferClassificationReportConditionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmartOfferClassificationReportConditionsInner.class);
  }

  /**
   * Convert an instance of SmartOfferClassificationReportConditionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

