/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.PromoOptionsCommandModificationPackage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * PromoOptionsCommandModification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class PromoOptionsCommandModification {
  public static final String SERIALIZED_NAME_BASE_PACKAGE = "basePackage";
  @SerializedName(SERIALIZED_NAME_BASE_PACKAGE)
  @javax.annotation.Nullable
  private PromoOptionsCommandModificationPackage basePackage;

  public static final String SERIALIZED_NAME_EXTRA_PACKAGES = "extraPackages";
  @SerializedName(SERIALIZED_NAME_EXTRA_PACKAGES)
  @javax.annotation.Nullable
  private List<PromoOptionsCommandModificationPackage> extraPackages = new ArrayList<>();

  /**
   * Time at which the modification will be applied.
   */
  @JsonAdapter(ModificationTimeEnum.Adapter.class)
  public enum ModificationTimeEnum {
    NOW("NOW"),
    
    END_OF_CYCLE("END_OF_CYCLE");

    private String value;

    ModificationTimeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModificationTimeEnum fromValue(String value) {
      for (ModificationTimeEnum b : ModificationTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModificationTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModificationTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModificationTimeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModificationTimeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModificationTimeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  @javax.annotation.Nullable
  private ModificationTimeEnum modificationTime;

  public PromoOptionsCommandModification() {
  }

  public PromoOptionsCommandModification basePackage(@javax.annotation.Nullable PromoOptionsCommandModificationPackage basePackage) {
    this.basePackage = basePackage;
    return this;
  }

  /**
   * The base package. Available packages can be determined using &lt;a href&#x3D;\&quot;#operation/getAvailableOfferPromotionPackages\&quot;&gt;GET /sale/offer-promotion-packages&lt;/a&gt;.
   * @return basePackage
   */
  @javax.annotation.Nullable
  public PromoOptionsCommandModificationPackage getBasePackage() {
    return basePackage;
  }

  public void setBasePackage(@javax.annotation.Nullable PromoOptionsCommandModificationPackage basePackage) {
    this.basePackage = basePackage;
  }


  public PromoOptionsCommandModification extraPackages(@javax.annotation.Nullable List<PromoOptionsCommandModificationPackage> extraPackages) {
    this.extraPackages = extraPackages;
    return this;
  }

  public PromoOptionsCommandModification addExtraPackagesItem(PromoOptionsCommandModificationPackage extraPackagesItem) {
    if (this.extraPackages == null) {
      this.extraPackages = new ArrayList<>();
    }
    this.extraPackages.add(extraPackagesItem);
    return this;
  }

  /**
   * Extra packages to be set on offer. Omitting this parameter will preserve the packages already present.
   * @return extraPackages
   */
  @javax.annotation.Nullable
  public List<PromoOptionsCommandModificationPackage> getExtraPackages() {
    return extraPackages;
  }

  public void setExtraPackages(@javax.annotation.Nullable List<PromoOptionsCommandModificationPackage> extraPackages) {
    this.extraPackages = extraPackages;
  }


  public PromoOptionsCommandModification modificationTime(@javax.annotation.Nullable ModificationTimeEnum modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * Time at which the modification will be applied.
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public ModificationTimeEnum getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(@javax.annotation.Nullable ModificationTimeEnum modificationTime) {
    this.modificationTime = modificationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromoOptionsCommandModification promoOptionsCommandModification = (PromoOptionsCommandModification) o;
    return Objects.equals(this.basePackage, promoOptionsCommandModification.basePackage) &&
        Objects.equals(this.extraPackages, promoOptionsCommandModification.extraPackages) &&
        Objects.equals(this.modificationTime, promoOptionsCommandModification.modificationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePackage, extraPackages, modificationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromoOptionsCommandModification {\n");
    sb.append("    basePackage: ").append(toIndentedString(basePackage)).append("\n");
    sb.append("    extraPackages: ").append(toIndentedString(extraPackages)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basePackage");
    openapiFields.add("extraPackages");
    openapiFields.add("modificationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromoOptionsCommandModification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromoOptionsCommandModification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromoOptionsCommandModification is not found in the empty JSON string", PromoOptionsCommandModification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromoOptionsCommandModification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromoOptionsCommandModification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basePackage`
      if (jsonObj.get("basePackage") != null && !jsonObj.get("basePackage").isJsonNull()) {
        PromoOptionsCommandModificationPackage.validateJsonElement(jsonObj.get("basePackage"));
      }
      if (jsonObj.get("extraPackages") != null && !jsonObj.get("extraPackages").isJsonNull()) {
        JsonArray jsonArrayextraPackages = jsonObj.getAsJsonArray("extraPackages");
        if (jsonArrayextraPackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extraPackages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extraPackages` to be an array in the JSON string but got `%s`", jsonObj.get("extraPackages").toString()));
          }

          // validate the optional field `extraPackages` (array)
          for (int i = 0; i < jsonArrayextraPackages.size(); i++) {
            PromoOptionsCommandModificationPackage.validateJsonElement(jsonArrayextraPackages.get(i));
          };
        }
      }
      if ((jsonObj.get("modificationTime") != null && !jsonObj.get("modificationTime").isJsonNull()) && !jsonObj.get("modificationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationTime").toString()));
      }
      // validate the optional field `modificationTime`
      if (jsonObj.get("modificationTime") != null && !jsonObj.get("modificationTime").isJsonNull()) {
        ModificationTimeEnum.validateJsonElement(jsonObj.get("modificationTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromoOptionsCommandModification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromoOptionsCommandModification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromoOptionsCommandModification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromoOptionsCommandModification.class));

       return (TypeAdapter<T>) new TypeAdapter<PromoOptionsCommandModification>() {
           @Override
           public void write(JsonWriter out, PromoOptionsCommandModification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromoOptionsCommandModification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromoOptionsCommandModification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromoOptionsCommandModification
   * @throws IOException if the JSON string is invalid with respect to PromoOptionsCommandModification
   */
  public static PromoOptionsCommandModification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromoOptionsCommandModification.class);
  }

  /**
   * Convert an instance of PromoOptionsCommandModification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

