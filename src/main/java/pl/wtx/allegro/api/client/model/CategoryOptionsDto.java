/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * A list of the different options which can be used with this category.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CategoryOptionsDto {
  public static final String SERIALIZED_NAME_ADVERTISEMENT = "advertisement";
  @SerializedName(SERIALIZED_NAME_ADVERTISEMENT)
  @javax.annotation.Nullable
  private Boolean advertisement;

  public static final String SERIALIZED_NAME_ADVERTISEMENT_PRICE_OPTIONAL = "advertisementPriceOptional";
  @SerializedName(SERIALIZED_NAME_ADVERTISEMENT_PRICE_OPTIONAL)
  @javax.annotation.Nullable
  private Boolean advertisementPriceOptional;

  public static final String SERIALIZED_NAME_VARIANTS_BY_COLOR_PATTERN_ALLOWED = "variantsByColorPatternAllowed";
  @SerializedName(SERIALIZED_NAME_VARIANTS_BY_COLOR_PATTERN_ALLOWED)
  @javax.annotation.Nullable
  private Boolean variantsByColorPatternAllowed;

  public static final String SERIALIZED_NAME_OFFERS_WITH_PRODUCT_PUBLICATION_ENABLED = "offersWithProductPublicationEnabled";
  @SerializedName(SERIALIZED_NAME_OFFERS_WITH_PRODUCT_PUBLICATION_ENABLED)
  @javax.annotation.Nullable
  private Boolean offersWithProductPublicationEnabled;

  public static final String SERIALIZED_NAME_PRODUCT_CREATION_ENABLED = "productCreationEnabled";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CREATION_ENABLED)
  @javax.annotation.Nullable
  private Boolean productCreationEnabled;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS_ENABLED = "customParametersEnabled";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS_ENABLED)
  @javax.annotation.Nullable
  private Boolean customParametersEnabled;

  public static final String SERIALIZED_NAME_SELLER_CAN_REQUIRE_PURCHASE_COMMENTS = "sellerCanRequirePurchaseComments";
  @SerializedName(SERIALIZED_NAME_SELLER_CAN_REQUIRE_PURCHASE_COMMENTS)
  @javax.annotation.Nullable
  private Boolean sellerCanRequirePurchaseComments;

  public CategoryOptionsDto() {
  }

  public CategoryOptionsDto advertisement(@javax.annotation.Nullable Boolean advertisement) {
    this.advertisement = advertisement;
    return this;
  }

  /**
   * Indicates whether offers of type ADVERTISEMENT can be listed in this category.
   * @return advertisement
   */
  @javax.annotation.Nullable
  public Boolean getAdvertisement() {
    return advertisement;
  }

  public void setAdvertisement(@javax.annotation.Nullable Boolean advertisement) {
    this.advertisement = advertisement;
  }


  public CategoryOptionsDto advertisementPriceOptional(@javax.annotation.Nullable Boolean advertisementPriceOptional) {
    this.advertisementPriceOptional = advertisementPriceOptional;
    return this;
  }

  /**
   * Indicates whether advertisements listed in this category must have a price given. If the value is &#x60;true&#x60; then you don&#39;t have to provide a price when listing an advertisement in this category.
   * @return advertisementPriceOptional
   */
  @javax.annotation.Nullable
  public Boolean getAdvertisementPriceOptional() {
    return advertisementPriceOptional;
  }

  public void setAdvertisementPriceOptional(@javax.annotation.Nullable Boolean advertisementPriceOptional) {
    this.advertisementPriceOptional = advertisementPriceOptional;
  }


  public CategoryOptionsDto variantsByColorPatternAllowed(@javax.annotation.Nullable Boolean variantsByColorPatternAllowed) {
    this.variantsByColorPatternAllowed = variantsByColorPatternAllowed;
    return this;
  }

  /**
   * Indicates whether you can combine offers from this category into variant sets based on the color and pattern.
   * @return variantsByColorPatternAllowed
   */
  @javax.annotation.Nullable
  public Boolean getVariantsByColorPatternAllowed() {
    return variantsByColorPatternAllowed;
  }

  public void setVariantsByColorPatternAllowed(@javax.annotation.Nullable Boolean variantsByColorPatternAllowed) {
    this.variantsByColorPatternAllowed = variantsByColorPatternAllowed;
  }


  public CategoryOptionsDto offersWithProductPublicationEnabled(@javax.annotation.Nullable Boolean offersWithProductPublicationEnabled) {
    this.offersWithProductPublicationEnabled = offersWithProductPublicationEnabled;
    return this;
  }

  /**
   * Information whether the category supports assigning offers to a product.
   * @return offersWithProductPublicationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOffersWithProductPublicationEnabled() {
    return offersWithProductPublicationEnabled;
  }

  public void setOffersWithProductPublicationEnabled(@javax.annotation.Nullable Boolean offersWithProductPublicationEnabled) {
    this.offersWithProductPublicationEnabled = offersWithProductPublicationEnabled;
  }


  public CategoryOptionsDto productCreationEnabled(@javax.annotation.Nullable Boolean productCreationEnabled) {
    this.productCreationEnabled = productCreationEnabled;
    return this;
  }

  /**
   * Indicates whether the category supports creating products.
   * @return productCreationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getProductCreationEnabled() {
    return productCreationEnabled;
  }

  public void setProductCreationEnabled(@javax.annotation.Nullable Boolean productCreationEnabled) {
    this.productCreationEnabled = productCreationEnabled;
  }


  public CategoryOptionsDto customParametersEnabled(@javax.annotation.Nullable Boolean customParametersEnabled) {
    this.customParametersEnabled = customParametersEnabled;
    return this;
  }

  /**
   * Indicates whether custom parameters can be added to offers in this category.
   * @return customParametersEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCustomParametersEnabled() {
    return customParametersEnabled;
  }

  public void setCustomParametersEnabled(@javax.annotation.Nullable Boolean customParametersEnabled) {
    this.customParametersEnabled = customParametersEnabled;
  }


  public CategoryOptionsDto sellerCanRequirePurchaseComments(@javax.annotation.Nullable Boolean sellerCanRequirePurchaseComments) {
    this.sellerCanRequirePurchaseComments = sellerCanRequirePurchaseComments;
    return this;
  }

  /**
   * Indicates whether the category supports message to seller in &#x60;REQUIRED&#x60; mode.
   * @return sellerCanRequirePurchaseComments
   */
  @javax.annotation.Nullable
  public Boolean getSellerCanRequirePurchaseComments() {
    return sellerCanRequirePurchaseComments;
  }

  public void setSellerCanRequirePurchaseComments(@javax.annotation.Nullable Boolean sellerCanRequirePurchaseComments) {
    this.sellerCanRequirePurchaseComments = sellerCanRequirePurchaseComments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryOptionsDto categoryOptionsDto = (CategoryOptionsDto) o;
    return Objects.equals(this.advertisement, categoryOptionsDto.advertisement) &&
        Objects.equals(this.advertisementPriceOptional, categoryOptionsDto.advertisementPriceOptional) &&
        Objects.equals(this.variantsByColorPatternAllowed, categoryOptionsDto.variantsByColorPatternAllowed) &&
        Objects.equals(this.offersWithProductPublicationEnabled, categoryOptionsDto.offersWithProductPublicationEnabled) &&
        Objects.equals(this.productCreationEnabled, categoryOptionsDto.productCreationEnabled) &&
        Objects.equals(this.customParametersEnabled, categoryOptionsDto.customParametersEnabled) &&
        Objects.equals(this.sellerCanRequirePurchaseComments, categoryOptionsDto.sellerCanRequirePurchaseComments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertisement, advertisementPriceOptional, variantsByColorPatternAllowed, offersWithProductPublicationEnabled, productCreationEnabled, customParametersEnabled, sellerCanRequirePurchaseComments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryOptionsDto {\n");
    sb.append("    advertisement: ").append(toIndentedString(advertisement)).append("\n");
    sb.append("    advertisementPriceOptional: ").append(toIndentedString(advertisementPriceOptional)).append("\n");
    sb.append("    variantsByColorPatternAllowed: ").append(toIndentedString(variantsByColorPatternAllowed)).append("\n");
    sb.append("    offersWithProductPublicationEnabled: ").append(toIndentedString(offersWithProductPublicationEnabled)).append("\n");
    sb.append("    productCreationEnabled: ").append(toIndentedString(productCreationEnabled)).append("\n");
    sb.append("    customParametersEnabled: ").append(toIndentedString(customParametersEnabled)).append("\n");
    sb.append("    sellerCanRequirePurchaseComments: ").append(toIndentedString(sellerCanRequirePurchaseComments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertisement");
    openapiFields.add("advertisementPriceOptional");
    openapiFields.add("variantsByColorPatternAllowed");
    openapiFields.add("offersWithProductPublicationEnabled");
    openapiFields.add("productCreationEnabled");
    openapiFields.add("customParametersEnabled");
    openapiFields.add("sellerCanRequirePurchaseComments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryOptionsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryOptionsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryOptionsDto is not found in the empty JSON string", CategoryOptionsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryOptionsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryOptionsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryOptionsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryOptionsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryOptionsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryOptionsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryOptionsDto>() {
           @Override
           public void write(JsonWriter out, CategoryOptionsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryOptionsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryOptionsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryOptionsDto
   * @throws IOException if the JSON string is invalid with respect to CategoryOptionsDto
   */
  public static CategoryOptionsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryOptionsDto.class);
  }

  /**
   * Convert an instance of CategoryOptionsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

