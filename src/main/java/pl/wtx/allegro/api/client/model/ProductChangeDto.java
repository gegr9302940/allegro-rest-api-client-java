/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.ChangedParameterDto;
import pl.wtx.allegro.api.client.model.ProductChangeDtoProduct;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ProductChangeDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ProductChangeDto {
  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  @javax.annotation.Nullable
  private ProductChangeDtoProduct product;

  public static final String SERIALIZED_NAME_CHANGED_PARAMETERS = "changedParameters";
  @SerializedName(SERIALIZED_NAME_CHANGED_PARAMETERS)
  @javax.annotation.Nullable
  private List<ChangedParameterDto> changedParameters = new ArrayList<>();

  public ProductChangeDto() {
  }

  public ProductChangeDto product(@javax.annotation.Nullable ProductChangeDtoProduct product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public ProductChangeDtoProduct getProduct() {
    return product;
  }

  public void setProduct(@javax.annotation.Nullable ProductChangeDtoProduct product) {
    this.product = product;
  }


  public ProductChangeDto changedParameters(@javax.annotation.Nullable List<ChangedParameterDto> changedParameters) {
    this.changedParameters = changedParameters;
    return this;
  }

  public ProductChangeDto addChangedParametersItem(ChangedParameterDto changedParametersItem) {
    if (this.changedParameters == null) {
      this.changedParameters = new ArrayList<>();
    }
    this.changedParameters.add(changedParametersItem);
    return this;
  }

  /**
   * List of changed product parameters.
   * @return changedParameters
   */
  @javax.annotation.Nullable
  public List<ChangedParameterDto> getChangedParameters() {
    return changedParameters;
  }

  public void setChangedParameters(@javax.annotation.Nullable List<ChangedParameterDto> changedParameters) {
    this.changedParameters = changedParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductChangeDto productChangeDto = (ProductChangeDto) o;
    return Objects.equals(this.product, productChangeDto.product) &&
        Objects.equals(this.changedParameters, productChangeDto.changedParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(product, changedParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductChangeDto {\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    changedParameters: ").append(toIndentedString(changedParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product");
    openapiFields.add("changedParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductChangeDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductChangeDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductChangeDto is not found in the empty JSON string", ProductChangeDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductChangeDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductChangeDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        ProductChangeDtoProduct.validateJsonElement(jsonObj.get("product"));
      }
      if (jsonObj.get("changedParameters") != null && !jsonObj.get("changedParameters").isJsonNull()) {
        JsonArray jsonArraychangedParameters = jsonObj.getAsJsonArray("changedParameters");
        if (jsonArraychangedParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changedParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changedParameters` to be an array in the JSON string but got `%s`", jsonObj.get("changedParameters").toString()));
          }

          // validate the optional field `changedParameters` (array)
          for (int i = 0; i < jsonArraychangedParameters.size(); i++) {
            ChangedParameterDto.validateJsonElement(jsonArraychangedParameters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductChangeDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductChangeDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductChangeDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductChangeDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductChangeDto>() {
           @Override
           public void write(JsonWriter out, ProductChangeDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductChangeDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductChangeDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductChangeDto
   * @throws IOException if the JSON string is invalid with respect to ProductChangeDto
   */
  public static ProductChangeDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductChangeDto.class);
  }

  /**
   * Convert an instance of ProductChangeDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

