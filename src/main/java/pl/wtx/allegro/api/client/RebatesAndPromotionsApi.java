/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.NullableTurnoverDiscountDto;
import pl.wtx.allegro.api.client.model.SellerCreateRebateRequestDto;
import pl.wtx.allegro.api.client.model.SellerRebateDto;
import pl.wtx.allegro.api.client.model.SellerRebatesDto;
import pl.wtx.allegro.api.client.model.TurnoverDiscountDto;
import pl.wtx.allegro.api.client.model.TurnoverDiscountRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RebatesAndPromotionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RebatesAndPromotionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RebatesAndPromotionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrModifyTurnoverDiscountUsingPUT
     * @param marketplaceId Marketplace identifier. (required)
     * @param turnoverDiscountRequest request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/modified turnover discount for marketplace </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrModifyTurnoverDiscountUsingPUTCall(@javax.annotation.Nonnull String marketplaceId, @javax.annotation.Nonnull TurnoverDiscountRequest turnoverDiscountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = turnoverDiscountRequest;

        // create path and map variables
        String localVarPath = "/sale/turnover-discount/{marketplaceId}"
            .replace("{" + "marketplaceId" + "}", localVarApiClient.escapeString(marketplaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrModifyTurnoverDiscountUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String marketplaceId, @javax.annotation.Nonnull TurnoverDiscountRequest turnoverDiscountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling createOrModifyTurnoverDiscountUsingPUT(Async)");
        }

        // verify the required parameter 'turnoverDiscountRequest' is set
        if (turnoverDiscountRequest == null) {
            throw new ApiException("Missing the required parameter 'turnoverDiscountRequest' when calling createOrModifyTurnoverDiscountUsingPUT(Async)");
        }

        return createOrModifyTurnoverDiscountUsingPUTCall(marketplaceId, turnoverDiscountRequest, _callback);

    }

    /**
     * Create/modify turnover discount for marketplace
     * Create or modify the turnover discount for the specified marketplace. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount is assigned to all offers available on the given marketplace. Only B2B users will see and be eligible for this discount. In order to create a turnover discount definition, you also have to be a B2B user. &lt;br/&gt; Created turnover discount becomes visible for B2B users with the first day of the next month. Since that day, B2B users begin cumulating their spending on your offers they purchased. Turnover cumulated within the month translate into appropriate percentage of the discount for all orders of your offers in the following month. &lt;br/&gt; Turnover discount created in a given month is susceptible for change only until the end of that month. After that, as mentioned before, turnover discount becomes available for the users and can no longer be modified instantly. Modifying turnover discount in such case will result in creation of the new definition of the discount. This new definition will become available for the users on the same basis that the previously created one, with the start of the next month. Also, similarly, newly created definition can be modified only until the the end of the month. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#utworz-lub-edytuj-rabat-obrotowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../..//tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#create-or-edit-turnover-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId Marketplace identifier. (required)
     * @param turnoverDiscountRequest request (required)
     * @return TurnoverDiscountDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/modified turnover discount for marketplace </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public TurnoverDiscountDto createOrModifyTurnoverDiscountUsingPUT(@javax.annotation.Nonnull String marketplaceId, @javax.annotation.Nonnull TurnoverDiscountRequest turnoverDiscountRequest) throws ApiException {
        ApiResponse<TurnoverDiscountDto> localVarResp = createOrModifyTurnoverDiscountUsingPUTWithHttpInfo(marketplaceId, turnoverDiscountRequest);
        return localVarResp.getData();
    }

    /**
     * Create/modify turnover discount for marketplace
     * Create or modify the turnover discount for the specified marketplace. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount is assigned to all offers available on the given marketplace. Only B2B users will see and be eligible for this discount. In order to create a turnover discount definition, you also have to be a B2B user. &lt;br/&gt; Created turnover discount becomes visible for B2B users with the first day of the next month. Since that day, B2B users begin cumulating their spending on your offers they purchased. Turnover cumulated within the month translate into appropriate percentage of the discount for all orders of your offers in the following month. &lt;br/&gt; Turnover discount created in a given month is susceptible for change only until the end of that month. After that, as mentioned before, turnover discount becomes available for the users and can no longer be modified instantly. Modifying turnover discount in such case will result in creation of the new definition of the discount. This new definition will become available for the users on the same basis that the previously created one, with the start of the next month. Also, similarly, newly created definition can be modified only until the the end of the month. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#utworz-lub-edytuj-rabat-obrotowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../..//tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#create-or-edit-turnover-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId Marketplace identifier. (required)
     * @param turnoverDiscountRequest request (required)
     * @return ApiResponse&lt;TurnoverDiscountDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/modified turnover discount for marketplace </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TurnoverDiscountDto> createOrModifyTurnoverDiscountUsingPUTWithHttpInfo(@javax.annotation.Nonnull String marketplaceId, @javax.annotation.Nonnull TurnoverDiscountRequest turnoverDiscountRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrModifyTurnoverDiscountUsingPUTValidateBeforeCall(marketplaceId, turnoverDiscountRequest, null);
        Type localVarReturnType = new TypeToken<TurnoverDiscountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/modify turnover discount for marketplace (asynchronously)
     * Create or modify the turnover discount for the specified marketplace. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount is assigned to all offers available on the given marketplace. Only B2B users will see and be eligible for this discount. In order to create a turnover discount definition, you also have to be a B2B user. &lt;br/&gt; Created turnover discount becomes visible for B2B users with the first day of the next month. Since that day, B2B users begin cumulating their spending on your offers they purchased. Turnover cumulated within the month translate into appropriate percentage of the discount for all orders of your offers in the following month. &lt;br/&gt; Turnover discount created in a given month is susceptible for change only until the end of that month. After that, as mentioned before, turnover discount becomes available for the users and can no longer be modified instantly. Modifying turnover discount in such case will result in creation of the new definition of the discount. This new definition will become available for the users on the same basis that the previously created one, with the start of the next month. Also, similarly, newly created definition can be modified only until the the end of the month. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#utworz-lub-edytuj-rabat-obrotowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../..//tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#create-or-edit-turnover-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId Marketplace identifier. (required)
     * @param turnoverDiscountRequest request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/modified turnover discount for marketplace </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrModifyTurnoverDiscountUsingPUTAsync(@javax.annotation.Nonnull String marketplaceId, @javax.annotation.Nonnull TurnoverDiscountRequest turnoverDiscountRequest, final ApiCallback<TurnoverDiscountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrModifyTurnoverDiscountUsingPUTValidateBeforeCall(marketplaceId, turnoverDiscountRequest, _callback);
        Type localVarReturnType = new TypeToken<TurnoverDiscountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPromotionUsingPOST1
     * @param sellerCreateRebateRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer/Offers not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Validation failed – request had correct syntax, but promotion properties exceeds acceptable limits </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPromotionUsingPOST1Call(@javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sellerCreateRebateRequestDto;

        // create path and map variables
        String localVarPath = "/sale/loyalty/promotions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPromotionUsingPOST1ValidateBeforeCall(@javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerCreateRebateRequestDto' is set
        if (sellerCreateRebateRequestDto == null) {
            throw new ApiException("Missing the required parameter 'sellerCreateRebateRequestDto' when calling createPromotionUsingPOST1(Async)");
        }

        return createPromotionUsingPOST1Call(sellerCreateRebateRequestDto, _callback);

    }

    /**
     * Create a new promotion
     * This endpoint creates a new promotion. You can create promotions only if your base marketplace is &#x60;allegro-pl&#x60;. Created promotions are visible only on the &#x60;allegro-pl&#x60; marketplace. You can define the following types of promotions: 1. Large order discount &lt;br&gt; Only company users will see and be eligible for this type of promotion. In order to create a large order discount, you also have to be a company user. Furthermore, you are allowed to have only one active order discount at a time. Define a promotion with a single benefit of type **LARGE_ORDER_DISCOUNT** and a single criterion of type **ALL_OFFERS**. The benefit specification should contain a list of order value based discount thresholds. Threshold&#39;s order value defines the minimum total value of an order for which the threshold is applicable (&#x60;lowerBound&#x60;). Threshold&#39;s discount defines the discount percentage applied when the threshold is applied. The percentage&#39;s fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total value of the order. A threshold with a higher order value than another threshold in the order discount must also have a higher discount. Large order discount is assigned automatically to all seller&#39;s offers. Moreover, it will be assigned to all newly added seller&#39;s offers once activated. Please note that it may take some time to propagate this type of promotion to all of your offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. 2. Wholesale price list &lt;br&gt; Only company users will see and be eligible for this type of promotion. In order to create a wholesale price list, you also have to be a company user. Define a promotion with a single benefit of type **WHOLESALE_PRICE_LIST** and a single criterion of type **OFFERS_ASSIGNED_EXTERNALLY**. The benefit specification should contain a name (it will be visible to you only) and a list of quantity based discount thresholds. Threshold&#39;s quantity defines the minimum number of units of an offer for which the threshold is applicable (&#x60;lowerBound&#x60;). Threshold&#39;s discount defines the discount percentage applied when the threshold is applied. The percentage&#39;s fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total price of units of the offer bought. A threshold with a higher quantity than another threshold in the price list must also have a higher discount. In order to assign offers to a wholesale price list, use &#x60;discounts&#x60; field in &lt;a href&#x3D;\&quot;#operation/modificationCommandUsingPUT\&quot;&gt;batch offer modification&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-cennik-hurtowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. 3. Multipack &lt;br&gt; In order to create a new multipack, you have to define a promotion with a single benefit of type **UNIT_PERCENTAGE_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. The benefit specification should contain a configuration section with a percentage which indicates the specific discount for the discounted offer. This percentage should be an integer value greater than 15 for quantity 2, greater than 30 for quantity 3, greater than 40 for quantity 4, greater than 50 for quantity 5 and lower than or equal to 100. The specification should also contain a trigger section with a field forEachQuantity that defines the amount of items in the multipack which is necessary to trigger the benefit. Additionally, the discountedNumber field must be set to 1 by default as you can only discount one unit in a multipack. Finally, the offer criterion specifies the offer for which the multipack promotion will take effect. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat-ilosciowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt; 4. Cross-offer multipack &lt;br&gt; A cross-offer multipack is created in the same fashion as a standard multipack. The only difference is that you need to pass more than 1 offer in the offer criterion section. This group of offers is then considered as a pool from which users can pick and choose forEachQuantity offers and the cheapest of them gets a discount.
     * @param sellerCreateRebateRequestDto  (required)
     * @return SellerRebateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer/Offers not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Validation failed – request had correct syntax, but promotion properties exceeds acceptable limits </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public SellerRebateDto createPromotionUsingPOST1(@javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto) throws ApiException {
        ApiResponse<SellerRebateDto> localVarResp = createPromotionUsingPOST1WithHttpInfo(sellerCreateRebateRequestDto);
        return localVarResp.getData();
    }

    /**
     * Create a new promotion
     * This endpoint creates a new promotion. You can create promotions only if your base marketplace is &#x60;allegro-pl&#x60;. Created promotions are visible only on the &#x60;allegro-pl&#x60; marketplace. You can define the following types of promotions: 1. Large order discount &lt;br&gt; Only company users will see and be eligible for this type of promotion. In order to create a large order discount, you also have to be a company user. Furthermore, you are allowed to have only one active order discount at a time. Define a promotion with a single benefit of type **LARGE_ORDER_DISCOUNT** and a single criterion of type **ALL_OFFERS**. The benefit specification should contain a list of order value based discount thresholds. Threshold&#39;s order value defines the minimum total value of an order for which the threshold is applicable (&#x60;lowerBound&#x60;). Threshold&#39;s discount defines the discount percentage applied when the threshold is applied. The percentage&#39;s fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total value of the order. A threshold with a higher order value than another threshold in the order discount must also have a higher discount. Large order discount is assigned automatically to all seller&#39;s offers. Moreover, it will be assigned to all newly added seller&#39;s offers once activated. Please note that it may take some time to propagate this type of promotion to all of your offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. 2. Wholesale price list &lt;br&gt; Only company users will see and be eligible for this type of promotion. In order to create a wholesale price list, you also have to be a company user. Define a promotion with a single benefit of type **WHOLESALE_PRICE_LIST** and a single criterion of type **OFFERS_ASSIGNED_EXTERNALLY**. The benefit specification should contain a name (it will be visible to you only) and a list of quantity based discount thresholds. Threshold&#39;s quantity defines the minimum number of units of an offer for which the threshold is applicable (&#x60;lowerBound&#x60;). Threshold&#39;s discount defines the discount percentage applied when the threshold is applied. The percentage&#39;s fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total price of units of the offer bought. A threshold with a higher quantity than another threshold in the price list must also have a higher discount. In order to assign offers to a wholesale price list, use &#x60;discounts&#x60; field in &lt;a href&#x3D;\&quot;#operation/modificationCommandUsingPUT\&quot;&gt;batch offer modification&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-cennik-hurtowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. 3. Multipack &lt;br&gt; In order to create a new multipack, you have to define a promotion with a single benefit of type **UNIT_PERCENTAGE_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. The benefit specification should contain a configuration section with a percentage which indicates the specific discount for the discounted offer. This percentage should be an integer value greater than 15 for quantity 2, greater than 30 for quantity 3, greater than 40 for quantity 4, greater than 50 for quantity 5 and lower than or equal to 100. The specification should also contain a trigger section with a field forEachQuantity that defines the amount of items in the multipack which is necessary to trigger the benefit. Additionally, the discountedNumber field must be set to 1 by default as you can only discount one unit in a multipack. Finally, the offer criterion specifies the offer for which the multipack promotion will take effect. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat-ilosciowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt; 4. Cross-offer multipack &lt;br&gt; A cross-offer multipack is created in the same fashion as a standard multipack. The only difference is that you need to pass more than 1 offer in the offer criterion section. This group of offers is then considered as a pool from which users can pick and choose forEachQuantity offers and the cheapest of them gets a discount.
     * @param sellerCreateRebateRequestDto  (required)
     * @return ApiResponse&lt;SellerRebateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer/Offers not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Validation failed – request had correct syntax, but promotion properties exceeds acceptable limits </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerRebateDto> createPromotionUsingPOST1WithHttpInfo(@javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto) throws ApiException {
        okhttp3.Call localVarCall = createPromotionUsingPOST1ValidateBeforeCall(sellerCreateRebateRequestDto, null);
        Type localVarReturnType = new TypeToken<SellerRebateDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new promotion (asynchronously)
     * This endpoint creates a new promotion. You can create promotions only if your base marketplace is &#x60;allegro-pl&#x60;. Created promotions are visible only on the &#x60;allegro-pl&#x60; marketplace. You can define the following types of promotions: 1. Large order discount &lt;br&gt; Only company users will see and be eligible for this type of promotion. In order to create a large order discount, you also have to be a company user. Furthermore, you are allowed to have only one active order discount at a time. Define a promotion with a single benefit of type **LARGE_ORDER_DISCOUNT** and a single criterion of type **ALL_OFFERS**. The benefit specification should contain a list of order value based discount thresholds. Threshold&#39;s order value defines the minimum total value of an order for which the threshold is applicable (&#x60;lowerBound&#x60;). Threshold&#39;s discount defines the discount percentage applied when the threshold is applied. The percentage&#39;s fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total value of the order. A threshold with a higher order value than another threshold in the order discount must also have a higher discount. Large order discount is assigned automatically to all seller&#39;s offers. Moreover, it will be assigned to all newly added seller&#39;s offers once activated. Please note that it may take some time to propagate this type of promotion to all of your offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. 2. Wholesale price list &lt;br&gt; Only company users will see and be eligible for this type of promotion. In order to create a wholesale price list, you also have to be a company user. Define a promotion with a single benefit of type **WHOLESALE_PRICE_LIST** and a single criterion of type **OFFERS_ASSIGNED_EXTERNALLY**. The benefit specification should contain a name (it will be visible to you only) and a list of quantity based discount thresholds. Threshold&#39;s quantity defines the minimum number of units of an offer for which the threshold is applicable (&#x60;lowerBound&#x60;). Threshold&#39;s discount defines the discount percentage applied when the threshold is applied. The percentage&#39;s fractional part must be equal to 0. Only the highest applicable threshold (if any) will be applied to the total price of units of the offer bought. A threshold with a higher quantity than another threshold in the price list must also have a higher discount. In order to assign offers to a wholesale price list, use &#x60;discounts&#x60; field in &lt;a href&#x3D;\&quot;#operation/modificationCommandUsingPUT\&quot;&gt;batch offer modification&lt;/a&gt;. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-cennik-hurtowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. 3. Multipack &lt;br&gt; In order to create a new multipack, you have to define a promotion with a single benefit of type **UNIT_PERCENTAGE_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. The benefit specification should contain a configuration section with a percentage which indicates the specific discount for the discounted offer. This percentage should be an integer value greater than 15 for quantity 2, greater than 30 for quantity 3, greater than 40 for quantity 4, greater than 50 for quantity 5 and lower than or equal to 100. The specification should also contain a trigger section with a field forEachQuantity that defines the amount of items in the multipack which is necessary to trigger the benefit. Additionally, the discountedNumber field must be set to 1 by default as you can only discount one unit in a multipack. Finally, the offer criterion specifies the offer for which the multipack promotion will take effect. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#dodaj-rabat-ilosciowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#add-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt; 4. Cross-offer multipack &lt;br&gt; A cross-offer multipack is created in the same fashion as a standard multipack. The only difference is that you need to pass more than 1 offer in the offer criterion section. This group of offers is then considered as a pool from which users can pick and choose forEachQuantity offers and the cheapest of them gets a discount.
     * @param sellerCreateRebateRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer/Offers not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Validation failed – request had correct syntax, but promotion properties exceeds acceptable limits </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPromotionUsingPOST1Async(@javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto, final ApiCallback<SellerRebateDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPromotionUsingPOST1ValidateBeforeCall(sellerCreateRebateRequestDto, _callback);
        Type localVarReturnType = new TypeToken<SellerRebateDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deactivatePromotionUsingDELETE
     * @param promotionId Promotion identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deactivated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivatePromotionUsingDELETECall(@javax.annotation.Nonnull String promotionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/loyalty/promotions/{promotionId}"
            .replace("{" + "promotionId" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivatePromotionUsingDELETEValidateBeforeCall(@javax.annotation.Nonnull String promotionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling deactivatePromotionUsingDELETE(Async)");
        }

        return deactivatePromotionUsingDELETECall(promotionId, _callback);

    }

    /**
     * Deactivate a promotion by id
     * Use this resource to deactivate the requested promotion. You need to use its unique id. &lt;br&gt; Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-cennik\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat-ilosciowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-an-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deactivated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public void deactivatePromotionUsingDELETE(@javax.annotation.Nonnull String promotionId) throws ApiException {
        deactivatePromotionUsingDELETEWithHttpInfo(promotionId);
    }

    /**
     * Deactivate a promotion by id
     * Use this resource to deactivate the requested promotion. You need to use its unique id. &lt;br&gt; Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-cennik\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat-ilosciowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-an-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deactivated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deactivatePromotionUsingDELETEWithHttpInfo(@javax.annotation.Nonnull String promotionId) throws ApiException {
        okhttp3.Call localVarCall = deactivatePromotionUsingDELETEValidateBeforeCall(promotionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deactivate a promotion by id (asynchronously)
     * Use this resource to deactivate the requested promotion. You need to use its unique id. &lt;br&gt; Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-cennik\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#usun-rabat-ilosciowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#remove-an-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deactivated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivatePromotionUsingDELETEAsync(@javax.annotation.Nonnull String promotionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivatePromotionUsingDELETEValidateBeforeCall(promotionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deactivateTurnoverDiscountsUsingPUT
     * @param marketplaceId Marketplace identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnover discount for marketplace after deactivation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Discount with &#x60;ACTIVATING&#x60; status was deactivated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateTurnoverDiscountsUsingPUTCall(@javax.annotation.Nonnull String marketplaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/turnover-discount/{marketplaceId}/deactivate"
            .replace("{" + "marketplaceId" + "}", localVarApiClient.escapeString(marketplaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateTurnoverDiscountsUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String marketplaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling deactivateTurnoverDiscountsUsingPUT(Async)");
        }

        return deactivateTurnoverDiscountsUsingPUTCall(marketplaceId, _callback);

    }

    /**
     * Deactivate turnover discount for marketplace
     * Deactivate turnover discount for a given marketplace. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#deaktywuj-rabat-obrotowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#deactivate-turnover-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount will stop being cumulated with the end of the current month. Discount based on cumulated turnover will stop being applied with the end of the next month. After that, the discount will be completely deactivated. &lt;br/&gt; When deactivating the discount that still has &#x60;ACTIVATING&#x60; status, turnover discount is deactivated immediately. In that case, no turnover discount will start being cumulated with the new month.
     * @param marketplaceId Marketplace identifier. (required)
     * @return TurnoverDiscountDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnover discount for marketplace after deactivation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Discount with &#x60;ACTIVATING&#x60; status was deactivated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
     </table>
     */
    public TurnoverDiscountDto deactivateTurnoverDiscountsUsingPUT(@javax.annotation.Nonnull String marketplaceId) throws ApiException {
        ApiResponse<TurnoverDiscountDto> localVarResp = deactivateTurnoverDiscountsUsingPUTWithHttpInfo(marketplaceId);
        return localVarResp.getData();
    }

    /**
     * Deactivate turnover discount for marketplace
     * Deactivate turnover discount for a given marketplace. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#deaktywuj-rabat-obrotowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#deactivate-turnover-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount will stop being cumulated with the end of the current month. Discount based on cumulated turnover will stop being applied with the end of the next month. After that, the discount will be completely deactivated. &lt;br/&gt; When deactivating the discount that still has &#x60;ACTIVATING&#x60; status, turnover discount is deactivated immediately. In that case, no turnover discount will start being cumulated with the new month.
     * @param marketplaceId Marketplace identifier. (required)
     * @return ApiResponse&lt;TurnoverDiscountDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnover discount for marketplace after deactivation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Discount with &#x60;ACTIVATING&#x60; status was deactivated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TurnoverDiscountDto> deactivateTurnoverDiscountsUsingPUTWithHttpInfo(@javax.annotation.Nonnull String marketplaceId) throws ApiException {
        okhttp3.Call localVarCall = deactivateTurnoverDiscountsUsingPUTValidateBeforeCall(marketplaceId, null);
        Type localVarReturnType = new TypeToken<TurnoverDiscountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate turnover discount for marketplace (asynchronously)
     * Deactivate turnover discount for a given marketplace. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#deaktywuj-rabat-obrotowy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#deactivate-turnover-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount will stop being cumulated with the end of the current month. Discount based on cumulated turnover will stop being applied with the end of the next month. After that, the discount will be completely deactivated. &lt;br/&gt; When deactivating the discount that still has &#x60;ACTIVATING&#x60; status, turnover discount is deactivated immediately. In that case, no turnover discount will start being cumulated with the new month.
     * @param marketplaceId Marketplace identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnover discount for marketplace after deactivation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Discount with &#x60;ACTIVATING&#x60; status was deactivated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Marketplace not supported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateTurnoverDiscountsUsingPUTAsync(@javax.annotation.Nonnull String marketplaceId, final ApiCallback<TurnoverDiscountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateTurnoverDiscountsUsingPUTValidateBeforeCall(marketplaceId, _callback);
        Type localVarReturnType = new TypeToken<TurnoverDiscountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPromotionUsingGET
     * @param promotionId Promotion identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromotionUsingGETCall(@javax.annotation.Nonnull String promotionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/loyalty/promotions/{promotionId}"
            .replace("{" + "promotionId" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromotionUsingGETValidateBeforeCall(@javax.annotation.Nonnull String promotionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling getPromotionUsingGET(Async)");
        }

        return getPromotionUsingGETCall(promotionId, _callback);

    }

    /**
     * Get a promotion data by id
     * &lt;br&gt; Use this resource to return the requested promotion. You need to use its unique id. &lt;br&gt; Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-cenniku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie-ilosciowym\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#information-about-an-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @return SellerRebateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public SellerRebateDto getPromotionUsingGET(@javax.annotation.Nonnull String promotionId) throws ApiException {
        ApiResponse<SellerRebateDto> localVarResp = getPromotionUsingGETWithHttpInfo(promotionId);
        return localVarResp.getData();
    }

    /**
     * Get a promotion data by id
     * &lt;br&gt; Use this resource to return the requested promotion. You need to use its unique id. &lt;br&gt; Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-cenniku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie-ilosciowym\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#information-about-an-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @return ApiResponse&lt;SellerRebateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerRebateDto> getPromotionUsingGETWithHttpInfo(@javax.annotation.Nonnull String promotionId) throws ApiException {
        okhttp3.Call localVarCall = getPromotionUsingGETValidateBeforeCall(promotionId, null);
        Type localVarReturnType = new TypeToken<SellerRebateDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a promotion data by id (asynchronously)
     * &lt;br&gt; Use this resource to return the requested promotion. You need to use its unique id. &lt;br&gt; Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-cenniku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-information-about-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-informacje-o-rabacie-ilosciowym\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#information-about-an-quantitative-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested promotion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromotionUsingGETAsync(@javax.annotation.Nonnull String promotionId, final ApiCallback<SellerRebateDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromotionUsingGETValidateBeforeCall(promotionId, _callback);
        Type localVarReturnType = new TypeToken<SellerRebateDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTurnoverDiscountsUsingGET
     * @param marketplaceId List of marketplace identifiers. Only turnover discounts for specified marketplaces are returned. &lt;br/&gt; Currently, only &#x60;allegro-business-cz&#x60; is supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of turnover discounts for marketplaces </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTurnoverDiscountsUsingGETCall(@javax.annotation.Nullable List<String> marketplaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/turnover-discount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketplaceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marketplaceId", marketplaceId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTurnoverDiscountsUsingGETValidateBeforeCall(@javax.annotation.Nullable List<String> marketplaceId, final ApiCallback _callback) throws ApiException {
        return getTurnoverDiscountsUsingGETCall(marketplaceId, _callback);

    }

    /**
     * Get the list of turnover discounts
     * Get a list of turnover discounts for all supported marketplaces. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-liste-rabatow-obrotowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-the-list-of-turnover-discounts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount for the marketplace can have one of the three statuses: 1. &#x60;ACTIVATING&#x60; - neither accumulation of the turnover, nor applying of the discount has started yet. Turnover will be being accumulated from the beginning of the next month. 2. &#x60;ACTIVE&#x60; - there is ongoing accumulation of the turnover and/or applying of the discount. The latest discount definition does not have fields &#x60;cumulatingToDate&#x60; and &#x60;spendingToDate&#x60; set to a specific date. There may be multiple (up to 3) definitions of the discount returned for each marketplace. Only one definition can be accumulated against, and only one definition can be applied at the same time - appropriate periods from different definitions will not overlap. 3. &#x60;DEACTIVATING&#x60; - there is ongoing accumulation of the turnover and/or applying of the discount. Accumulation of the turnover will be continued until &#x60;cumulatingToDate&#x60; of the last definition. Applying of the discount will be continued until &#x60;spendingToDate&#x60; of the last definition.
     * @param marketplaceId List of marketplace identifiers. Only turnover discounts for specified marketplaces are returned. &lt;br/&gt; Currently, only &#x60;allegro-business-cz&#x60; is supported. (optional)
     * @return List&lt;NullableTurnoverDiscountDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of turnover discounts for marketplaces </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
     </table>
     */
    public List<NullableTurnoverDiscountDto> getTurnoverDiscountsUsingGET(@javax.annotation.Nullable List<String> marketplaceId) throws ApiException {
        ApiResponse<List<NullableTurnoverDiscountDto>> localVarResp = getTurnoverDiscountsUsingGETWithHttpInfo(marketplaceId);
        return localVarResp.getData();
    }

    /**
     * Get the list of turnover discounts
     * Get a list of turnover discounts for all supported marketplaces. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-liste-rabatow-obrotowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-the-list-of-turnover-discounts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount for the marketplace can have one of the three statuses: 1. &#x60;ACTIVATING&#x60; - neither accumulation of the turnover, nor applying of the discount has started yet. Turnover will be being accumulated from the beginning of the next month. 2. &#x60;ACTIVE&#x60; - there is ongoing accumulation of the turnover and/or applying of the discount. The latest discount definition does not have fields &#x60;cumulatingToDate&#x60; and &#x60;spendingToDate&#x60; set to a specific date. There may be multiple (up to 3) definitions of the discount returned for each marketplace. Only one definition can be accumulated against, and only one definition can be applied at the same time - appropriate periods from different definitions will not overlap. 3. &#x60;DEACTIVATING&#x60; - there is ongoing accumulation of the turnover and/or applying of the discount. Accumulation of the turnover will be continued until &#x60;cumulatingToDate&#x60; of the last definition. Applying of the discount will be continued until &#x60;spendingToDate&#x60; of the last definition.
     * @param marketplaceId List of marketplace identifiers. Only turnover discounts for specified marketplaces are returned. &lt;br/&gt; Currently, only &#x60;allegro-business-cz&#x60; is supported. (optional)
     * @return ApiResponse&lt;List&lt;NullableTurnoverDiscountDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of turnover discounts for marketplaces </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NullableTurnoverDiscountDto>> getTurnoverDiscountsUsingGETWithHttpInfo(@javax.annotation.Nullable List<String> marketplaceId) throws ApiException {
        okhttp3.Call localVarCall = getTurnoverDiscountsUsingGETValidateBeforeCall(marketplaceId, null);
        Type localVarReturnType = new TypeToken<List<NullableTurnoverDiscountDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of turnover discounts (asynchronously)
     * Get a list of turnover discounts for all supported marketplaces. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-liste-rabatow-obrotowych\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-the-list-of-turnover-discounts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. Currently, the only supported marketplace is &#x60;allegro-business-cz&#x60;. &lt;br/&gt; Turnover discount for the marketplace can have one of the three statuses: 1. &#x60;ACTIVATING&#x60; - neither accumulation of the turnover, nor applying of the discount has started yet. Turnover will be being accumulated from the beginning of the next month. 2. &#x60;ACTIVE&#x60; - there is ongoing accumulation of the turnover and/or applying of the discount. The latest discount definition does not have fields &#x60;cumulatingToDate&#x60; and &#x60;spendingToDate&#x60; set to a specific date. There may be multiple (up to 3) definitions of the discount returned for each marketplace. Only one definition can be accumulated against, and only one definition can be applied at the same time - appropriate periods from different definitions will not overlap. 3. &#x60;DEACTIVATING&#x60; - there is ongoing accumulation of the turnover and/or applying of the discount. Accumulation of the turnover will be continued until &#x60;cumulatingToDate&#x60; of the last definition. Applying of the discount will be continued until &#x60;spendingToDate&#x60; of the last definition.
     * @param marketplaceId List of marketplace identifiers. Only turnover discounts for specified marketplaces are returned. &lt;br/&gt; Currently, only &#x60;allegro-business-cz&#x60; is supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of turnover discounts for marketplaces </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTurnoverDiscountsUsingGETAsync(@javax.annotation.Nullable List<String> marketplaceId, final ApiCallback<List<NullableTurnoverDiscountDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTurnoverDiscountsUsingGETValidateBeforeCall(marketplaceId, _callback);
        Type localVarReturnType = new TypeToken<List<NullableTurnoverDiscountDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSellerPromotionsUsingGET1
     * @param promotionType Filter by promotion type. (required)
     * @param limit Limit of promotions per page. (optional, default to 50)
     * @param offset Distance between the beginning of the document and the point from which promotions are returned. (optional, default to 0)
     * @param offerId Filter by offer id. No promotions with &#x60;OFFERS_ASSIGNED_EXTERNALLY&#x60; or &#x60;ALL_OFFERS&#x60; criteria will be returned if this parameter is present. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of promotions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Restrictions were not satisfied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerPromotionsUsingGET1Call(@javax.annotation.Nonnull String promotionType, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/loyalty/promotions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offer.id", offerId));
        }

        if (promotionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("promotionType", promotionType));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSellerPromotionsUsingGET1ValidateBeforeCall(@javax.annotation.Nonnull String promotionType, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionType' is set
        if (promotionType == null) {
            throw new ApiException("Missing the required parameter 'promotionType' when calling listSellerPromotionsUsingGET1(Async)");
        }

        return listSellerPromotionsUsingGET1Call(promotionType, limit, offset, offerId, _callback);

    }

    /**
     * Get the user&#39;s list of promotions
     * Get a list of promotions defined by the authorized user and filtered by promotion type. &lt;p&gt;Restrictions:&lt;/p&gt; &lt;p&gt;Filtering by promotion type is required.&lt;/p&gt; &lt;p&gt;Sum of limit and offset must be equal to or lower than 50000. Limit must be equal to or lower than 5000.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;p&gt;offset &#x3D; 49950 and limit &#x3D; 50 will return promotions&lt;/p&gt; &lt;p&gt;offset &#x3D; 49950 and limit &#x3D; 51 will return 422 http error&lt;/p&gt; &lt;p&gt;offset &#x3D; 0 and limit &#x3D; 5000 will return promotions&lt;/p&gt; &lt;p&gt;offset &#x3D; 0 and limit &#x3D; 5001 will return 422 http error&lt;/p&gt; &lt;p&gt;Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-cenniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-wholesale-price-lists\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty-ilosciowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-promotional-sets\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.&lt;/p&gt;
     * @param promotionType Filter by promotion type. (required)
     * @param limit Limit of promotions per page. (optional, default to 50)
     * @param offset Distance between the beginning of the document and the point from which promotions are returned. (optional, default to 0)
     * @param offerId Filter by offer id. No promotions with &#x60;OFFERS_ASSIGNED_EXTERNALLY&#x60; or &#x60;ALL_OFFERS&#x60; criteria will be returned if this parameter is present. (optional)
     * @return SellerRebatesDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of promotions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Restrictions were not satisfied </td><td>  -  </td></tr>
     </table>
     */
    public SellerRebatesDto listSellerPromotionsUsingGET1(@javax.annotation.Nonnull String promotionType, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId) throws ApiException {
        ApiResponse<SellerRebatesDto> localVarResp = listSellerPromotionsUsingGET1WithHttpInfo(promotionType, limit, offset, offerId);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s list of promotions
     * Get a list of promotions defined by the authorized user and filtered by promotion type. &lt;p&gt;Restrictions:&lt;/p&gt; &lt;p&gt;Filtering by promotion type is required.&lt;/p&gt; &lt;p&gt;Sum of limit and offset must be equal to or lower than 50000. Limit must be equal to or lower than 5000.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;p&gt;offset &#x3D; 49950 and limit &#x3D; 50 will return promotions&lt;/p&gt; &lt;p&gt;offset &#x3D; 49950 and limit &#x3D; 51 will return 422 http error&lt;/p&gt; &lt;p&gt;offset &#x3D; 0 and limit &#x3D; 5000 will return promotions&lt;/p&gt; &lt;p&gt;offset &#x3D; 0 and limit &#x3D; 5001 will return 422 http error&lt;/p&gt; &lt;p&gt;Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-cenniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-wholesale-price-lists\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty-ilosciowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-promotional-sets\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.&lt;/p&gt;
     * @param promotionType Filter by promotion type. (required)
     * @param limit Limit of promotions per page. (optional, default to 50)
     * @param offset Distance between the beginning of the document and the point from which promotions are returned. (optional, default to 0)
     * @param offerId Filter by offer id. No promotions with &#x60;OFFERS_ASSIGNED_EXTERNALLY&#x60; or &#x60;ALL_OFFERS&#x60; criteria will be returned if this parameter is present. (optional)
     * @return ApiResponse&lt;SellerRebatesDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of promotions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Restrictions were not satisfied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerRebatesDto> listSellerPromotionsUsingGET1WithHttpInfo(@javax.annotation.Nonnull String promotionType, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId) throws ApiException {
        okhttp3.Call localVarCall = listSellerPromotionsUsingGET1ValidateBeforeCall(promotionType, limit, offset, offerId, null);
        Type localVarReturnType = new TypeToken<SellerRebatesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s list of promotions (asynchronously)
     * Get a list of promotions defined by the authorized user and filtered by promotion type. &lt;p&gt;Restrictions:&lt;/p&gt; &lt;p&gt;Filtering by promotion type is required.&lt;/p&gt; &lt;p&gt;Sum of limit and offset must be equal to or lower than 50000. Limit must be equal to or lower than 5000.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;p&gt;offset &#x3D; 49950 and limit &#x3D; 50 will return promotions&lt;/p&gt; &lt;p&gt;offset &#x3D; 49950 and limit &#x3D; 51 will return 422 http error&lt;/p&gt; &lt;p&gt;offset &#x3D; 0 and limit &#x3D; 5000 will return promotions&lt;/p&gt; &lt;p&gt;offset &#x3D; 0 and limit &#x3D; 5001 will return 422 http error&lt;/p&gt; &lt;p&gt;Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-large-order-discount\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-cenniki\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-wholesale-price-lists\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Multipack &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#pobierz-dostepne-rabaty-ilosciowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#retrieve-promotional-sets\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.&lt;/p&gt;
     * @param promotionType Filter by promotion type. (required)
     * @param limit Limit of promotions per page. (optional, default to 50)
     * @param offset Distance between the beginning of the document and the point from which promotions are returned. (optional, default to 0)
     * @param offerId Filter by offer id. No promotions with &#x60;OFFERS_ASSIGNED_EXTERNALLY&#x60; or &#x60;ALL_OFFERS&#x60; criteria will be returned if this parameter is present. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of promotions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Restrictions were not satisfied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerPromotionsUsingGET1Async(@javax.annotation.Nonnull String promotionType, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, final ApiCallback<SellerRebatesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSellerPromotionsUsingGET1ValidateBeforeCall(promotionType, limit, offset, offerId, _callback);
        Type localVarReturnType = new TypeToken<SellerRebatesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePromotionUsingPUT
     * @param promotionId Promotion identifier. (required)
     * @param sellerCreateRebateRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePromotionUsingPUTCall(@javax.annotation.Nonnull String promotionId, @javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sellerCreateRebateRequestDto;

        // create path and map variables
        String localVarPath = "/sale/loyalty/promotions/{promotionId}"
            .replace("{" + "promotionId" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePromotionUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String promotionId, @javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling updatePromotionUsingPUT(Async)");
        }

        // verify the required parameter 'sellerCreateRebateRequestDto' is set
        if (sellerCreateRebateRequestDto == null) {
            throw new ApiException("Missing the required parameter 'sellerCreateRebateRequestDto' when calling updatePromotionUsingPUT(Async)");
        }

        return updatePromotionUsingPUTCall(promotionId, sellerCreateRebateRequestDto, _callback);

    }

    /**
     * Modify a promotion
     * Use this resource to update a promotion by its unique id. &lt;br&gt; It supports editing bundle&#39;s discount, wholesale price lists and large order discounts. Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-progi-rabatowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-discount-thresholds\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-cennik\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @param sellerCreateRebateRequestDto  (required)
     * @return SellerRebateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public SellerRebateDto updatePromotionUsingPUT(@javax.annotation.Nonnull String promotionId, @javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto) throws ApiException {
        ApiResponse<SellerRebateDto> localVarResp = updatePromotionUsingPUTWithHttpInfo(promotionId, sellerCreateRebateRequestDto);
        return localVarResp.getData();
    }

    /**
     * Modify a promotion
     * Use this resource to update a promotion by its unique id. &lt;br&gt; It supports editing bundle&#39;s discount, wholesale price lists and large order discounts. Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-progi-rabatowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-discount-thresholds\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-cennik\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @param sellerCreateRebateRequestDto  (required)
     * @return ApiResponse&lt;SellerRebateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerRebateDto> updatePromotionUsingPUTWithHttpInfo(@javax.annotation.Nonnull String promotionId, @javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto) throws ApiException {
        okhttp3.Call localVarCall = updatePromotionUsingPUTValidateBeforeCall(promotionId, sellerCreateRebateRequestDto, null);
        Type localVarReturnType = new TypeToken<SellerRebateDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify a promotion (asynchronously)
     * Use this resource to update a promotion by its unique id. &lt;br&gt; It supports editing bundle&#39;s discount, wholesale price lists and large order discounts. Read more about: Large order discount &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-progi-rabatowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-discount-thresholds\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;, Wholesale price list &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-rabatami-promocjami-yPya2mj6zUP#edytuj-cennik\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-rebates-and-promotions-g05avdL0vT4#edit-wholesale-price-list\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param promotionId Promotion identifier. (required)
     * @param sellerCreateRebateRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested promotion </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Promotion not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed – request had correct syntax, but violated validation rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePromotionUsingPUTAsync(@javax.annotation.Nonnull String promotionId, @javax.annotation.Nonnull SellerCreateRebateRequestDto sellerCreateRebateRequestDto, final ApiCallback<SellerRebateDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePromotionUsingPUTValidateBeforeCall(promotionId, sellerCreateRebateRequestDto, _callback);
        Type localVarReturnType = new TypeToken<SellerRebateDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
