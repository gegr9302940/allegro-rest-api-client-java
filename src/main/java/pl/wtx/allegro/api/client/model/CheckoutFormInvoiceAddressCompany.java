/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.CheckoutFormInvoiceAddressCompanyId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Setting the value to null indicates a private purchase, while any other value indicates a corporate purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckoutFormInvoiceAddressCompany {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  @javax.annotation.Nullable
  private List<CheckoutFormInvoiceAddressCompanyId> ids = new ArrayList<>();

  /**
   * The vat payer status: - &#x60;ACTIVE&#x60; - user explicitly declared as an active VAT taxpayer, - &#x60;NON_ACTIVE&#x60; - user explicitly declared as not an active VAT taxpayer, - &#x60;NOT_APPLICABLE&#x60; - user hasn&#39;t declared the VAT taxpayer status, or it&#39;s not applicable for given address type or provided company numbers.
   */
  @JsonAdapter(VatPayerStatusEnum.Adapter.class)
  public enum VatPayerStatusEnum {
    ACTIVE("ACTIVE"),
    
    NON_ACTIVE("NON_ACTIVE"),
    
    NOT_APPLICABLE("NOT_APPLICABLE");

    private String value;

    VatPayerStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VatPayerStatusEnum fromValue(String value) {
      for (VatPayerStatusEnum b : VatPayerStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VatPayerStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VatPayerStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VatPayerStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VatPayerStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VatPayerStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VAT_PAYER_STATUS = "vatPayerStatus";
  @SerializedName(SERIALIZED_NAME_VAT_PAYER_STATUS)
  @javax.annotation.Nonnull
  private VatPayerStatusEnum vatPayerStatus;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  @javax.annotation.Nullable
  private String taxId;

  public CheckoutFormInvoiceAddressCompany() {
  }

  public CheckoutFormInvoiceAddressCompany name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of a company for which invoice should be issued.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CheckoutFormInvoiceAddressCompany ids(@javax.annotation.Nullable List<CheckoutFormInvoiceAddressCompanyId> ids) {
    this.ids = ids;
    return this;
  }

  public CheckoutFormInvoiceAddressCompany addIdsItem(CheckoutFormInvoiceAddressCompanyId idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

  /**
   * Tax ids of a company for which invoice should be issued.
   * @return ids
   */
  @javax.annotation.Nullable
  public List<CheckoutFormInvoiceAddressCompanyId> getIds() {
    return ids;
  }

  public void setIds(@javax.annotation.Nullable List<CheckoutFormInvoiceAddressCompanyId> ids) {
    this.ids = ids;
  }


  public CheckoutFormInvoiceAddressCompany vatPayerStatus(@javax.annotation.Nonnull VatPayerStatusEnum vatPayerStatus) {
    this.vatPayerStatus = vatPayerStatus;
    return this;
  }

  /**
   * The vat payer status: - &#x60;ACTIVE&#x60; - user explicitly declared as an active VAT taxpayer, - &#x60;NON_ACTIVE&#x60; - user explicitly declared as not an active VAT taxpayer, - &#x60;NOT_APPLICABLE&#x60; - user hasn&#39;t declared the VAT taxpayer status, or it&#39;s not applicable for given address type or provided company numbers.
   * @return vatPayerStatus
   */
  @javax.annotation.Nonnull
  public VatPayerStatusEnum getVatPayerStatus() {
    return vatPayerStatus;
  }

  public void setVatPayerStatus(@javax.annotation.Nonnull VatPayerStatusEnum vatPayerStatus) {
    this.vatPayerStatus = vatPayerStatus;
  }


  @Deprecated
  public CheckoutFormInvoiceAddressCompany taxId(@javax.annotation.Nullable String taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * Tax id.
   * @return taxId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }

  @Deprecated
  public void setTaxId(@javax.annotation.Nullable String taxId) {
    this.taxId = taxId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutFormInvoiceAddressCompany checkoutFormInvoiceAddressCompany = (CheckoutFormInvoiceAddressCompany) o;
    return Objects.equals(this.name, checkoutFormInvoiceAddressCompany.name) &&
        Objects.equals(this.ids, checkoutFormInvoiceAddressCompany.ids) &&
        Objects.equals(this.vatPayerStatus, checkoutFormInvoiceAddressCompany.vatPayerStatus) &&
        Objects.equals(this.taxId, checkoutFormInvoiceAddressCompany.taxId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, ids, vatPayerStatus, taxId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutFormInvoiceAddressCompany {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    vatPayerStatus: ").append(toIndentedString(vatPayerStatus)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("ids");
    openapiFields.add("vatPayerStatus");
    openapiFields.add("taxId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("vatPayerStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutFormInvoiceAddressCompany
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutFormInvoiceAddressCompany.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutFormInvoiceAddressCompany is not found in the empty JSON string", CheckoutFormInvoiceAddressCompany.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutFormInvoiceAddressCompany.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutFormInvoiceAddressCompany` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutFormInvoiceAddressCompany.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull()) {
        JsonArray jsonArrayids = jsonObj.getAsJsonArray("ids");
        if (jsonArrayids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
          }

          // validate the optional field `ids` (array)
          for (int i = 0; i < jsonArrayids.size(); i++) {
            CheckoutFormInvoiceAddressCompanyId.validateJsonElement(jsonArrayids.get(i));
          };
        }
      }
      if (!jsonObj.get("vatPayerStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vatPayerStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vatPayerStatus").toString()));
      }
      // validate the required field `vatPayerStatus`
      VatPayerStatusEnum.validateJsonElement(jsonObj.get("vatPayerStatus"));
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutFormInvoiceAddressCompany.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutFormInvoiceAddressCompany' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutFormInvoiceAddressCompany> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutFormInvoiceAddressCompany.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutFormInvoiceAddressCompany>() {
           @Override
           public void write(JsonWriter out, CheckoutFormInvoiceAddressCompany value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutFormInvoiceAddressCompany read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutFormInvoiceAddressCompany given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutFormInvoiceAddressCompany
   * @throws IOException if the JSON string is invalid with respect to CheckoutFormInvoiceAddressCompany
   */
  public static CheckoutFormInvoiceAddressCompany fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutFormInvoiceAddressCompany.class);
  }

  /**
   * Convert an instance of CheckoutFormInvoiceAddressCompany to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

