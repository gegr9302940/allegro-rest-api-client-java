/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.OperationValue;
import pl.wtx.allegro.api.client.model.Wallet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * BaseOperation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class BaseOperation {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  protected String type;

  /**
   * The group to which the given operation type belongs.
   */
  @JsonAdapter(GroupEnum.Adapter.class)
  public enum GroupEnum {
    INCOME("INCOME"),
    
    OUTCOME("OUTCOME"),
    
    REFUND("REFUND"),
    
    BLOCKADES("BLOCKADES");

    private String value;

    GroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupEnum fromValue(String value) {
      for (GroupEnum b : GroupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  @javax.annotation.Nonnull
  private GroupEnum group;

  public static final String SERIALIZED_NAME_WALLET = "wallet";
  @SerializedName(SERIALIZED_NAME_WALLET)
  @javax.annotation.Nonnull
  private Wallet wallet;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nonnull
  private OperationValue value;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurredAt";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime occurredAt;

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  @javax.annotation.Nullable
  private String marketplaceId;

  public BaseOperation() {
    this.type = this.getClass().getSimpleName();
  }

  public BaseOperation type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the operation.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }


  public BaseOperation group(@javax.annotation.Nonnull GroupEnum group) {
    this.group = group;
    return this;
  }

  /**
   * The group to which the given operation type belongs.
   * @return group
   */
  @javax.annotation.Nonnull
  public GroupEnum getGroup() {
    return group;
  }

  public void setGroup(@javax.annotation.Nonnull GroupEnum group) {
    this.group = group;
  }


  public BaseOperation wallet(@javax.annotation.Nonnull Wallet wallet) {
    this.wallet = wallet;
    return this;
  }

  /**
   * Get wallet
   * @return wallet
   */
  @javax.annotation.Nonnull
  public Wallet getWallet() {
    return wallet;
  }

  public void setWallet(@javax.annotation.Nonnull Wallet wallet) {
    this.wallet = wallet;
  }


  public BaseOperation value(@javax.annotation.Nonnull OperationValue value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public OperationValue getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nonnull OperationValue value) {
    this.value = value;
  }


  public BaseOperation occurredAt(@javax.annotation.Nonnull OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * Date and time of the operation in ISO 8601 format.
   * @return occurredAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(@javax.annotation.Nonnull OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
  }


  public BaseOperation marketplaceId(@javax.annotation.Nullable String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The marketplace ID where operation was made. Value may be &#x60;null&#x60; for operations not assigned to any marketplace.
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(@javax.annotation.Nullable String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseOperation baseOperation = (BaseOperation) o;
    return Objects.equals(this.type, baseOperation.type) &&
        Objects.equals(this.group, baseOperation.group) &&
        Objects.equals(this.wallet, baseOperation.wallet) &&
        Objects.equals(this.value, baseOperation.value) &&
        Objects.equals(this.occurredAt, baseOperation.occurredAt) &&
        Objects.equals(this.marketplaceId, baseOperation.marketplaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, group, wallet, value, occurredAt, marketplaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseOperation {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("group");
    openapiFields.add("wallet");
    openapiFields.add("value");
    openapiFields.add("occurredAt");
    openapiFields.add("marketplaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("group");
    openapiRequiredFields.add("wallet");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("occurredAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseOperation is not found in the empty JSON string", BaseOperation.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "BLOCKADE":
          BlockadeOperation.validateJsonElement(jsonElement);
          break;
        case "BLOCKADE_RELEASE":
          BlockadeReleaseOperation.validateJsonElement(jsonElement);
          break;
        case "COMPENSATION":
          CompensationOperation.validateJsonElement(jsonElement);
          break;
        case "CONTRIBUTION":
          ContributionOperation.validateJsonElement(jsonElement);
          break;
        case "CORRECTION":
          CorrectionOperation.validateJsonElement(jsonElement);
          break;
        case "DEDUCTION_CHARGE":
          DeductionChargeOperation.validateJsonElement(jsonElement);
          break;
        case "DEDUCTION_INCREASE":
          DeductionIncreaseOperation.validateJsonElement(jsonElement);
          break;
        case "PAYOUT":
          PayoutOperation.validateJsonElement(jsonElement);
          break;
        case "PAYOUT_CANCEL":
          PayoutOperationCancel.validateJsonElement(jsonElement);
          break;
        case "PROVIDER_REFUND_TRANSFER_CHARGE":
          ProviderRefundTransferChargeOperation.validateJsonElement(jsonElement);
          break;
        case "PROVIDER_REFUND_TRANSFER_INCREASE":
          ProviderRefundTransferIncreaseOperation.validateJsonElement(jsonElement);
          break;
        case "REFUND_CANCEL":
          RefundCancelOperation.validateJsonElement(jsonElement);
          break;
        case "REFUND_CHARGE":
          RefundChargeOperation.validateJsonElement(jsonElement);
          break;
        case "REFUND_INCREASE":
          RefundIncreaseOperation.validateJsonElement(jsonElement);
          break;
        case "SURCHARGE":
          SurchargeOperation.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of BaseOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseOperation
   * @throws IOException if the JSON string is invalid with respect to BaseOperation
   */
  public static BaseOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseOperation.class);
  }

  /**
   * Convert an instance of BaseOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

