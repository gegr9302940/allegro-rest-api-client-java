/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Can be null if availability range is &#39;DISABLED&#39;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ReturnPolicyReturnCost {
  /**
   * Indicates who covers the return delivery costs.
   */
  @JsonAdapter(CoveredByEnum.Adapter.class)
  public enum CoveredByEnum {
    SELLER("SELLER"),
    
    BUYER("BUYER");

    private String value;

    CoveredByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CoveredByEnum fromValue(String value) {
      for (CoveredByEnum b : CoveredByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CoveredByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CoveredByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CoveredByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CoveredByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CoveredByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COVERED_BY = "coveredBy";
  @SerializedName(SERIALIZED_NAME_COVERED_BY)
  @javax.annotation.Nullable
  private CoveredByEnum coveredBy;

  public ReturnPolicyReturnCost() {
  }

  public ReturnPolicyReturnCost coveredBy(@javax.annotation.Nullable CoveredByEnum coveredBy) {
    this.coveredBy = coveredBy;
    return this;
  }

  /**
   * Indicates who covers the return delivery costs.
   * @return coveredBy
   */
  @javax.annotation.Nullable
  public CoveredByEnum getCoveredBy() {
    return coveredBy;
  }

  public void setCoveredBy(@javax.annotation.Nullable CoveredByEnum coveredBy) {
    this.coveredBy = coveredBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicyReturnCost returnPolicyReturnCost = (ReturnPolicyReturnCost) o;
    return Objects.equals(this.coveredBy, returnPolicyReturnCost.coveredBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coveredBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicyReturnCost {\n");
    sb.append("    coveredBy: ").append(toIndentedString(coveredBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coveredBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicyReturnCost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicyReturnCost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicyReturnCost is not found in the empty JSON string", ReturnPolicyReturnCost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicyReturnCost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicyReturnCost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("coveredBy") != null && !jsonObj.get("coveredBy").isJsonNull()) && !jsonObj.get("coveredBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coveredBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coveredBy").toString()));
      }
      // validate the optional field `coveredBy`
      if (jsonObj.get("coveredBy") != null && !jsonObj.get("coveredBy").isJsonNull()) {
        CoveredByEnum.validateJsonElement(jsonObj.get("coveredBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicyReturnCost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicyReturnCost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicyReturnCost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicyReturnCost.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicyReturnCost>() {
           @Override
           public void write(JsonWriter out, ReturnPolicyReturnCost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicyReturnCost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicyReturnCost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicyReturnCost
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicyReturnCost
   */
  public static ReturnPolicyReturnCost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicyReturnCost.class);
  }

  /**
   * Convert an instance of ReturnPolicyReturnCost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

