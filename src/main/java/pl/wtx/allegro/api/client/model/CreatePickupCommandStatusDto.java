/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.Error400;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CreatePickupCommandStatusDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CreatePickupCommandStatusDto {
  public static final String SERIALIZED_NAME_COMMAND_ID = "commandId";
  @SerializedName(SERIALIZED_NAME_COMMAND_ID)
  @javax.annotation.Nullable
  private String commandId;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCESS("SUCCESS"),
    
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  @javax.annotation.Nullable
  private List<Error400> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PICKUP_ID = "pickupId";
  @SerializedName(SERIALIZED_NAME_PICKUP_ID)
  @javax.annotation.Nullable
  private String pickupId;

  public static final String SERIALIZED_NAME_CARRIER_PICKUP_ID = "carrierPickupId";
  @SerializedName(SERIALIZED_NAME_CARRIER_PICKUP_ID)
  @javax.annotation.Nullable
  private String carrierPickupId;

  public CreatePickupCommandStatusDto() {
  }

  public CreatePickupCommandStatusDto commandId(@javax.annotation.Nullable String commandId) {
    this.commandId = commandId;
    return this;
  }

  /**
   * Command UUID
   * @return commandId
   */
  @javax.annotation.Nullable
  public String getCommandId() {
    return commandId;
  }

  public void setCommandId(@javax.annotation.Nullable String commandId) {
    this.commandId = commandId;
  }


  public CreatePickupCommandStatusDto status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public CreatePickupCommandStatusDto errors(@javax.annotation.Nullable List<Error400> errors) {
    this.errors = errors;
    return this;
  }

  public CreatePickupCommandStatusDto addErrorsItem(Error400 errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * List of errors. Available only, if operation finished with ERROR.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error400> getErrors() {
    return errors;
  }

  public void setErrors(@javax.annotation.Nullable List<Error400> errors) {
    this.errors = errors;
  }


  public CreatePickupCommandStatusDto pickupId(@javax.annotation.Nullable String pickupId) {
    this.pickupId = pickupId;
    return this;
  }

  /**
   * Generated internal pickup ID. Available only, if operation finished with SUCCESS.
   * @return pickupId
   */
  @javax.annotation.Nullable
  public String getPickupId() {
    return pickupId;
  }

  public void setPickupId(@javax.annotation.Nullable String pickupId) {
    this.pickupId = pickupId;
  }


  public CreatePickupCommandStatusDto carrierPickupId(@javax.annotation.Nullable String carrierPickupId) {
    this.carrierPickupId = carrierPickupId;
    return this;
  }

  /**
   * Generated Carrier Pickup ID. Available only, if operation finished with SUCCESS.
   * @return carrierPickupId
   */
  @javax.annotation.Nullable
  public String getCarrierPickupId() {
    return carrierPickupId;
  }

  public void setCarrierPickupId(@javax.annotation.Nullable String carrierPickupId) {
    this.carrierPickupId = carrierPickupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePickupCommandStatusDto createPickupCommandStatusDto = (CreatePickupCommandStatusDto) o;
    return Objects.equals(this.commandId, createPickupCommandStatusDto.commandId) &&
        Objects.equals(this.status, createPickupCommandStatusDto.status) &&
        Objects.equals(this.errors, createPickupCommandStatusDto.errors) &&
        Objects.equals(this.pickupId, createPickupCommandStatusDto.pickupId) &&
        Objects.equals(this.carrierPickupId, createPickupCommandStatusDto.carrierPickupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandId, status, errors, pickupId, carrierPickupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePickupCommandStatusDto {\n");
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    pickupId: ").append(toIndentedString(pickupId)).append("\n");
    sb.append("    carrierPickupId: ").append(toIndentedString(carrierPickupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commandId");
    openapiFields.add("status");
    openapiFields.add("errors");
    openapiFields.add("pickupId");
    openapiFields.add("carrierPickupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePickupCommandStatusDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePickupCommandStatusDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePickupCommandStatusDto is not found in the empty JSON string", CreatePickupCommandStatusDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePickupCommandStatusDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePickupCommandStatusDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commandId") != null && !jsonObj.get("commandId").isJsonNull()) && !jsonObj.get("commandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error400.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("pickupId") != null && !jsonObj.get("pickupId").isJsonNull()) && !jsonObj.get("pickupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupId").toString()));
      }
      if ((jsonObj.get("carrierPickupId") != null && !jsonObj.get("carrierPickupId").isJsonNull()) && !jsonObj.get("carrierPickupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierPickupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierPickupId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePickupCommandStatusDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePickupCommandStatusDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePickupCommandStatusDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePickupCommandStatusDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePickupCommandStatusDto>() {
           @Override
           public void write(JsonWriter out, CreatePickupCommandStatusDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePickupCommandStatusDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePickupCommandStatusDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePickupCommandStatusDto
   * @throws IOException if the JSON string is invalid with respect to CreatePickupCommandStatusDto
   */
  public static CreatePickupCommandStatusDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePickupCommandStatusDto.class);
  }

  /**
   * Convert an instance of CreatePickupCommandStatusDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

