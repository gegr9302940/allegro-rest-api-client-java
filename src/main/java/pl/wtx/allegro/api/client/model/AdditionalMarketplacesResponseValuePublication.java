/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.AdditionalMarketplacesRefusalReasonResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * &lt;small&gt;[read-only]&lt;/small&gt; Contains information about the visibility status of the listing for the given service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AdditionalMarketplacesResponseValuePublication {
  /**
   * Possible values:&lt;/br&gt; - &#x60;APPROVED&#x60; - the offer is visible in the given additional marketplace if it is active.&lt;/br&gt; - &#x60;REFUSED&#x60; - the offer or the seller does not meet the conditions required to display the offer in the given additional marketplace.&lt;/br&gt; - &#x60;IN_PROGRESS&#x60; - the process of qualifying the offer visibility in a given additional service is in progress.&lt;/br&gt; - &#x60;NOT_REQUESTED&#x60; - the seller has not indicated the intention of visibility in the given additional service.&lt;/br&gt; - &#x60;PENDING&#x60; - the seller has indicated the intention of visibility on a given additional marketplace, but the qualification process has not started, for example, due to offer status (only active offers are subject to the qualification process).
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    APPROVED("APPROVED"),
    
    REFUSED("REFUSED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    NOT_REQUESTED("NOT_REQUESTED"),
    
    PENDING("PENDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private StateEnum state;

  public static final String SERIALIZED_NAME_REFUSAL_REASONS = "refusalReasons";
  @SerializedName(SERIALIZED_NAME_REFUSAL_REASONS)
  @javax.annotation.Nullable
  private List<AdditionalMarketplacesRefusalReasonResponse> refusalReasons = new ArrayList<>();

  public AdditionalMarketplacesResponseValuePublication() {
  }

  public AdditionalMarketplacesResponseValuePublication state(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Possible values:&lt;/br&gt; - &#x60;APPROVED&#x60; - the offer is visible in the given additional marketplace if it is active.&lt;/br&gt; - &#x60;REFUSED&#x60; - the offer or the seller does not meet the conditions required to display the offer in the given additional marketplace.&lt;/br&gt; - &#x60;IN_PROGRESS&#x60; - the process of qualifying the offer visibility in a given additional service is in progress.&lt;/br&gt; - &#x60;NOT_REQUESTED&#x60; - the seller has not indicated the intention of visibility in the given additional service.&lt;/br&gt; - &#x60;PENDING&#x60; - the seller has indicated the intention of visibility on a given additional marketplace, but the qualification process has not started, for example, due to offer status (only active offers are subject to the qualification process).
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable StateEnum state) {
    this.state = state;
  }


  public AdditionalMarketplacesResponseValuePublication refusalReasons(@javax.annotation.Nullable List<AdditionalMarketplacesRefusalReasonResponse> refusalReasons) {
    this.refusalReasons = refusalReasons;
    return this;
  }

  public AdditionalMarketplacesResponseValuePublication addRefusalReasonsItem(AdditionalMarketplacesRefusalReasonResponse refusalReasonsItem) {
    if (this.refusalReasons == null) {
      this.refusalReasons = new ArrayList<>();
    }
    this.refusalReasons.add(refusalReasonsItem);
    return this;
  }

  /**
   * Reasons for marketplace publication refusal. Empty list for not refused marketplaces.
   * @return refusalReasons
   */
  @javax.annotation.Nullable
  public List<AdditionalMarketplacesRefusalReasonResponse> getRefusalReasons() {
    return refusalReasons;
  }

  public void setRefusalReasons(@javax.annotation.Nullable List<AdditionalMarketplacesRefusalReasonResponse> refusalReasons) {
    this.refusalReasons = refusalReasons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalMarketplacesResponseValuePublication additionalMarketplacesResponseValuePublication = (AdditionalMarketplacesResponseValuePublication) o;
    return Objects.equals(this.state, additionalMarketplacesResponseValuePublication.state) &&
        Objects.equals(this.refusalReasons, additionalMarketplacesResponseValuePublication.refusalReasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, refusalReasons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalMarketplacesResponseValuePublication {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    refusalReasons: ").append(toIndentedString(refusalReasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("refusalReasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalMarketplacesResponseValuePublication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalMarketplacesResponseValuePublication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalMarketplacesResponseValuePublication is not found in the empty JSON string", AdditionalMarketplacesResponseValuePublication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalMarketplacesResponseValuePublication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalMarketplacesResponseValuePublication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("refusalReasons") != null && !jsonObj.get("refusalReasons").isJsonNull()) {
        JsonArray jsonArrayrefusalReasons = jsonObj.getAsJsonArray("refusalReasons");
        if (jsonArrayrefusalReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refusalReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refusalReasons` to be an array in the JSON string but got `%s`", jsonObj.get("refusalReasons").toString()));
          }

          // validate the optional field `refusalReasons` (array)
          for (int i = 0; i < jsonArrayrefusalReasons.size(); i++) {
            AdditionalMarketplacesRefusalReasonResponse.validateJsonElement(jsonArrayrefusalReasons.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalMarketplacesResponseValuePublication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalMarketplacesResponseValuePublication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalMarketplacesResponseValuePublication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalMarketplacesResponseValuePublication.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalMarketplacesResponseValuePublication>() {
           @Override
           public void write(JsonWriter out, AdditionalMarketplacesResponseValuePublication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalMarketplacesResponseValuePublication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalMarketplacesResponseValuePublication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalMarketplacesResponseValuePublication
   * @throws IOException if the JSON string is invalid with respect to AdditionalMarketplacesResponseValuePublication
   */
  public static AdditionalMarketplacesResponseValuePublication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalMarketplacesResponseValuePublication.class);
  }

  /**
   * Convert an instance of AdditionalMarketplacesResponseValuePublication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

