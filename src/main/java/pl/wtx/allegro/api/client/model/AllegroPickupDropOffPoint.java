/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.AllegroCarrier;
import pl.wtx.allegro.api.client.model.AllegroPickupDropOffPointAddress;
import pl.wtx.allegro.api.client.model.AllegroPickupDropOffPointOpeningInner;
import pl.wtx.allegro.api.client.model.AllegroPickupDropOffPointPaymentsInner;
import pl.wtx.allegro.api.client.model.AllegroPickupDropOffPointRestrictionsInner;
import pl.wtx.allegro.api.client.model.AllegroPickupDropOffPointServicesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Allegro pickup drop off point.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AllegroPickupDropOffPoint {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  /**
   * Point type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PUDO("PUDO"),
    
    APM("APM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  @javax.annotation.Nonnull
  private List<AllegroPickupDropOffPointServicesInner> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  @javax.annotation.Nonnull
  private List<AllegroPickupDropOffPointRestrictionsInner> restrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  @javax.annotation.Nonnull
  private List<AllegroPickupDropOffPointPaymentsInner> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private AllegroPickupDropOffPointAddress address;

  public static final String SERIALIZED_NAME_OPENING = "opening";
  @SerializedName(SERIALIZED_NAME_OPENING)
  @javax.annotation.Nonnull
  private List<AllegroPickupDropOffPointOpeningInner> opening = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARRIERS = "carriers";
  @SerializedName(SERIALIZED_NAME_CARRIERS)
  @javax.annotation.Nonnull
  private List<AllegroCarrier> carriers = new ArrayList<>();

  public AllegroPickupDropOffPoint() {
  }

  public AllegroPickupDropOffPoint id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Point id. You can use it in Ship with Allegro.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public AllegroPickupDropOffPoint name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Point name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public AllegroPickupDropOffPoint type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Point type.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public AllegroPickupDropOffPoint services(@javax.annotation.Nonnull List<AllegroPickupDropOffPointServicesInner> services) {
    this.services = services;
    return this;
  }

  public AllegroPickupDropOffPoint addServicesItem(AllegroPickupDropOffPointServicesInner servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * Point services.
   * @return services
   */
  @javax.annotation.Nonnull
  public List<AllegroPickupDropOffPointServicesInner> getServices() {
    return services;
  }

  public void setServices(@javax.annotation.Nonnull List<AllegroPickupDropOffPointServicesInner> services) {
    this.services = services;
  }


  public AllegroPickupDropOffPoint restrictions(@javax.annotation.Nonnull List<AllegroPickupDropOffPointRestrictionsInner> restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  public AllegroPickupDropOffPoint addRestrictionsItem(AllegroPickupDropOffPointRestrictionsInner restrictionsItem) {
    if (this.restrictions == null) {
      this.restrictions = new ArrayList<>();
    }
    this.restrictions.add(restrictionsItem);
    return this;
  }

  /**
   * Point restrictions.
   * @return restrictions
   */
  @javax.annotation.Nonnull
  public List<AllegroPickupDropOffPointRestrictionsInner> getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(@javax.annotation.Nonnull List<AllegroPickupDropOffPointRestrictionsInner> restrictions) {
    this.restrictions = restrictions;
  }


  public AllegroPickupDropOffPoint description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Point description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public AllegroPickupDropOffPoint payments(@javax.annotation.Nonnull List<AllegroPickupDropOffPointPaymentsInner> payments) {
    this.payments = payments;
    return this;
  }

  public AllegroPickupDropOffPoint addPaymentsItem(AllegroPickupDropOffPointPaymentsInner paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * Point payment type.
   * @return payments
   */
  @javax.annotation.Nonnull
  public List<AllegroPickupDropOffPointPaymentsInner> getPayments() {
    return payments;
  }

  public void setPayments(@javax.annotation.Nonnull List<AllegroPickupDropOffPointPaymentsInner> payments) {
    this.payments = payments;
  }


  public AllegroPickupDropOffPoint address(@javax.annotation.Nonnull AllegroPickupDropOffPointAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public AllegroPickupDropOffPointAddress getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull AllegroPickupDropOffPointAddress address) {
    this.address = address;
  }


  public AllegroPickupDropOffPoint opening(@javax.annotation.Nonnull List<AllegroPickupDropOffPointOpeningInner> opening) {
    this.opening = opening;
    return this;
  }

  public AllegroPickupDropOffPoint addOpeningItem(AllegroPickupDropOffPointOpeningInner openingItem) {
    if (this.opening == null) {
      this.opening = new ArrayList<>();
    }
    this.opening.add(openingItem);
    return this;
  }

  /**
   * Point working hours information.
   * @return opening
   */
  @javax.annotation.Nonnull
  public List<AllegroPickupDropOffPointOpeningInner> getOpening() {
    return opening;
  }

  public void setOpening(@javax.annotation.Nonnull List<AllegroPickupDropOffPointOpeningInner> opening) {
    this.opening = opening;
  }


  public AllegroPickupDropOffPoint carriers(@javax.annotation.Nonnull List<AllegroCarrier> carriers) {
    this.carriers = carriers;
    return this;
  }

  public AllegroPickupDropOffPoint addCarriersItem(AllegroCarrier carriersItem) {
    if (this.carriers == null) {
      this.carriers = new ArrayList<>();
    }
    this.carriers.add(carriersItem);
    return this;
  }

  /**
   * List of carriers that can drop off/pick up packages from point.
   * @return carriers
   */
  @javax.annotation.Nonnull
  public List<AllegroCarrier> getCarriers() {
    return carriers;
  }

  public void setCarriers(@javax.annotation.Nonnull List<AllegroCarrier> carriers) {
    this.carriers = carriers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllegroPickupDropOffPoint allegroPickupDropOffPoint = (AllegroPickupDropOffPoint) o;
    return Objects.equals(this.id, allegroPickupDropOffPoint.id) &&
        Objects.equals(this.name, allegroPickupDropOffPoint.name) &&
        Objects.equals(this.type, allegroPickupDropOffPoint.type) &&
        Objects.equals(this.services, allegroPickupDropOffPoint.services) &&
        Objects.equals(this.restrictions, allegroPickupDropOffPoint.restrictions) &&
        Objects.equals(this.description, allegroPickupDropOffPoint.description) &&
        Objects.equals(this.payments, allegroPickupDropOffPoint.payments) &&
        Objects.equals(this.address, allegroPickupDropOffPoint.address) &&
        Objects.equals(this.opening, allegroPickupDropOffPoint.opening) &&
        Objects.equals(this.carriers, allegroPickupDropOffPoint.carriers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, services, restrictions, description, payments, address, opening, carriers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllegroPickupDropOffPoint {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    opening: ").append(toIndentedString(opening)).append("\n");
    sb.append("    carriers: ").append(toIndentedString(carriers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("services");
    openapiFields.add("restrictions");
    openapiFields.add("description");
    openapiFields.add("payments");
    openapiFields.add("address");
    openapiFields.add("opening");
    openapiFields.add("carriers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("services");
    openapiRequiredFields.add("restrictions");
    openapiRequiredFields.add("payments");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("opening");
    openapiRequiredFields.add("carriers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllegroPickupDropOffPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllegroPickupDropOffPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllegroPickupDropOffPoint is not found in the empty JSON string", AllegroPickupDropOffPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllegroPickupDropOffPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllegroPickupDropOffPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AllegroPickupDropOffPoint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // ensure the json data is an array
      if (!jsonObj.get("services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
      }

      JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
      // validate the required field `services` (array)
      for (int i = 0; i < jsonArrayservices.size(); i++) {
        AllegroPickupDropOffPointServicesInner.validateJsonElement(jsonArrayservices.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("restrictions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictions` to be an array in the JSON string but got `%s`", jsonObj.get("restrictions").toString()));
      }

      JsonArray jsonArrayrestrictions = jsonObj.getAsJsonArray("restrictions");
      // validate the required field `restrictions` (array)
      for (int i = 0; i < jsonArrayrestrictions.size(); i++) {
        AllegroPickupDropOffPointRestrictionsInner.validateJsonElement(jsonArrayrestrictions.get(i));
      };
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("payments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
      }

      JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
      // validate the required field `payments` (array)
      for (int i = 0; i < jsonArraypayments.size(); i++) {
        AllegroPickupDropOffPointPaymentsInner.validateJsonElement(jsonArraypayments.get(i));
      };
      // validate the required field `address`
      AllegroPickupDropOffPointAddress.validateJsonElement(jsonObj.get("address"));
      // ensure the json data is an array
      if (!jsonObj.get("opening").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `opening` to be an array in the JSON string but got `%s`", jsonObj.get("opening").toString()));
      }

      JsonArray jsonArrayopening = jsonObj.getAsJsonArray("opening");
      // validate the required field `opening` (array)
      for (int i = 0; i < jsonArrayopening.size(); i++) {
        AllegroPickupDropOffPointOpeningInner.validateJsonElement(jsonArrayopening.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("carriers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("carriers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `carriers` to be an array in the JSON string but got `%s`", jsonObj.get("carriers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllegroPickupDropOffPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllegroPickupDropOffPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllegroPickupDropOffPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllegroPickupDropOffPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<AllegroPickupDropOffPoint>() {
           @Override
           public void write(JsonWriter out, AllegroPickupDropOffPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllegroPickupDropOffPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllegroPickupDropOffPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllegroPickupDropOffPoint
   * @throws IOException if the JSON string is invalid with respect to AllegroPickupDropOffPoint
   */
  public static AllegroPickupDropOffPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllegroPickupDropOffPoint.class);
  }

  /**
   * Convert an instance of AllegroPickupDropOffPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

