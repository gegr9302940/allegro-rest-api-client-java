/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Definition of cash on delivery specification for method. If null, then COD is not supported.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CashOnDeliveryLimitDto {
  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private BigDecimal limit;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency = "PLN";

  /**
   * Type of payment: Money transfer to merchant bank account or internal wallet payout
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    MONEY_TRANSFER("MONEY_TRANSFER"),
    
    WALLET_TRANSFER("WALLET_TRANSFER");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  @javax.annotation.Nullable
  private PaymentTypeEnum paymentType;

  public static final String SERIALIZED_NAME_FORCE_REQUIRE_IBAN = "forceRequireIban";
  @SerializedName(SERIALIZED_NAME_FORCE_REQUIRE_IBAN)
  @javax.annotation.Nullable
  private Boolean forceRequireIban;

  public CashOnDeliveryLimitDto() {
  }

  public CashOnDeliveryLimitDto limit(@javax.annotation.Nullable BigDecimal limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Maximum value
   * @return limit
   */
  @javax.annotation.Nullable
  public BigDecimal getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable BigDecimal limit) {
    this.limit = limit;
  }


  public CashOnDeliveryLimitDto currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Supported currency: &#39;PLN&#39; | &#39;CZK
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public CashOnDeliveryLimitDto paymentType(@javax.annotation.Nullable PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Type of payment: Money transfer to merchant bank account or internal wallet payout
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(@javax.annotation.Nullable PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }


  public CashOnDeliveryLimitDto forceRequireIban(@javax.annotation.Nullable Boolean forceRequireIban) {
    this.forceRequireIban = forceRequireIban;
    return this;
  }

  /**
   * Defined that COD required IBAN for process shipment. If true, then request of shipment creation without IBAN will be rejected.
   * @return forceRequireIban
   */
  @javax.annotation.Nullable
  public Boolean getForceRequireIban() {
    return forceRequireIban;
  }

  public void setForceRequireIban(@javax.annotation.Nullable Boolean forceRequireIban) {
    this.forceRequireIban = forceRequireIban;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashOnDeliveryLimitDto cashOnDeliveryLimitDto = (CashOnDeliveryLimitDto) o;
    return Objects.equals(this.limit, cashOnDeliveryLimitDto.limit) &&
        Objects.equals(this.currency, cashOnDeliveryLimitDto.currency) &&
        Objects.equals(this.paymentType, cashOnDeliveryLimitDto.paymentType) &&
        Objects.equals(this.forceRequireIban, cashOnDeliveryLimitDto.forceRequireIban);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, currency, paymentType, forceRequireIban);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashOnDeliveryLimitDto {\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    forceRequireIban: ").append(toIndentedString(forceRequireIban)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("limit");
    openapiFields.add("currency");
    openapiFields.add("paymentType");
    openapiFields.add("forceRequireIban");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CashOnDeliveryLimitDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CashOnDeliveryLimitDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashOnDeliveryLimitDto is not found in the empty JSON string", CashOnDeliveryLimitDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CashOnDeliveryLimitDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CashOnDeliveryLimitDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) && !jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      // validate the optional field `paymentType`
      if (jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) {
        PaymentTypeEnum.validateJsonElement(jsonObj.get("paymentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashOnDeliveryLimitDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashOnDeliveryLimitDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashOnDeliveryLimitDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashOnDeliveryLimitDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CashOnDeliveryLimitDto>() {
           @Override
           public void write(JsonWriter out, CashOnDeliveryLimitDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CashOnDeliveryLimitDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CashOnDeliveryLimitDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CashOnDeliveryLimitDto
   * @throws IOException if the JSON string is invalid with respect to CashOnDeliveryLimitDto
   */
  public static CashOnDeliveryLimitDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashOnDeliveryLimitDto.class);
  }

  /**
   * Convert an instance of CashOnDeliveryLimitDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

