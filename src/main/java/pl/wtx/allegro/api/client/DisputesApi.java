/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AttachmentDeclaration;
import pl.wtx.allegro.api.client.model.Dispute;
import pl.wtx.allegro.api.client.model.DisputeAttachmentId;
import pl.wtx.allegro.api.client.model.DisputeListResponse;
import pl.wtx.allegro.api.client.model.DisputeMessage;
import pl.wtx.allegro.api.client.model.DisputeMessageList;
import java.io.File;
import pl.wtx.allegro.api.client.model.MessageRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisputesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisputesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisputesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addMessageToDisputeUsingPOST
     * @param disputeId Dispute identifier. (required)
     * @param messageRequest Message request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Dispute is in a state that forbids adding new messages </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMessageToDisputeUsingPOSTCall(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nonnull MessageRequest messageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = messageRequest;

        // create path and map variables
        String localVarPath = "/sale/disputes/{disputeId}/messages"
            .replace("{" + "disputeId" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMessageToDisputeUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nonnull MessageRequest messageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling addMessageToDisputeUsingPOST(Async)");
        }

        // verify the required parameter 'messageRequest' is set
        if (messageRequest == null) {
            throw new ApiException("Missing the required parameter 'messageRequest' when calling addMessageToDisputeUsingPOST(Async)");
        }

        return addMessageToDisputeUsingPOSTCall(disputeId, messageRequest, _callback);

    }

    /**
     * Add a message to a dispute
     * Use this resource to post a message in certain dispute. At least one of fields: &#39;text&#39;, &#39;attachment&#39; has to be present. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#nowa-wiadomosc-w-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#add-a-new-message-in-the-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @param messageRequest Message request (required)
     * @return DisputeMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Dispute is in a state that forbids adding new messages </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public DisputeMessage addMessageToDisputeUsingPOST(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nonnull MessageRequest messageRequest) throws ApiException {
        ApiResponse<DisputeMessage> localVarResp = addMessageToDisputeUsingPOSTWithHttpInfo(disputeId, messageRequest);
        return localVarResp.getData();
    }

    /**
     * Add a message to a dispute
     * Use this resource to post a message in certain dispute. At least one of fields: &#39;text&#39;, &#39;attachment&#39; has to be present. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#nowa-wiadomosc-w-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#add-a-new-message-in-the-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @param messageRequest Message request (required)
     * @return ApiResponse&lt;DisputeMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Dispute is in a state that forbids adding new messages </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeMessage> addMessageToDisputeUsingPOSTWithHttpInfo(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nonnull MessageRequest messageRequest) throws ApiException {
        okhttp3.Call localVarCall = addMessageToDisputeUsingPOSTValidateBeforeCall(disputeId, messageRequest, null);
        Type localVarReturnType = new TypeToken<DisputeMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a message to a dispute (asynchronously)
     * Use this resource to post a message in certain dispute. At least one of fields: &#39;text&#39;, &#39;attachment&#39; has to be present. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#nowa-wiadomosc-w-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#add-a-new-message-in-the-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @param messageRequest Message request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Dispute is in a state that forbids adding new messages </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMessageToDisputeUsingPOSTAsync(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nonnull MessageRequest messageRequest, final ApiCallback<DisputeMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMessageToDisputeUsingPOSTValidateBeforeCall(disputeId, messageRequest, _callback);
        Type localVarReturnType = new TypeToken<DisputeMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnAttachmentUsingPOST
     * @param attachmentDeclaration A detailed declaration of a file to be uploaded (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAttachmentUsingPOSTCall(@javax.annotation.Nonnull AttachmentDeclaration attachmentDeclaration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachmentDeclaration;

        // create path and map variables
        String localVarPath = "/sale/dispute-attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnAttachmentUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull AttachmentDeclaration attachmentDeclaration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentDeclaration' is set
        if (attachmentDeclaration == null) {
            throw new ApiException("Missing the required parameter 'attachmentDeclaration' when calling createAnAttachmentUsingPOST(Async)");
        }

        return createAnAttachmentUsingPOSTCall(attachmentDeclaration, _callback);

    }

    /**
     * Create an attachment declaration
     * Use this resource to post an attachment declaration. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#deklaracja-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-declaration\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentDeclaration A detailed declaration of a file to be uploaded (required)
     * @return DisputeAttachmentId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public DisputeAttachmentId createAnAttachmentUsingPOST(@javax.annotation.Nonnull AttachmentDeclaration attachmentDeclaration) throws ApiException {
        ApiResponse<DisputeAttachmentId> localVarResp = createAnAttachmentUsingPOSTWithHttpInfo(attachmentDeclaration);
        return localVarResp.getData();
    }

    /**
     * Create an attachment declaration
     * Use this resource to post an attachment declaration. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#deklaracja-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-declaration\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentDeclaration A detailed declaration of a file to be uploaded (required)
     * @return ApiResponse&lt;DisputeAttachmentId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeAttachmentId> createAnAttachmentUsingPOSTWithHttpInfo(@javax.annotation.Nonnull AttachmentDeclaration attachmentDeclaration) throws ApiException {
        okhttp3.Call localVarCall = createAnAttachmentUsingPOSTValidateBeforeCall(attachmentDeclaration, null);
        Type localVarReturnType = new TypeToken<DisputeAttachmentId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an attachment declaration (asynchronously)
     * Use this resource to post an attachment declaration. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#deklaracja-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-declaration\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentDeclaration A detailed declaration of a file to be uploaded (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  * Location - The location URI points to a resource that will display the status of the asynchronous processing. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAttachmentUsingPOSTAsync(@javax.annotation.Nonnull AttachmentDeclaration attachmentDeclaration, final ApiCallback<DisputeAttachmentId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnAttachmentUsingPOSTValidateBeforeCall(attachmentDeclaration, _callback);
        Type localVarReturnType = new TypeToken<DisputeAttachmentId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentUsingGET
     * @param attachmentId Attachment identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentUsingGETCall(@javax.annotation.Nonnull UUID attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/dispute-attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentUsingGETValidateBeforeCall(@javax.annotation.Nonnull UUID attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getAttachmentUsingGET(Async)");
        }

        return getAttachmentUsingGETCall(attachmentId, _callback);

    }

    /**
     * Get an attachment
     * Use this resource to get an attachment. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#pobranie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-related-to-the-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Attachment identifier. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public File getAttachmentUsingGET(@javax.annotation.Nonnull UUID attachmentId) throws ApiException {
        ApiResponse<File> localVarResp = getAttachmentUsingGETWithHttpInfo(attachmentId);
        return localVarResp.getData();
    }

    /**
     * Get an attachment
     * Use this resource to get an attachment. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#pobranie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-related-to-the-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Attachment identifier. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAttachmentUsingGETWithHttpInfo(@javax.annotation.Nonnull UUID attachmentId) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentUsingGETValidateBeforeCall(attachmentId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an attachment (asynchronously)
     * Use this resource to get an attachment. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#pobranie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#attachment-related-to-the-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Attachment identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentUsingGETAsync(@javax.annotation.Nonnull UUID attachmentId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentUsingGETValidateBeforeCall(attachmentId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDisputeUsingGET
     * @param disputeId Dispute identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisputeUsingGETCall(@javax.annotation.Nonnull UUID disputeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/disputes/{disputeId}"
            .replace("{" + "disputeId" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDisputeUsingGETValidateBeforeCall(@javax.annotation.Nonnull UUID disputeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling getDisputeUsingGET(Async)");
        }

        return getDisputeUsingGETCall(disputeId, _callback);

    }

    /**
     * Get a single dispute
     * Use this resource to get a single dispute. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#szczegolowe-informacje-o-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#information-about-a-particular-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @return Dispute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Dispute getDisputeUsingGET(@javax.annotation.Nonnull UUID disputeId) throws ApiException {
        ApiResponse<Dispute> localVarResp = getDisputeUsingGETWithHttpInfo(disputeId);
        return localVarResp.getData();
    }

    /**
     * Get a single dispute
     * Use this resource to get a single dispute. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#szczegolowe-informacje-o-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#information-about-a-particular-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @return ApiResponse&lt;Dispute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dispute> getDisputeUsingGETWithHttpInfo(@javax.annotation.Nonnull UUID disputeId) throws ApiException {
        okhttp3.Call localVarCall = getDisputeUsingGETValidateBeforeCall(disputeId, null);
        Type localVarReturnType = new TypeToken<Dispute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single dispute (asynchronously)
     * Use this resource to get a single dispute. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#szczegolowe-informacje-o-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#information-about-a-particular-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisputeUsingGETAsync(@javax.annotation.Nonnull UUID disputeId, final ApiCallback<Dispute> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDisputeUsingGETValidateBeforeCall(disputeId, _callback);
        Type localVarReturnType = new TypeToken<Dispute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfDisputesUsingGET
     * @param checkoutFormId Checkout form identifier. (optional)
     * @param limit The maximum number of disputes in a response. (optional, default to 10)
     * @param offset Index of first returned dispute. (optional, default to 0)
     * @param status Filter disputes with given set of statuses. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfDisputesUsingGETCall(@javax.annotation.Nullable UUID checkoutFormId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable List<String> status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkoutFormId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkoutForm.id", checkoutFormId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfDisputesUsingGETValidateBeforeCall(@javax.annotation.Nullable UUID checkoutFormId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable List<String> status, final ApiCallback _callback) throws ApiException {
        return getListOfDisputesUsingGETCall(checkoutFormId, limit, offset, status, _callback);

    }

    /**
     * Get the user&#39;s disputes
     * Use this resource to get the list of your disputes ordered by descending opened date. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dyskusje-na-koncie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-discussions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param checkoutFormId Checkout form identifier. (optional)
     * @param limit The maximum number of disputes in a response. (optional, default to 10)
     * @param offset Index of first returned dispute. (optional, default to 0)
     * @param status Filter disputes with given set of statuses. (optional)
     * @return DisputeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public DisputeListResponse getListOfDisputesUsingGET(@javax.annotation.Nullable UUID checkoutFormId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable List<String> status) throws ApiException {
        ApiResponse<DisputeListResponse> localVarResp = getListOfDisputesUsingGETWithHttpInfo(checkoutFormId, limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s disputes
     * Use this resource to get the list of your disputes ordered by descending opened date. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dyskusje-na-koncie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-discussions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param checkoutFormId Checkout form identifier. (optional)
     * @param limit The maximum number of disputes in a response. (optional, default to 10)
     * @param offset Index of first returned dispute. (optional, default to 0)
     * @param status Filter disputes with given set of statuses. (optional)
     * @return ApiResponse&lt;DisputeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeListResponse> getListOfDisputesUsingGETWithHttpInfo(@javax.annotation.Nullable UUID checkoutFormId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable List<String> status) throws ApiException {
        okhttp3.Call localVarCall = getListOfDisputesUsingGETValidateBeforeCall(checkoutFormId, limit, offset, status, null);
        Type localVarReturnType = new TypeToken<DisputeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s disputes (asynchronously)
     * Use this resource to get the list of your disputes ordered by descending opened date. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dyskusje-na-koncie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-discussions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param checkoutFormId Checkout form identifier. (optional)
     * @param limit The maximum number of disputes in a response. (optional, default to 10)
     * @param offset Index of first returned dispute. (optional, default to 0)
     * @param status Filter disputes with given set of statuses. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfDisputesUsingGETAsync(@javax.annotation.Nullable UUID checkoutFormId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable List<String> status, final ApiCallback<DisputeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfDisputesUsingGETValidateBeforeCall(checkoutFormId, limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<DisputeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessagesFromDisputeUsingGET
     * @param disputeId Dispute identifier. (required)
     * @param limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param offset Index of first returned message within dispute. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesFromDisputeUsingGETCall(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/disputes/{disputeId}/messages"
            .replace("{" + "disputeId" + "}", localVarApiClient.escapeString(disputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesFromDisputeUsingGETValidateBeforeCall(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeId' is set
        if (disputeId == null) {
            throw new ApiException("Missing the required parameter 'disputeId' when calling getMessagesFromDisputeUsingGET(Async)");
        }

        return getMessagesFromDisputeUsingGETCall(disputeId, limit, offset, _callback);

    }

    /**
     * Get the messages within a dispute
     * Use this resource to get the list of messages within dispute. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#wiadomosci-z-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-messages-within-a-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @param limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param offset Index of first returned message within dispute. (optional, default to 0)
     * @return DisputeMessageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DisputeMessageList getMessagesFromDisputeUsingGET(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<DisputeMessageList> localVarResp = getMessagesFromDisputeUsingGETWithHttpInfo(disputeId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get the messages within a dispute
     * Use this resource to get the list of messages within dispute. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#wiadomosci-z-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-messages-within-a-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @param limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param offset Index of first returned message within dispute. (optional, default to 0)
     * @return ApiResponse&lt;DisputeMessageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeMessageList> getMessagesFromDisputeUsingGETWithHttpInfo(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getMessagesFromDisputeUsingGETValidateBeforeCall(disputeId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DisputeMessageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the messages within a dispute (asynchronously)
     * Use this resource to get the list of messages within dispute. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#wiadomosci-z-dyskusji\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#all-messages-within-a-discussion\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param disputeId Dispute identifier. (required)
     * @param limit The maximum number of messages within dispute returned in a response. (optional, default to 10)
     * @param offset Index of first returned message within dispute. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagesFromDisputeUsingGETAsync(@javax.annotation.Nonnull UUID disputeId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<DisputeMessageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesFromDisputeUsingGETValidateBeforeCall(disputeId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DisputeMessageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDisputeAttachmentUsingPUT
     * @param attachmentId Attachment identifier. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDisputeAttachmentUsingPUTCall(@javax.annotation.Nonnull UUID attachmentId, @javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.{environment}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sale/dispute-attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/png",
            "image/gif",
            "image/bmp",
            "image/tiff",
            "image/jpeg",
            "application/pdf"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDisputeAttachmentUsingPUTValidateBeforeCall(@javax.annotation.Nonnull UUID attachmentId, @javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling uploadDisputeAttachmentUsingPUT(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadDisputeAttachmentUsingPUT(Async)");
        }

        return uploadDisputeAttachmentUsingPUTCall(attachmentId, body, _callback);

    }

    /**
     * Upload a dispute message attachment
     * Upload a dispute message attachment. This operation should be used after creating an attachment declaration with *POST /sale/dispute-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/dispute-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dodanie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#adding-an-attachment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Attachment identifier. (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public void uploadDisputeAttachmentUsingPUT(@javax.annotation.Nonnull UUID attachmentId, @javax.annotation.Nonnull File body) throws ApiException {
        uploadDisputeAttachmentUsingPUTWithHttpInfo(attachmentId, body);
    }

    /**
     * Upload a dispute message attachment
     * Upload a dispute message attachment. This operation should be used after creating an attachment declaration with *POST /sale/dispute-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/dispute-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dodanie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#adding-an-attachment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Attachment identifier. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadDisputeAttachmentUsingPUTWithHttpInfo(@javax.annotation.Nonnull UUID attachmentId, @javax.annotation.Nonnull File body) throws ApiException {
        okhttp3.Call localVarCall = uploadDisputeAttachmentUsingPUTValidateBeforeCall(attachmentId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a dispute message attachment (asynchronously)
     * Upload a dispute message attachment. This operation should be used after creating an attachment declaration with *POST /sale/dispute-attachments* **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/dispute-attachments*. The URL is unique and one-time. As its format may change in time, you should always use the address from the header. Do not compose the address on your own. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-dyskusjami-E7Zj6gK7ysE#dodanie-zalacznika\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-manage-discussions-VL6Yr40e5t5#adding-an-attachment\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param attachmentId Attachment identifier. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File uploaded correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntactically incorrect request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing bearer token </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File is too big </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDisputeAttachmentUsingPUTAsync(@javax.annotation.Nonnull UUID attachmentId, @javax.annotation.Nonnull File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDisputeAttachmentUsingPUTValidateBeforeCall(attachmentId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
