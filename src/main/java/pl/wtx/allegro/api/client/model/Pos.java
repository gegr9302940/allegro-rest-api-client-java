/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.Address;
import pl.wtx.allegro.api.client.model.OpenHour;
import pl.wtx.allegro.api.client.model.Payment;
import pl.wtx.allegro.api.client.model.PosLocation;
import pl.wtx.allegro.api.client.model.Seller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Pos
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Pos {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  @javax.annotation.Nullable
  private Seller seller;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private String type;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private Address address;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nullable
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  @javax.annotation.Nullable
  private List<PosLocation> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPEN_HOURS = "openHours";
  @SerializedName(SERIALIZED_NAME_OPEN_HOURS)
  @javax.annotation.Nonnull
  private List<OpenHour> openHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_TIME = "serviceTime";
  @SerializedName(SERIALIZED_NAME_SERVICE_TIME)
  @javax.annotation.Nullable
  private String serviceTime;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  @javax.annotation.Nullable
  private List<Payment> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIRMATION_TYPE = "confirmationType";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_TYPE)
  @javax.annotation.Nonnull
  private String confirmationType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private String status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private String updatedAt;

  public Pos() {
  }

  public Pos id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * UUID. When creating a point of service (Post) the field is ignored. It is required when updating (Put) a point of service.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Pos externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * ID from external client system.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public Pos name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public Pos seller(@javax.annotation.Nullable Seller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public Seller getSeller() {
    return seller;
  }

  public void setSeller(@javax.annotation.Nullable Seller seller) {
    this.seller = seller;
  }


  public Pos type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Indicates point type. The only valid value so far is PICKUP_POINT.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }


  public Pos address(@javax.annotation.Nonnull Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull Address address) {
    this.address = address;
  }


  public Pos phoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Pos email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public Pos locations(@javax.annotation.Nullable List<PosLocation> locations) {
    this.locations = locations;
    return this;
  }

  public Pos addLocationsItem(PosLocation locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * IDs for a location. When creating (Post) or updating (Put) a point of service the field is ignored.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<PosLocation> getLocations() {
    return locations;
  }

  public void setLocations(@javax.annotation.Nullable List<PosLocation> locations) {
    this.locations = locations;
  }


  public Pos openHours(@javax.annotation.Nonnull List<OpenHour> openHours) {
    this.openHours = openHours;
    return this;
  }

  public Pos addOpenHoursItem(OpenHour openHoursItem) {
    if (this.openHours == null) {
      this.openHours = new ArrayList<>();
    }
    this.openHours.add(openHoursItem);
    return this;
  }

  /**
   * Possible empty list of opening hours.
   * @return openHours
   */
  @javax.annotation.Nonnull
  public List<OpenHour> getOpenHours() {
    return openHours;
  }

  public void setOpenHours(@javax.annotation.Nonnull List<OpenHour> openHours) {
    this.openHours = openHours;
  }


  public Pos serviceTime(@javax.annotation.Nullable String serviceTime) {
    this.serviceTime = serviceTime;
    return this;
  }

  /**
   * Delivery time / Time period for receipt. Date format ISO 8601 e.g. &#39;PT24H&#39;
   * @return serviceTime
   */
  @javax.annotation.Nullable
  public String getServiceTime() {
    return serviceTime;
  }

  public void setServiceTime(@javax.annotation.Nullable String serviceTime) {
    this.serviceTime = serviceTime;
  }


  public Pos payments(@javax.annotation.Nullable List<Payment> payments) {
    this.payments = payments;
    return this;
  }

  public Pos addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * An empty list of payment types is available.
   * @return payments
   */
  @javax.annotation.Nullable
  public List<Payment> getPayments() {
    return payments;
  }

  public void setPayments(@javax.annotation.Nullable List<Payment> payments) {
    this.payments = payments;
  }


  public Pos confirmationType(@javax.annotation.Nonnull String confirmationType) {
    this.confirmationType = confirmationType;
    return this;
  }

  /**
   * Confirmation method: AWAIT_CONTACT - We will inform you about the time of receipt, CALL_US - Please make an appointment, CONTACT_NOT_REQUIRED - Contact is not required.
   * @return confirmationType
   */
  @javax.annotation.Nonnull
  public String getConfirmationType() {
    return confirmationType;
  }

  public void setConfirmationType(@javax.annotation.Nonnull String confirmationType) {
    this.confirmationType = confirmationType;
  }


  public Pos status(@javax.annotation.Nonnull String status) {
    this.status = status;
    return this;
  }

  /**
   * Point of service status: ACTIVE - active, TEMPORARILY_CLOSED - temporarily closed, CLOSED_DOWN - closed down, DELETED - deleted.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull String status) {
    this.status = status;
  }


  public Pos createdAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date. Date format (ISO 8601) - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ When creating (Post) or updating (Put) a point of service the field is ignored.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
  }


  public Pos updatedAt(@javax.annotation.Nullable String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Modification date. Date format (ISO 8601) - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ When creating (Post) or updating (Put) a point of service the field is ignored.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pos pos = (Pos) o;
    return Objects.equals(this.id, pos.id) &&
        Objects.equals(this.externalId, pos.externalId) &&
        Objects.equals(this.name, pos.name) &&
        Objects.equals(this.seller, pos.seller) &&
        Objects.equals(this.type, pos.type) &&
        Objects.equals(this.address, pos.address) &&
        Objects.equals(this.phoneNumber, pos.phoneNumber) &&
        Objects.equals(this.email, pos.email) &&
        Objects.equals(this.locations, pos.locations) &&
        Objects.equals(this.openHours, pos.openHours) &&
        Objects.equals(this.serviceTime, pos.serviceTime) &&
        Objects.equals(this.payments, pos.payments) &&
        Objects.equals(this.confirmationType, pos.confirmationType) &&
        Objects.equals(this.status, pos.status) &&
        Objects.equals(this.createdAt, pos.createdAt) &&
        Objects.equals(this.updatedAt, pos.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, externalId, name, seller, type, address, phoneNumber, email, locations, openHours, serviceTime, payments, confirmationType, status, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pos {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    openHours: ").append(toIndentedString(openHours)).append("\n");
    sb.append("    serviceTime: ").append(toIndentedString(serviceTime)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    confirmationType: ").append(toIndentedString(confirmationType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("externalId");
    openapiFields.add("name");
    openapiFields.add("seller");
    openapiFields.add("type");
    openapiFields.add("address");
    openapiFields.add("phoneNumber");
    openapiFields.add("email");
    openapiFields.add("locations");
    openapiFields.add("openHours");
    openapiFields.add("serviceTime");
    openapiFields.add("payments");
    openapiFields.add("confirmationType");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("openHours");
    openapiRequiredFields.add("confirmationType");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pos
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pos.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pos is not found in the empty JSON string", Pos.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pos.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pos` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Pos.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        Seller.validateJsonElement(jsonObj.get("seller"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            PosLocation.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("openHours").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `openHours` to be an array in the JSON string but got `%s`", jsonObj.get("openHours").toString()));
      }

      JsonArray jsonArrayopenHours = jsonObj.getAsJsonArray("openHours");
      // validate the required field `openHours` (array)
      for (int i = 0; i < jsonArrayopenHours.size(); i++) {
        OpenHour.validateJsonElement(jsonArrayopenHours.get(i));
      };
      if ((jsonObj.get("serviceTime") != null && !jsonObj.get("serviceTime").isJsonNull()) && !jsonObj.get("serviceTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceTime").toString()));
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if (!jsonObj.get("confirmationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationType").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pos.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pos' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pos> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pos.class));

       return (TypeAdapter<T>) new TypeAdapter<Pos>() {
           @Override
           public void write(JsonWriter out, Pos value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pos read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pos given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pos
   * @throws IOException if the JSON string is invalid with respect to Pos
   */
  public static Pos fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pos.class);
  }

  /**
   * Convert an instance of Pos to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

