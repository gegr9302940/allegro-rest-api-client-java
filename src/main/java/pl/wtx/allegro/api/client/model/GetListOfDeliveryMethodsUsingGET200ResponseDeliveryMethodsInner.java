/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.allegro.api.client.model.GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInnerShippingRatesConstraints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_MARKETPLACES = "marketplaces";
  @SerializedName(SERIALIZED_NAME_MARKETPLACES)
  @javax.annotation.Nullable
  private List<String> marketplaces = new ArrayList<>();

  /**
   * Whether the payment is to be collected in advance or on delivery.
   */
  @JsonAdapter(PaymentPolicyEnum.Adapter.class)
  public enum PaymentPolicyEnum {
    IN_ADVANCE("IN_ADVANCE"),
    
    CASH_ON_DELIVERY("CASH_ON_DELIVERY");

    private String value;

    PaymentPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentPolicyEnum fromValue(String value) {
      for (PaymentPolicyEnum b : PaymentPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_POLICY = "paymentPolicy";
  @SerializedName(SERIALIZED_NAME_PAYMENT_POLICY)
  @javax.annotation.Nullable
  private PaymentPolicyEnum paymentPolicy;

  public static final String SERIALIZED_NAME_ALLEGRO_ENDORSED = "allegroEndorsed";
  @SerializedName(SERIALIZED_NAME_ALLEGRO_ENDORSED)
  @javax.annotation.Nullable
  private Boolean allegroEndorsed;

  public static final String SERIALIZED_NAME_DISPATCH_COUNTRY = "dispatchCountry";
  @SerializedName(SERIALIZED_NAME_DISPATCH_COUNTRY)
  @javax.annotation.Nullable
  private String dispatchCountry;

  public static final String SERIALIZED_NAME_DESTINATION_COUNTRY = "destinationCountry";
  @SerializedName(SERIALIZED_NAME_DESTINATION_COUNTRY)
  @javax.annotation.Nullable
  private String destinationCountry;

  public static final String SERIALIZED_NAME_SHIPPING_RATES_CONSTRAINTS = "shippingRatesConstraints";
  @SerializedName(SERIALIZED_NAME_SHIPPING_RATES_CONSTRAINTS)
  @javax.annotation.Nullable
  private GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInnerShippingRatesConstraints shippingRatesConstraints;

  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner() {
  }

  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Delivery method id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Delivery method name. Please note that only method ids are unique, not method names. For duplicate names, check the marketplaces, paymentPolicy and allegroEndorsed properties as well.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner marketplaces(@javax.annotation.Nullable List<String> marketplaces) {
    this.marketplaces = marketplaces;
    return this;
  }

  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner addMarketplacesItem(String marketplacesItem) {
    if (this.marketplaces == null) {
      this.marketplaces = new ArrayList<>();
    }
    this.marketplaces.add(marketplacesItem);
    return this;
  }

  /**
   * List of marketplace ids where this delivery method is available for buyers.
   * @return marketplaces
   */
  @javax.annotation.Nullable
  public List<String> getMarketplaces() {
    return marketplaces;
  }

  public void setMarketplaces(@javax.annotation.Nullable List<String> marketplaces) {
    this.marketplaces = marketplaces;
  }


  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner paymentPolicy(@javax.annotation.Nullable PaymentPolicyEnum paymentPolicy) {
    this.paymentPolicy = paymentPolicy;
    return this;
  }

  /**
   * Whether the payment is to be collected in advance or on delivery.
   * @return paymentPolicy
   */
  @javax.annotation.Nullable
  public PaymentPolicyEnum getPaymentPolicy() {
    return paymentPolicy;
  }

  public void setPaymentPolicy(@javax.annotation.Nullable PaymentPolicyEnum paymentPolicy) {
    this.paymentPolicy = paymentPolicy;
  }


  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner allegroEndorsed(@javax.annotation.Nullable Boolean allegroEndorsed) {
    this.allegroEndorsed = allegroEndorsed;
    return this;
  }

  /**
   * Indicates Allegro signed delivery method, which allows to easily distinguish similar delivery methods with various restrictions, e.g. Allegro Paczkomaty 24/7 InPost from Paczkomaty 24/7.
   * @return allegroEndorsed
   */
  @javax.annotation.Nullable
  public Boolean getAllegroEndorsed() {
    return allegroEndorsed;
  }

  public void setAllegroEndorsed(@javax.annotation.Nullable Boolean allegroEndorsed) {
    this.allegroEndorsed = allegroEndorsed;
  }


  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner dispatchCountry(@javax.annotation.Nullable String dispatchCountry) {
    this.dispatchCountry = dispatchCountry;
    return this;
  }

  /**
   * Country code from which the shipment is dispatched, if null the country is undefined and the shipment can be dispatched from any country.
   * @return dispatchCountry
   */
  @javax.annotation.Nullable
  public String getDispatchCountry() {
    return dispatchCountry;
  }

  public void setDispatchCountry(@javax.annotation.Nullable String dispatchCountry) {
    this.dispatchCountry = dispatchCountry;
  }


  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner destinationCountry(@javax.annotation.Nullable String destinationCountry) {
    this.destinationCountry = destinationCountry;
    return this;
  }

  /**
   * Country code to which the shipment is being sent.
   * @return destinationCountry
   */
  @javax.annotation.Nullable
  public String getDestinationCountry() {
    return destinationCountry;
  }

  public void setDestinationCountry(@javax.annotation.Nullable String destinationCountry) {
    this.destinationCountry = destinationCountry;
  }


  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner shippingRatesConstraints(@javax.annotation.Nullable GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInnerShippingRatesConstraints shippingRatesConstraints) {
    this.shippingRatesConstraints = shippingRatesConstraints;
    return this;
  }

  /**
   * Get shippingRatesConstraints
   * @return shippingRatesConstraints
   */
  @javax.annotation.Nullable
  public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInnerShippingRatesConstraints getShippingRatesConstraints() {
    return shippingRatesConstraints;
  }

  public void setShippingRatesConstraints(@javax.annotation.Nullable GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInnerShippingRatesConstraints shippingRatesConstraints) {
    this.shippingRatesConstraints = shippingRatesConstraints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner = (GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner) o;
    return Objects.equals(this.id, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.id) &&
        Objects.equals(this.name, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.name) &&
        Objects.equals(this.marketplaces, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.marketplaces) &&
        Objects.equals(this.paymentPolicy, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.paymentPolicy) &&
        Objects.equals(this.allegroEndorsed, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.allegroEndorsed) &&
        Objects.equals(this.dispatchCountry, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.dispatchCountry) &&
        Objects.equals(this.destinationCountry, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.destinationCountry) &&
        Objects.equals(this.shippingRatesConstraints, getListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.shippingRatesConstraints);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, marketplaces, paymentPolicy, allegroEndorsed, dispatchCountry, destinationCountry, shippingRatesConstraints);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    marketplaces: ").append(toIndentedString(marketplaces)).append("\n");
    sb.append("    paymentPolicy: ").append(toIndentedString(paymentPolicy)).append("\n");
    sb.append("    allegroEndorsed: ").append(toIndentedString(allegroEndorsed)).append("\n");
    sb.append("    dispatchCountry: ").append(toIndentedString(dispatchCountry)).append("\n");
    sb.append("    destinationCountry: ").append(toIndentedString(destinationCountry)).append("\n");
    sb.append("    shippingRatesConstraints: ").append(toIndentedString(shippingRatesConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("marketplaces");
    openapiFields.add("paymentPolicy");
    openapiFields.add("allegroEndorsed");
    openapiFields.add("dispatchCountry");
    openapiFields.add("destinationCountry");
    openapiFields.add("shippingRatesConstraints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner is not found in the empty JSON string", GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketplaces") != null && !jsonObj.get("marketplaces").isJsonNull() && !jsonObj.get("marketplaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaces` to be an array in the JSON string but got `%s`", jsonObj.get("marketplaces").toString()));
      }
      if ((jsonObj.get("paymentPolicy") != null && !jsonObj.get("paymentPolicy").isJsonNull()) && !jsonObj.get("paymentPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPolicy").toString()));
      }
      // validate the optional field `paymentPolicy`
      if (jsonObj.get("paymentPolicy") != null && !jsonObj.get("paymentPolicy").isJsonNull()) {
        PaymentPolicyEnum.validateJsonElement(jsonObj.get("paymentPolicy"));
      }
      if ((jsonObj.get("dispatchCountry") != null && !jsonObj.get("dispatchCountry").isJsonNull()) && !jsonObj.get("dispatchCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatchCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatchCountry").toString()));
      }
      if ((jsonObj.get("destinationCountry") != null && !jsonObj.get("destinationCountry").isJsonNull()) && !jsonObj.get("destinationCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationCountry").toString()));
      }
      // validate the optional field `shippingRatesConstraints`
      if (jsonObj.get("shippingRatesConstraints") != null && !jsonObj.get("shippingRatesConstraints").isJsonNull()) {
        GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInnerShippingRatesConstraints.validateJsonElement(jsonObj.get("shippingRatesConstraints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner>() {
           @Override
           public void write(JsonWriter out, GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner
   * @throws IOException if the JSON string is invalid with respect to GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner
   */
  public static GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner.class);
  }

  /**
   * Convert an instance of GetListOfDeliveryMethodsUsingGET200ResponseDeliveryMethodsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

