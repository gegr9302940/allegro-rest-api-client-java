/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.GeneralReport;
import pl.wtx.allegro.api.client.model.OfferAutomaticPricingCommand;
import pl.wtx.allegro.api.client.model.OfferChangeCommand;
import pl.wtx.allegro.api.client.model.OfferPriceChangeCommand;
import pl.wtx.allegro.api.client.model.OfferQuantityChangeCommand;
import pl.wtx.allegro.api.client.model.TaskReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BatchOfferModificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchOfferModificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BatchOfferModificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getGeneralReportUsingGET
     * @param commandId Command identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneralReportUsingGETCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-modification-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneralReportUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getGeneralReportUsingGET(Async)");
        }

        return getGeneralReportUsingGETCall(commandId, _callback);

    }

    /**
     * Modification command summary
     * Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport getGeneralReportUsingGET(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = getGeneralReportUsingGETWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Modification command summary
     * Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> getGeneralReportUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getGeneralReportUsingGETValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification command summary (asynchronously)
     * Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary with a number of successfully edited offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneralReportUsingGETAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneralReportUsingGETValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPriceModificationCommandStatusUsingGET
     * @param commandId Command identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceModificationCommandStatusUsingGETCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-price-change-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriceModificationCommandStatusUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getPriceModificationCommandStatusUsingGET(Async)");
        }

        return getPriceModificationCommandStatusUsingGETCall(commandId, _callback);

    }

    /**
     * Change price command summary
     * Returns status and summary of particular command execution. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport getPriceModificationCommandStatusUsingGET(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = getPriceModificationCommandStatusUsingGETWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Change price command summary
     * Returns status and summary of particular command execution. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> getPriceModificationCommandStatusUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getPriceModificationCommandStatusUsingGETValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change price command summary (asynchronously)
     * Returns status and summary of particular command execution. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceModificationCommandStatusUsingGETAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriceModificationCommandStatusUsingGETValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPriceModificationCommandTasksStatusesUsingGET
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceModificationCommandTasksStatusesUsingGETCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-price-change-commands/{commandId}/tasks"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriceModificationCommandTasksStatusesUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getPriceModificationCommandTasksStatusesUsingGET(Async)");
        }

        return getPriceModificationCommandTasksStatusesUsingGETCall(commandId, limit, offset, _callback);

    }

    /**
     * Change price command detailed report
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return TaskReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public TaskReport getPriceModificationCommandTasksStatusesUsingGET(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<TaskReport> localVarResp = getPriceModificationCommandTasksStatusesUsingGETWithHttpInfo(commandId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Change price command detailed report
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;TaskReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskReport> getPriceModificationCommandTasksStatusesUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPriceModificationCommandTasksStatusesUsingGETValidateBeforeCall(commandId, limit, offset, null);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change price command detailed report (asynchronously)
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceModificationCommandTasksStatusesUsingGETAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<TaskReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriceModificationCommandTasksStatusesUsingGETValidateBeforeCall(commandId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuantityModificationCommandStatusUsingGET
     * @param commandId Command identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuantityModificationCommandStatusUsingGETCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-quantity-change-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuantityModificationCommandStatusUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getQuantityModificationCommandStatusUsingGET(Async)");
        }

        return getQuantityModificationCommandStatusUsingGETCall(commandId, _callback);

    }

    /**
     * Change quantity command summary
     * Returns status and summary of the command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport getQuantityModificationCommandStatusUsingGET(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = getQuantityModificationCommandStatusUsingGETWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Change quantity command summary
     * Returns status and summary of the command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> getQuantityModificationCommandStatusUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getQuantityModificationCommandStatusUsingGETValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change quantity command summary (asynchronously)
     * Returns status and summary of the command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuantityModificationCommandStatusUsingGETAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuantityModificationCommandStatusUsingGETValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuantityModificationCommandTasksStatusesUsingGET
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuantityModificationCommandTasksStatusesUsingGETCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-quantity-change-commands/{commandId}/tasks"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuantityModificationCommandTasksStatusesUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getQuantityModificationCommandTasksStatusesUsingGET(Async)");
        }

        return getQuantityModificationCommandTasksStatusesUsingGETCall(commandId, limit, offset, _callback);

    }

    /**
     * Change quantity command detailed report
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return TaskReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public TaskReport getQuantityModificationCommandTasksStatusesUsingGET(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<TaskReport> localVarResp = getQuantityModificationCommandTasksStatusesUsingGETWithHttpInfo(commandId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Change quantity command detailed report
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;TaskReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskReport> getQuantityModificationCommandTasksStatusesUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getQuantityModificationCommandTasksStatusesUsingGETValidateBeforeCall(commandId, limit, offset, null);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change quantity command detailed report (asynchronously)
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuantityModificationCommandTasksStatusesUsingGETAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<TaskReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuantityModificationCommandTasksStatusesUsingGETValidateBeforeCall(commandId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksUsingGET
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksUsingGETCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-modification-commands/{commandId}/tasks"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getTasksUsingGET(Async)");
        }

        return getTasksUsingGETCall(commandId, limit, offset, _callback);

    }

    /**
     * Modification command detailed report
     * Use this resource to retrieve a detailed summary of changes introduced within one {commandId} (defaults: limit &#x3D; 100, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return TaskReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public TaskReport getTasksUsingGET(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<TaskReport> localVarResp = getTasksUsingGETWithHttpInfo(commandId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Modification command detailed report
     * Use this resource to retrieve a detailed summary of changes introduced within one {commandId} (defaults: limit &#x3D; 100, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;TaskReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskReport> getTasksUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTasksUsingGETValidateBeforeCall(commandId, limit, offset, null);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification command detailed report (asynchronously)
     * Use this resource to retrieve a detailed summary of changes introduced within one {commandId} (defaults: limit &#x3D; 100, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksUsingGETAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<TaskReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksUsingGETValidateBeforeCall(commandId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getofferAutomaticPricingModificationCommandStatusUsingGET
     * @param commandId Command identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getofferAutomaticPricingModificationCommandStatusUsingGETCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-price-automation-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getofferAutomaticPricingModificationCommandStatusUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getofferAutomaticPricingModificationCommandStatusUsingGET(Async)");
        }

        return getofferAutomaticPricingModificationCommandStatusUsingGETCall(commandId, _callback);

    }

    /**
     * Automatic pricing command summary
     * Returns status and summary of the offer-price-automation-command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport getofferAutomaticPricingModificationCommandStatusUsingGET(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = getofferAutomaticPricingModificationCommandStatusUsingGETWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Automatic pricing command summary
     * Returns status and summary of the offer-price-automation-command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> getofferAutomaticPricingModificationCommandStatusUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getofferAutomaticPricingModificationCommandStatusUsingGETValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Automatic pricing command summary (asynchronously)
     * Returns status and summary of the offer-price-automation-command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report was generated and successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getofferAutomaticPricingModificationCommandStatusUsingGETAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getofferAutomaticPricingModificationCommandStatusUsingGETValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getofferAutomaticPricingModificationCommandTasksStatusesUsingGET
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getofferAutomaticPricingModificationCommandTasksStatusesUsingGETCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-price-automation-commands/{commandId}/tasks"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getofferAutomaticPricingModificationCommandTasksStatusesUsingGETValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getofferAutomaticPricingModificationCommandTasksStatusesUsingGET(Async)");
        }

        return getofferAutomaticPricingModificationCommandTasksStatusesUsingGETCall(commandId, limit, offset, _callback);

    }

    /**
     * Automatic pricing command detailed report
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Returns status and report of the offer-price-automation-command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return TaskReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public TaskReport getofferAutomaticPricingModificationCommandTasksStatusesUsingGET(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<TaskReport> localVarResp = getofferAutomaticPricingModificationCommandTasksStatusesUsingGETWithHttpInfo(commandId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Automatic pricing command detailed report
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Returns status and report of the offer-price-automation-command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;TaskReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskReport> getofferAutomaticPricingModificationCommandTasksStatusesUsingGETWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getofferAutomaticPricingModificationCommandTasksStatusesUsingGETValidateBeforeCall(commandId, limit, offset, null);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Automatic pricing command detailed report (asynchronously)
     * Defaults: limit &#x3D; 100, offset &#x3D; 0. Returns status and report of the offer-price-automation-command. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to retrieving information about 270 000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task status successfully returned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getofferAutomaticPricingModificationCommandTasksStatusesUsingGETAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<TaskReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getofferAutomaticPricingModificationCommandTasksStatusesUsingGETValidateBeforeCall(commandId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TaskReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modificationCommandUsingPUT
     * @param commandId Command identifier. (required)
     * @param offerChangeCommand offerChangeCommandDto (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modificationCommandUsingPUTCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferChangeCommand offerChangeCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerChangeCommand;

        // create path and map variables
        String localVarPath = "/sale/offer-modification-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modificationCommandUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferChangeCommand offerChangeCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling modificationCommandUsingPUT(Async)");
        }

        // verify the required parameter 'offerChangeCommand' is set
        if (offerChangeCommand == null) {
            throw new ApiException("Missing the required parameter 'offerChangeCommand' when calling modificationCommandUsingPUT(Async)");
        }

        return modificationCommandUsingPUTCall(commandId, offerChangeCommand, _callback);

    }

    /**
     * Batch offer modification
     * Use this resource to modify multiple offers at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param offerChangeCommand offerChangeCommandDto (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport modificationCommandUsingPUT(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferChangeCommand offerChangeCommand) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = modificationCommandUsingPUTWithHttpInfo(commandId, offerChangeCommand);
        return localVarResp.getData();
    }

    /**
     * Batch offer modification
     * Use this resource to modify multiple offers at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param offerChangeCommand offerChangeCommandDto (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> modificationCommandUsingPUTWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferChangeCommand offerChangeCommand) throws ApiException {
        okhttp3.Call localVarCall = modificationCommandUsingPUTValidateBeforeCall(commandId, offerChangeCommand, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch offer modification (asynchronously)
     * Use this resource to modify multiple offers at once. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#edycja-wielu-ofert-jednoczesnie\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#editing-many-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param offerChangeCommand offerChangeCommandDto (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modificationCommandUsingPUTAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferChangeCommand offerChangeCommand, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = modificationCommandUsingPUTValidateBeforeCall(commandId, offerChangeCommand, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offerAutomaticPricingModificationCommandUsingPOST
     * @param offerAutomaticPricingCommand OfferAutomaticPricingCommand (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerAutomaticPricingModificationCommandUsingPOSTCall(@javax.annotation.Nonnull OfferAutomaticPricingCommand offerAutomaticPricingCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerAutomaticPricingCommand;

        // create path and map variables
        String localVarPath = "/sale/offer-price-automation-commands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offerAutomaticPricingModificationCommandUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull OfferAutomaticPricingCommand offerAutomaticPricingCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerAutomaticPricingCommand' is set
        if (offerAutomaticPricingCommand == null) {
            throw new ApiException("Missing the required parameter 'offerAutomaticPricingCommand' when calling offerAutomaticPricingModificationCommandUsingPOST(Async)");
        }

        return offerAutomaticPricingModificationCommandUsingPOSTCall(offerAutomaticPricingCommand, _callback);

    }

    /**
     * Batch offer automatic pricing rules modification
     * Use this resource to modify the automatic pricing rules of multiple offers at the same time. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 150 000 offer changes per hour or 9000 offer changes per minute.
     * @param offerAutomaticPricingCommand OfferAutomaticPricingCommand (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport offerAutomaticPricingModificationCommandUsingPOST(@javax.annotation.Nonnull OfferAutomaticPricingCommand offerAutomaticPricingCommand) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = offerAutomaticPricingModificationCommandUsingPOSTWithHttpInfo(offerAutomaticPricingCommand);
        return localVarResp.getData();
    }

    /**
     * Batch offer automatic pricing rules modification
     * Use this resource to modify the automatic pricing rules of multiple offers at the same time. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 150 000 offer changes per hour or 9000 offer changes per minute.
     * @param offerAutomaticPricingCommand OfferAutomaticPricingCommand (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> offerAutomaticPricingModificationCommandUsingPOSTWithHttpInfo(@javax.annotation.Nonnull OfferAutomaticPricingCommand offerAutomaticPricingCommand) throws ApiException {
        okhttp3.Call localVarCall = offerAutomaticPricingModificationCommandUsingPOSTValidateBeforeCall(offerAutomaticPricingCommand, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch offer automatic pricing rules modification (asynchronously)
     * Use this resource to modify the automatic pricing rules of multiple offers at the same time. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#reguly-cenowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#pricing-rules\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 150 000 offer changes per hour or 9000 offer changes per minute.
     * @param offerAutomaticPricingCommand OfferAutomaticPricingCommand (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerAutomaticPricingModificationCommandUsingPOSTAsync(@javax.annotation.Nonnull OfferAutomaticPricingCommand offerAutomaticPricingCommand, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = offerAutomaticPricingModificationCommandUsingPOSTValidateBeforeCall(offerAutomaticPricingCommand, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceModificationCommandUsingPUT
     * @param commandId Command identifier. (required)
     * @param offerPriceChangeCommand offerPriceChangeCommandDto (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceModificationCommandUsingPUTCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferPriceChangeCommand offerPriceChangeCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerPriceChangeCommand;

        // create path and map variables
        String localVarPath = "/sale/offer-price-change-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceModificationCommandUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferPriceChangeCommand offerPriceChangeCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling priceModificationCommandUsingPUT(Async)");
        }

        // verify the required parameter 'offerPriceChangeCommand' is set
        if (offerPriceChangeCommand == null) {
            throw new ApiException("Missing the required parameter 'offerPriceChangeCommand' when calling priceModificationCommandUsingPUT(Async)");
        }

        return priceModificationCommandUsingPUTCall(commandId, offerPriceChangeCommand, _callback);

    }

    /**
     * Batch offer price modification
     * Change price of offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 150 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param offerPriceChangeCommand offerPriceChangeCommandDto (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport priceModificationCommandUsingPUT(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferPriceChangeCommand offerPriceChangeCommand) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = priceModificationCommandUsingPUTWithHttpInfo(commandId, offerPriceChangeCommand);
        return localVarResp.getData();
    }

    /**
     * Batch offer price modification
     * Change price of offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 150 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param offerPriceChangeCommand offerPriceChangeCommandDto (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> priceModificationCommandUsingPUTWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferPriceChangeCommand offerPriceChangeCommand) throws ApiException {
        okhttp3.Call localVarCall = priceModificationCommandUsingPUTValidateBeforeCall(commandId, offerPriceChangeCommand, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch offer price modification (asynchronously)
     * Change price of offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#cena\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#price\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 150 000 offer changes per hour or 9000 offer changes per minute.
     * @param commandId Command identifier. (required)
     * @param offerPriceChangeCommand offerPriceChangeCommandDto (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceModificationCommandUsingPUTAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferPriceChangeCommand offerPriceChangeCommand, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceModificationCommandUsingPUTValidateBeforeCall(commandId, offerPriceChangeCommand, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for quantityModificationCommandUsingPUT
     * @param commandId Command identifier. (required)
     * @param offerQuantityChangeCommand offerQuantityChangeCommandDto (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quantityModificationCommandUsingPUTCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferQuantityChangeCommand offerQuantityChangeCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerQuantityChangeCommand;

        // create path and map variables
        String localVarPath = "/sale/offer-quantity-change-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quantityModificationCommandUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferQuantityChangeCommand offerQuantityChangeCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling quantityModificationCommandUsingPUT(Async)");
        }

        // verify the required parameter 'offerQuantityChangeCommand' is set
        if (offerQuantityChangeCommand == null) {
            throw new ApiException("Missing the required parameter 'offerQuantityChangeCommand' when calling quantityModificationCommandUsingPUT(Async)");
        }

        return quantityModificationCommandUsingPUTCall(commandId, offerQuantityChangeCommand, _callback);

    }

    /**
     * Batch offer quantity modification
     * Change quantity of multiple offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute - limit applies to a single user of the application.
     * @param commandId Command identifier. (required)
     * @param offerQuantityChangeCommand offerQuantityChangeCommandDto (required)
     * @return GeneralReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public GeneralReport quantityModificationCommandUsingPUT(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferQuantityChangeCommand offerQuantityChangeCommand) throws ApiException {
        ApiResponse<GeneralReport> localVarResp = quantityModificationCommandUsingPUTWithHttpInfo(commandId, offerQuantityChangeCommand);
        return localVarResp.getData();
    }

    /**
     * Batch offer quantity modification
     * Change quantity of multiple offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute - limit applies to a single user of the application.
     * @param commandId Command identifier. (required)
     * @param offerQuantityChangeCommand offerQuantityChangeCommandDto (required)
     * @return ApiResponse&lt;GeneralReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralReport> quantityModificationCommandUsingPUTWithHttpInfo(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferQuantityChangeCommand offerQuantityChangeCommand) throws ApiException {
        okhttp3.Call localVarCall = quantityModificationCommandUsingPUTValidateBeforeCall(commandId, offerQuantityChangeCommand, null);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch offer quantity modification (asynchronously)
     * Change quantity of multiple offers. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#liczba-przedmiotow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#quantity\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 250 000 offer changes per hour or 9000 offer changes per minute - limit applies to a single user of the application.
     * @param commandId Command identifier. (required)
     * @param offerQuantityChangeCommand offerQuantityChangeCommandDto (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command was registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Command id was already used </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quantityModificationCommandUsingPUTAsync(@javax.annotation.Nonnull String commandId, @javax.annotation.Nonnull OfferQuantityChangeCommand offerQuantityChangeCommand, final ApiCallback<GeneralReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = quantityModificationCommandUsingPUTValidateBeforeCall(commandId, offerQuantityChangeCommand, _callback);
        Type localVarReturnType = new TypeToken<GeneralReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
