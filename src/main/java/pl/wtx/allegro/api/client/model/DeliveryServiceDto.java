/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import pl.wtx.allegro.api.client.model.AdditionalPropertyDto;
import pl.wtx.allegro.api.client.model.AdditionalServiceDto;
import pl.wtx.allegro.api.client.model.CashOnDeliveryLimitDto;
import pl.wtx.allegro.api.client.model.DeliveryServiceIdDto;
import pl.wtx.allegro.api.client.model.LimitWithCurrencyDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Primary object for Ship with Allegro. It&#39;s strongly related to delivery-method selected by buyer in purchase process and represent how shipment will be delivered. Delivery services contains set of features like cash on delivery support, additional parcel protection, additional services used to shipment creation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class DeliveryServiceDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private DeliveryServiceIdDto id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrierId";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  @javax.annotation.Nullable
  private String carrierId;

  public static final String SERIALIZED_NAME_ADDITIONAL_SERVICES = "additionalServices";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SERVICES)
  @javax.annotation.Nullable
  private List<AdditionalServiceDto> additionalServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  @javax.annotation.Nullable
  private List<AdditionalPropertyDto> additionalProperties = new ArrayList<>();

  /**
   * Define delivery method type. ALLEGRO - Allegro Standard. Client - Merchant carrier agreement
   */
  @JsonAdapter(OwnerEnum.Adapter.class)
  public enum OwnerEnum {
    ALLEGRO("ALLEGRO"),
    
    CLIENT("CLIENT");

    private String value;

    OwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerEnum fromValue(String value) {
      for (OwnerEnum b : OwnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  @javax.annotation.Nullable
  private OwnerEnum owner;

  public static final String SERIALIZED_NAME_MARKETPLACES = "marketplaces";
  @SerializedName(SERIALIZED_NAME_MARKETPLACES)
  @javax.annotation.Nullable
  private List<String> marketplaces = new ArrayList<>();

  /**
   * Gets or Sets packageTypes
   */
  @JsonAdapter(PackageTypesEnum.Adapter.class)
  public enum PackageTypesEnum {
    DOX("DOX"),
    
    PACKAGE("PACKAGE"),
    
    PALLET("PALLET"),
    
    OTHER("OTHER");

    private String value;

    PackageTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackageTypesEnum fromValue(String value) {
      for (PackageTypesEnum b : PackageTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackageTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackageTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackageTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackageTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PackageTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKAGE_TYPES = "packageTypes";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPES)
  @javax.annotation.Nullable
  private List<PackageTypesEnum> packageTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CASH_ON_DELIVERY = "cashOnDelivery";
  @SerializedName(SERIALIZED_NAME_CASH_ON_DELIVERY)
  @javax.annotation.Nullable
  private CashOnDeliveryLimitDto cashOnDelivery;

  public static final String SERIALIZED_NAME_INSURANCE = "insurance";
  @SerializedName(SERIALIZED_NAME_INSURANCE)
  @javax.annotation.Nullable
  private LimitWithCurrencyDto insurance;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  @javax.annotation.Nullable
  private Map<String, String> features = new HashMap<>();

  public DeliveryServiceDto() {
  }

  public DeliveryServiceDto id(@javax.annotation.Nullable DeliveryServiceIdDto id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public DeliveryServiceIdDto getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable DeliveryServiceIdDto id) {
    this.id = id;
  }


  public DeliveryServiceDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of delivery service. &lt;br/&gt; For Allegro Standard method, name of service will be exactly same and occurs only once: eg. &#39;Allegro Courier DPD&#39;. &lt;br/&gt; For merchant&#39;s controlled method, name is concatenation of method name and credential name: eg. &#39;Courier DPD (My agreement)&#39;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public DeliveryServiceDto carrierId(@javax.annotation.Nullable String carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  /**
   * Get carrierId
   * @return carrierId
   */
  @javax.annotation.Nullable
  public String getCarrierId() {
    return carrierId;
  }

  public void setCarrierId(@javax.annotation.Nullable String carrierId) {
    this.carrierId = carrierId;
  }


  public DeliveryServiceDto additionalServices(@javax.annotation.Nullable List<AdditionalServiceDto> additionalServices) {
    this.additionalServices = additionalServices;
    return this;
  }

  public DeliveryServiceDto addAdditionalServicesItem(AdditionalServiceDto additionalServicesItem) {
    if (this.additionalServices == null) {
      this.additionalServices = new ArrayList<>();
    }
    this.additionalServices.add(additionalServicesItem);
    return this;
  }

  /**
   * Get additionalServices
   * @return additionalServices
   */
  @javax.annotation.Nullable
  public List<AdditionalServiceDto> getAdditionalServices() {
    return additionalServices;
  }

  public void setAdditionalServices(@javax.annotation.Nullable List<AdditionalServiceDto> additionalServices) {
    this.additionalServices = additionalServices;
  }


  public DeliveryServiceDto additionalProperties(@javax.annotation.Nullable List<AdditionalPropertyDto> additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  public DeliveryServiceDto addAdditionalPropertiesItem(AdditionalPropertyDto additionalPropertiesItem) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new ArrayList<>();
    }
    this.additionalProperties.add(additionalPropertiesItem);
    return this;
  }

  /**
   * Get additionalProperties
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public List<AdditionalPropertyDto> getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(@javax.annotation.Nullable List<AdditionalPropertyDto> additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public DeliveryServiceDto owner(@javax.annotation.Nullable OwnerEnum owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Define delivery method type. ALLEGRO - Allegro Standard. Client - Merchant carrier agreement
   * @return owner
   */
  @javax.annotation.Nullable
  public OwnerEnum getOwner() {
    return owner;
  }

  public void setOwner(@javax.annotation.Nullable OwnerEnum owner) {
    this.owner = owner;
  }


  public DeliveryServiceDto marketplaces(@javax.annotation.Nullable List<String> marketplaces) {
    this.marketplaces = marketplaces;
    return this;
  }

  public DeliveryServiceDto addMarketplacesItem(String marketplacesItem) {
    if (this.marketplaces == null) {
      this.marketplaces = new ArrayList<>();
    }
    this.marketplaces.add(marketplacesItem);
    return this;
  }

  /**
   * List of marketplaces supported by service
   * @return marketplaces
   */
  @javax.annotation.Nullable
  public List<String> getMarketplaces() {
    return marketplaces;
  }

  public void setMarketplaces(@javax.annotation.Nullable List<String> marketplaces) {
    this.marketplaces = marketplaces;
  }


  public DeliveryServiceDto packageTypes(@javax.annotation.Nullable List<PackageTypesEnum> packageTypes) {
    this.packageTypes = packageTypes;
    return this;
  }

  public DeliveryServiceDto addPackageTypesItem(PackageTypesEnum packageTypesItem) {
    if (this.packageTypes == null) {
      this.packageTypes = new ArrayList<>();
    }
    this.packageTypes.add(packageTypesItem);
    return this;
  }

  /**
   * List of supported package types
   * @return packageTypes
   */
  @javax.annotation.Nullable
  public List<PackageTypesEnum> getPackageTypes() {
    return packageTypes;
  }

  public void setPackageTypes(@javax.annotation.Nullable List<PackageTypesEnum> packageTypes) {
    this.packageTypes = packageTypes;
  }


  public DeliveryServiceDto cashOnDelivery(@javax.annotation.Nullable CashOnDeliveryLimitDto cashOnDelivery) {
    this.cashOnDelivery = cashOnDelivery;
    return this;
  }

  /**
   * Get cashOnDelivery
   * @return cashOnDelivery
   */
  @javax.annotation.Nullable
  public CashOnDeliveryLimitDto getCashOnDelivery() {
    return cashOnDelivery;
  }

  public void setCashOnDelivery(@javax.annotation.Nullable CashOnDeliveryLimitDto cashOnDelivery) {
    this.cashOnDelivery = cashOnDelivery;
  }


  public DeliveryServiceDto insurance(@javax.annotation.Nullable LimitWithCurrencyDto insurance) {
    this.insurance = insurance;
    return this;
  }

  /**
   * Get insurance
   * @return insurance
   */
  @javax.annotation.Nullable
  public LimitWithCurrencyDto getInsurance() {
    return insurance;
  }

  public void setInsurance(@javax.annotation.Nullable LimitWithCurrencyDto insurance) {
    this.insurance = insurance;
  }


  public DeliveryServiceDto features(@javax.annotation.Nullable Map<String, String> features) {
    this.features = features;
    return this;
  }

  public DeliveryServiceDto putFeaturesItem(String key, String featuresItem) {
    if (this.features == null) {
      this.features = new HashMap<>();
    }
    this.features.put(key, featuresItem);
    return this;
  }

  /**
   * A map of service-specific features. List of key will be builded per services.
   * @return features
   */
  @javax.annotation.Nullable
  public Map<String, String> getFeatures() {
    return features;
  }

  public void setFeatures(@javax.annotation.Nullable Map<String, String> features) {
    this.features = features;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryServiceDto deliveryServiceDto = (DeliveryServiceDto) o;
    return Objects.equals(this.id, deliveryServiceDto.id) &&
        Objects.equals(this.name, deliveryServiceDto.name) &&
        Objects.equals(this.carrierId, deliveryServiceDto.carrierId) &&
        Objects.equals(this.additionalServices, deliveryServiceDto.additionalServices) &&
        Objects.equals(this.additionalProperties, deliveryServiceDto.additionalProperties) &&
        Objects.equals(this.owner, deliveryServiceDto.owner) &&
        Objects.equals(this.marketplaces, deliveryServiceDto.marketplaces) &&
        Objects.equals(this.packageTypes, deliveryServiceDto.packageTypes) &&
        Objects.equals(this.cashOnDelivery, deliveryServiceDto.cashOnDelivery) &&
        Objects.equals(this.insurance, deliveryServiceDto.insurance) &&
        Objects.equals(this.features, deliveryServiceDto.features);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, carrierId, additionalServices, additionalProperties, owner, marketplaces, packageTypes, cashOnDelivery, insurance, features);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryServiceDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    additionalServices: ").append(toIndentedString(additionalServices)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    marketplaces: ").append(toIndentedString(marketplaces)).append("\n");
    sb.append("    packageTypes: ").append(toIndentedString(packageTypes)).append("\n");
    sb.append("    cashOnDelivery: ").append(toIndentedString(cashOnDelivery)).append("\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("carrierId");
    openapiFields.add("additionalServices");
    openapiFields.add("additionalProperties");
    openapiFields.add("owner");
    openapiFields.add("marketplaces");
    openapiFields.add("packageTypes");
    openapiFields.add("cashOnDelivery");
    openapiFields.add("insurance");
    openapiFields.add("features");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryServiceDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryServiceDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryServiceDto is not found in the empty JSON string", DeliveryServiceDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryServiceDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryServiceDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        DeliveryServiceIdDto.validateJsonElement(jsonObj.get("id"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("carrierId") != null && !jsonObj.get("carrierId").isJsonNull()) && !jsonObj.get("carrierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierId").toString()));
      }
      if (jsonObj.get("additionalServices") != null && !jsonObj.get("additionalServices").isJsonNull()) {
        JsonArray jsonArrayadditionalServices = jsonObj.getAsJsonArray("additionalServices");
        if (jsonArrayadditionalServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalServices` to be an array in the JSON string but got `%s`", jsonObj.get("additionalServices").toString()));
          }

          // validate the optional field `additionalServices` (array)
          for (int i = 0; i < jsonArrayadditionalServices.size(); i++) {
            AdditionalServiceDto.validateJsonElement(jsonArrayadditionalServices.get(i));
          };
        }
      }
      if (jsonObj.get("additionalProperties") != null && !jsonObj.get("additionalProperties").isJsonNull()) {
        JsonArray jsonArrayadditionalProperties = jsonObj.getAsJsonArray("additionalProperties");
        if (jsonArrayadditionalProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalProperties` to be an array in the JSON string but got `%s`", jsonObj.get("additionalProperties").toString()));
          }

          // validate the optional field `additionalProperties` (array)
          for (int i = 0; i < jsonArrayadditionalProperties.size(); i++) {
            AdditionalPropertyDto.validateJsonElement(jsonArrayadditionalProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        OwnerEnum.validateJsonElement(jsonObj.get("owner"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketplaces") != null && !jsonObj.get("marketplaces").isJsonNull() && !jsonObj.get("marketplaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaces` to be an array in the JSON string but got `%s`", jsonObj.get("marketplaces").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packageTypes") != null && !jsonObj.get("packageTypes").isJsonNull() && !jsonObj.get("packageTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageTypes` to be an array in the JSON string but got `%s`", jsonObj.get("packageTypes").toString()));
      }
      // validate the optional field `cashOnDelivery`
      if (jsonObj.get("cashOnDelivery") != null && !jsonObj.get("cashOnDelivery").isJsonNull()) {
        CashOnDeliveryLimitDto.validateJsonElement(jsonObj.get("cashOnDelivery"));
      }
      // validate the optional field `insurance`
      if (jsonObj.get("insurance") != null && !jsonObj.get("insurance").isJsonNull()) {
        LimitWithCurrencyDto.validateJsonElement(jsonObj.get("insurance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryServiceDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryServiceDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryServiceDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryServiceDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryServiceDto>() {
           @Override
           public void write(JsonWriter out, DeliveryServiceDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryServiceDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryServiceDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryServiceDto
   * @throws IOException if the JSON string is invalid with respect to DeliveryServiceDto
   */
  public static DeliveryServiceDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryServiceDto.class);
  }

  /**
   * Convert an instance of DeliveryServiceDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

