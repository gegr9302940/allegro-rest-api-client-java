/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.ApplicationTimePolicy;
import pl.wtx.allegro.api.client.model.MarketplaceReference;
import pl.wtx.allegro.api.client.model.PublicationTimePolicy;
import pl.wtx.allegro.api.client.model.UserCampaignEligibility;
import pl.wtx.allegro.api.client.model.VisibilityTimePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * BadgeCampaign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class BadgeCampaign {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_MARKETPLACE = "marketplace";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE)
  @javax.annotation.Nonnull
  private MarketplaceReference marketplace;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DISCOUNT("DISCOUNT"),
    
    STANDARD("STANDARD"),
    
    SOURCING("SOURCING");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ELIGIBILITY = "eligibility";
  @SerializedName(SERIALIZED_NAME_ELIGIBILITY)
  @javax.annotation.Nonnull
  private UserCampaignEligibility eligibility;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  @javax.annotation.Nonnull
  private ApplicationTimePolicy application;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  @javax.annotation.Nonnull
  private VisibilityTimePolicy visibility;

  public static final String SERIALIZED_NAME_PUBLICATION = "publication";
  @SerializedName(SERIALIZED_NAME_PUBLICATION)
  @javax.annotation.Nonnull
  private PublicationTimePolicy publication;

  public static final String SERIALIZED_NAME_REGULATIONS_LINK = "regulationsLink";
  @SerializedName(SERIALIZED_NAME_REGULATIONS_LINK)
  @javax.annotation.Nonnull
  private String regulationsLink;

  public BadgeCampaign() {
  }

  public BadgeCampaign id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Badge campaign ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public BadgeCampaign name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Badge campaign name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public BadgeCampaign marketplace(@javax.annotation.Nonnull MarketplaceReference marketplace) {
    this.marketplace = marketplace;
    return this;
  }

  /**
   * Get marketplace
   * @return marketplace
   */
  @javax.annotation.Nonnull
  public MarketplaceReference getMarketplace() {
    return marketplace;
  }

  public void setMarketplace(@javax.annotation.Nonnull MarketplaceReference marketplace) {
    this.marketplace = marketplace;
  }


  public BadgeCampaign type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public BadgeCampaign eligibility(@javax.annotation.Nonnull UserCampaignEligibility eligibility) {
    this.eligibility = eligibility;
    return this;
  }

  /**
   * Get eligibility
   * @return eligibility
   */
  @javax.annotation.Nonnull
  public UserCampaignEligibility getEligibility() {
    return eligibility;
  }

  public void setEligibility(@javax.annotation.Nonnull UserCampaignEligibility eligibility) {
    this.eligibility = eligibility;
  }


  public BadgeCampaign application(@javax.annotation.Nonnull ApplicationTimePolicy application) {
    this.application = application;
    return this;
  }

  /**
   * Get application
   * @return application
   */
  @javax.annotation.Nonnull
  public ApplicationTimePolicy getApplication() {
    return application;
  }

  public void setApplication(@javax.annotation.Nonnull ApplicationTimePolicy application) {
    this.application = application;
  }


  public BadgeCampaign visibility(@javax.annotation.Nonnull VisibilityTimePolicy visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nonnull
  public VisibilityTimePolicy getVisibility() {
    return visibility;
  }

  public void setVisibility(@javax.annotation.Nonnull VisibilityTimePolicy visibility) {
    this.visibility = visibility;
  }


  public BadgeCampaign publication(@javax.annotation.Nonnull PublicationTimePolicy publication) {
    this.publication = publication;
    return this;
  }

  /**
   * Get publication
   * @return publication
   */
  @javax.annotation.Nonnull
  public PublicationTimePolicy getPublication() {
    return publication;
  }

  public void setPublication(@javax.annotation.Nonnull PublicationTimePolicy publication) {
    this.publication = publication;
  }


  public BadgeCampaign regulationsLink(@javax.annotation.Nonnull String regulationsLink) {
    this.regulationsLink = regulationsLink;
    return this;
  }

  /**
   * Link to campaign Terms &amp; Conditions
   * @return regulationsLink
   */
  @javax.annotation.Nonnull
  public String getRegulationsLink() {
    return regulationsLink;
  }

  public void setRegulationsLink(@javax.annotation.Nonnull String regulationsLink) {
    this.regulationsLink = regulationsLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BadgeCampaign badgeCampaign = (BadgeCampaign) o;
    return Objects.equals(this.id, badgeCampaign.id) &&
        Objects.equals(this.name, badgeCampaign.name) &&
        Objects.equals(this.marketplace, badgeCampaign.marketplace) &&
        Objects.equals(this.type, badgeCampaign.type) &&
        Objects.equals(this.eligibility, badgeCampaign.eligibility) &&
        Objects.equals(this.application, badgeCampaign.application) &&
        Objects.equals(this.visibility, badgeCampaign.visibility) &&
        Objects.equals(this.publication, badgeCampaign.publication) &&
        Objects.equals(this.regulationsLink, badgeCampaign.regulationsLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, marketplace, type, eligibility, application, visibility, publication, regulationsLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BadgeCampaign {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    marketplace: ").append(toIndentedString(marketplace)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
    sb.append("    regulationsLink: ").append(toIndentedString(regulationsLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("marketplace");
    openapiFields.add("type");
    openapiFields.add("eligibility");
    openapiFields.add("application");
    openapiFields.add("visibility");
    openapiFields.add("publication");
    openapiFields.add("regulationsLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("marketplace");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("eligibility");
    openapiRequiredFields.add("application");
    openapiRequiredFields.add("visibility");
    openapiRequiredFields.add("publication");
    openapiRequiredFields.add("regulationsLink");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BadgeCampaign
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BadgeCampaign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BadgeCampaign is not found in the empty JSON string", BadgeCampaign.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BadgeCampaign.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BadgeCampaign` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BadgeCampaign.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `marketplace`
      MarketplaceReference.validateJsonElement(jsonObj.get("marketplace"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the required field `eligibility`
      UserCampaignEligibility.validateJsonElement(jsonObj.get("eligibility"));
      // validate the required field `application`
      ApplicationTimePolicy.validateJsonElement(jsonObj.get("application"));
      // validate the required field `visibility`
      VisibilityTimePolicy.validateJsonElement(jsonObj.get("visibility"));
      // validate the required field `publication`
      PublicationTimePolicy.validateJsonElement(jsonObj.get("publication"));
      if (!jsonObj.get("regulationsLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regulationsLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regulationsLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BadgeCampaign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BadgeCampaign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BadgeCampaign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BadgeCampaign.class));

       return (TypeAdapter<T>) new TypeAdapter<BadgeCampaign>() {
           @Override
           public void write(JsonWriter out, BadgeCampaign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BadgeCampaign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BadgeCampaign given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BadgeCampaign
   * @throws IOException if the JSON string is invalid with respect to BadgeCampaign
   */
  public static BadgeCampaign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BadgeCampaign.class);
  }

  /**
   * Convert an instance of BadgeCampaign to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

