/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.CategoriesDto;
import pl.wtx.allegro.api.client.model.CategoryDto;
import pl.wtx.allegro.api.client.model.CategoryEventsResponse;
import pl.wtx.allegro.api.client.model.CategoryParameterList;
import pl.wtx.allegro.api.client.model.CategoryParametersScheduledChangesResponse;
import pl.wtx.allegro.api.client.model.CategorySuggestionResponse;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesAndParametersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesAndParametersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesAndParametersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categorySuggestionUsingGET
     * @param name Product name for which you want to get suggested categories. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category suggestion returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categorySuggestionUsingGETCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/matching-categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categorySuggestionUsingGETValidateBeforeCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling categorySuggestionUsingGET(Async)");
        }

        return categorySuggestionUsingGETCall(name, _callback);

    }

    /**
     * Get categories suggestions
     * Use this resource to receive suggested categories for given phrase. Read more: &lt;a href&#x3D;\&quot;../../news/udostepnilismy-nowy-zasob-dzieki-ktoremu-sprawdzisz-sugerowane-kategorie-dla-podanej-frazy-4RAl9jwX1FW\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/we-have-introduced-a-new-resource-that-allows-you-to-retrieve-the-suggested-categories-for-the-given-phrase-v8Wdy1EOyF0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param name Product name for which you want to get suggested categories. (required)
     * @return CategorySuggestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category suggestion returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public CategorySuggestionResponse categorySuggestionUsingGET(@javax.annotation.Nonnull String name) throws ApiException {
        ApiResponse<CategorySuggestionResponse> localVarResp = categorySuggestionUsingGETWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get categories suggestions
     * Use this resource to receive suggested categories for given phrase. Read more: &lt;a href&#x3D;\&quot;../../news/udostepnilismy-nowy-zasob-dzieki-ktoremu-sprawdzisz-sugerowane-kategorie-dla-podanej-frazy-4RAl9jwX1FW\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/we-have-introduced-a-new-resource-that-allows-you-to-retrieve-the-suggested-categories-for-the-given-phrase-v8Wdy1EOyF0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param name Product name for which you want to get suggested categories. (required)
     * @return ApiResponse&lt;CategorySuggestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category suggestion returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategorySuggestionResponse> categorySuggestionUsingGETWithHttpInfo(@javax.annotation.Nonnull String name) throws ApiException {
        okhttp3.Call localVarCall = categorySuggestionUsingGETValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<CategorySuggestionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get categories suggestions (asynchronously)
     * Use this resource to receive suggested categories for given phrase. Read more: &lt;a href&#x3D;\&quot;../../news/udostepnilismy-nowy-zasob-dzieki-ktoremu-sprawdzisz-sugerowane-kategorie-dla-podanej-frazy-4RAl9jwX1FW\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/we-have-introduced-a-new-resource-that-allows-you-to-retrieve-the-suggested-categories-for-the-given-phrase-v8Wdy1EOyF0\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param name Product name for which you want to get suggested categories. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category suggestion returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categorySuggestionUsingGETAsync(@javax.annotation.Nonnull String name, final ApiCallback<CategorySuggestionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = categorySuggestionUsingGETValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<CategorySuggestionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoriesUsingGET
     * @param parentId The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned. (optional, default to 954b95b6-43cf-4104-8354-dea4d9b10ddf)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of categories returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesUsingGETCall(@javax.annotation.Nullable String parentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent.id", parentId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesUsingGETValidateBeforeCall(@javax.annotation.Nullable String parentId, final ApiCallback _callback) throws ApiException {
        return getCategoriesUsingGETCall(parentId, _callback);

    }

    /**
     * Get IDs of Allegro categories
     * Use this resource to traverse the Allegro categories tree. It returns the list of the given category&#39;s children or a list of the main Allegro categories. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#uzupelnij-kategorie-i-parametry\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#provide-category-and-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param parentId The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned. (optional, default to 954b95b6-43cf-4104-8354-dea4d9b10ddf)
     * @return CategoriesDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of categories returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public CategoriesDto getCategoriesUsingGET(@javax.annotation.Nullable String parentId) throws ApiException {
        ApiResponse<CategoriesDto> localVarResp = getCategoriesUsingGETWithHttpInfo(parentId);
        return localVarResp.getData();
    }

    /**
     * Get IDs of Allegro categories
     * Use this resource to traverse the Allegro categories tree. It returns the list of the given category&#39;s children or a list of the main Allegro categories. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#uzupelnij-kategorie-i-parametry\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#provide-category-and-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param parentId The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned. (optional, default to 954b95b6-43cf-4104-8354-dea4d9b10ddf)
     * @return ApiResponse&lt;CategoriesDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of categories returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoriesDto> getCategoriesUsingGETWithHttpInfo(@javax.annotation.Nullable String parentId) throws ApiException {
        okhttp3.Call localVarCall = getCategoriesUsingGETValidateBeforeCall(parentId, null);
        Type localVarReturnType = new TypeToken<CategoriesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IDs of Allegro categories (asynchronously)
     * Use this resource to traverse the Allegro categories tree. It returns the list of the given category&#39;s children or a list of the main Allegro categories. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#uzupelnij-kategorie-i-parametry\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#provide-category-and-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param parentId The ID of the category which children should be returned. If omitted, the list of main Allegro categories will be returned. (optional, default to 954b95b6-43cf-4104-8354-dea4d9b10ddf)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of categories returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesUsingGETAsync(@javax.annotation.Nullable String parentId, final ApiCallback<CategoriesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesUsingGETValidateBeforeCall(parentId, _callback);
        Type localVarReturnType = new TypeToken<CategoriesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryEventsUsingGET1
     * @param from The ID of the last seen event. Changes that occurred after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of category changes returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryEventsUsingGET1Call(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/category-events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryEventsUsingGET1ValidateBeforeCall(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type, final ApiCallback _callback) throws ApiException {
        return getCategoryEventsUsingGET1Call(from, limit, type, _callback);

    }

    /**
     * Get changes in categories
     * Use this resource to get information about changes in categories. It returns changes that occurred in the last 3 months. At present we support the following changes:   - CATEGORY_CREATED - new category was created.   - CATEGORY_RENAMED - category name has been changed.   - CATEGORY_MOVED - category has been moved to a different place in category tree, category parent id field is changed.   - CATEGORY_DELETED - category is no longer available, category from redirectCategory field should be used instead.    Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zmian-w-kategoriach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-in-categories\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from The ID of the last seen event. Changes that occurred after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @return CategoryEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of category changes returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CategoryEventsResponse getCategoryEventsUsingGET1(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type) throws ApiException {
        ApiResponse<CategoryEventsResponse> localVarResp = getCategoryEventsUsingGET1WithHttpInfo(from, limit, type);
        return localVarResp.getData();
    }

    /**
     * Get changes in categories
     * Use this resource to get information about changes in categories. It returns changes that occurred in the last 3 months. At present we support the following changes:   - CATEGORY_CREATED - new category was created.   - CATEGORY_RENAMED - category name has been changed.   - CATEGORY_MOVED - category has been moved to a different place in category tree, category parent id field is changed.   - CATEGORY_DELETED - category is no longer available, category from redirectCategory field should be used instead.    Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zmian-w-kategoriach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-in-categories\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from The ID of the last seen event. Changes that occurred after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @return ApiResponse&lt;CategoryEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of category changes returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryEventsResponse> getCategoryEventsUsingGET1WithHttpInfo(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type) throws ApiException {
        okhttp3.Call localVarCall = getCategoryEventsUsingGET1ValidateBeforeCall(from, limit, type, null);
        Type localVarReturnType = new TypeToken<CategoryEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get changes in categories (asynchronously)
     * Use this resource to get information about changes in categories. It returns changes that occurred in the last 3 months. At present we support the following changes:   - CATEGORY_CREATED - new category was created.   - CATEGORY_RENAMED - category name has been changed.   - CATEGORY_MOVED - category has been moved to a different place in category tree, category parent id field is changed.   - CATEGORY_DELETED - category is no longer available, category from redirectCategory field should be used instead.    Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zmian-w-kategoriach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-in-categories\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from The ID of the last seen event. Changes that occurred after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of category changes returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryEventsUsingGET1Async(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type, final ApiCallback<CategoryEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryEventsUsingGET1ValidateBeforeCall(from, limit, type, _callback);
        Type localVarReturnType = new TypeToken<CategoryEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryParametersScheduledChangesUsingGET1
     * @param scheduledForGte The minimum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledForLte The maximum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledAtGte The minimum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param scheduledAtLte The maximum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param type The types of changes that will be returned in the response. All types of changes are returned by default. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category parameters changes returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryParametersScheduledChangesUsingGET1Call(@javax.annotation.Nullable OffsetDateTime scheduledForGte, @javax.annotation.Nullable OffsetDateTime scheduledForLte, @javax.annotation.Nullable OffsetDateTime scheduledAtGte, @javax.annotation.Nullable OffsetDateTime scheduledAtLte, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/category-parameters-scheduled-changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scheduledForGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduledFor.gte", scheduledForGte));
        }

        if (scheduledForLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduledFor.lte", scheduledForLte));
        }

        if (scheduledAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduledAt.gte", scheduledAtGte));
        }

        if (scheduledAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduledAt.lte", scheduledAtLte));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryParametersScheduledChangesUsingGET1ValidateBeforeCall(@javax.annotation.Nullable OffsetDateTime scheduledForGte, @javax.annotation.Nullable OffsetDateTime scheduledForLte, @javax.annotation.Nullable OffsetDateTime scheduledAtGte, @javax.annotation.Nullable OffsetDateTime scheduledAtLte, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getCategoryParametersScheduledChangesUsingGET1Call(scheduledForGte, scheduledForLte, scheduledAtGte, scheduledAtLte, type, offset, limit, _callback);

    }

    /**
     * Get planned changes in category parameters
     * Use this resource to get information about planned changes in category parameters. Please note that in some cases, the returned events may finally not happen in the future. At present we support the following changes: - REQUIREMENT_CHANGE - the parameter will be required in the category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-przyszle-zmiany-w-parametrach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-future-changes-in-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param scheduledForGte The minimum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledForLte The maximum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledAtGte The minimum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param scheduledAtLte The maximum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param type The types of changes that will be returned in the response. All types of changes are returned by default. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @return CategoryParametersScheduledChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category parameters changes returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CategoryParametersScheduledChangesResponse getCategoryParametersScheduledChangesUsingGET1(@javax.annotation.Nullable OffsetDateTime scheduledForGte, @javax.annotation.Nullable OffsetDateTime scheduledForLte, @javax.annotation.Nullable OffsetDateTime scheduledAtGte, @javax.annotation.Nullable OffsetDateTime scheduledAtLte, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<CategoryParametersScheduledChangesResponse> localVarResp = getCategoryParametersScheduledChangesUsingGET1WithHttpInfo(scheduledForGte, scheduledForLte, scheduledAtGte, scheduledAtLte, type, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get planned changes in category parameters
     * Use this resource to get information about planned changes in category parameters. Please note that in some cases, the returned events may finally not happen in the future. At present we support the following changes: - REQUIREMENT_CHANGE - the parameter will be required in the category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-przyszle-zmiany-w-parametrach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-future-changes-in-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param scheduledForGte The minimum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledForLte The maximum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledAtGte The minimum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param scheduledAtLte The maximum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param type The types of changes that will be returned in the response. All types of changes are returned by default. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @return ApiResponse&lt;CategoryParametersScheduledChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category parameters changes returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryParametersScheduledChangesResponse> getCategoryParametersScheduledChangesUsingGET1WithHttpInfo(@javax.annotation.Nullable OffsetDateTime scheduledForGte, @javax.annotation.Nullable OffsetDateTime scheduledForLte, @javax.annotation.Nullable OffsetDateTime scheduledAtGte, @javax.annotation.Nullable OffsetDateTime scheduledAtLte, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getCategoryParametersScheduledChangesUsingGET1ValidateBeforeCall(scheduledForGte, scheduledForLte, scheduledAtGte, scheduledAtLte, type, offset, limit, null);
        Type localVarReturnType = new TypeToken<CategoryParametersScheduledChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get planned changes in category parameters (asynchronously)
     * Use this resource to get information about planned changes in category parameters. Please note that in some cases, the returned events may finally not happen in the future. At present we support the following changes: - REQUIREMENT_CHANGE - the parameter will be required in the category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-sprawdzic-przyszle-zmiany-w-parametrach\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#how-to-check-future-changes-in-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param scheduledForGte The minimum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledForLte The maximum date and time from which the change will be effective from in ISO 8601 format. Should be greater than the current date time and less than 3 months from the current date. (optional)
     * @param scheduledAtGte The minimum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param scheduledAtLte The maximum date and time at which the change was scheduled in ISO 8601 format. (optional)
     * @param type The types of changes that will be returned in the response. All types of changes are returned by default. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category parameters changes returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryParametersScheduledChangesUsingGET1Async(@javax.annotation.Nullable OffsetDateTime scheduledForGte, @javax.annotation.Nullable OffsetDateTime scheduledForLte, @javax.annotation.Nullable OffsetDateTime scheduledAtGte, @javax.annotation.Nullable OffsetDateTime scheduledAtLte, @javax.annotation.Nullable List<String> type, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<CategoryParametersScheduledChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryParametersScheduledChangesUsingGET1ValidateBeforeCall(scheduledForGte, scheduledForLte, scheduledAtGte, scheduledAtLte, type, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<CategoryParametersScheduledChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryUsingGET1
     * @param categoryId The category ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of a category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryUsingGET1Call(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryUsingGET1ValidateBeforeCall(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryUsingGET1(Async)");
        }

        return getCategoryUsingGET1Call(categoryId, _callback);

    }

    /**
     * Get a category by ID
     * Use this resource to get the details of a specific category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return CategoryDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of a category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryDto getCategoryUsingGET1(@javax.annotation.Nonnull String categoryId) throws ApiException {
        ApiResponse<CategoryDto> localVarResp = getCategoryUsingGET1WithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * Get a category by ID
     * Use this resource to get the details of a specific category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return ApiResponse&lt;CategoryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of a category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryDto> getCategoryUsingGET1WithHttpInfo(@javax.annotation.Nonnull String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryUsingGET1ValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a category by ID (asynchronously)
     * Use this resource to get the details of a specific category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#jak-utworzyc-nowy-produkt\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#how-to-create-a-product\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of a category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryUsingGET1Async(@javax.annotation.Nonnull String categoryId, final ApiCallback<CategoryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryUsingGET1ValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlatParametersUsingGET2
     * @param categoryId The category ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlatParametersUsingGET2Call(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/categories/{categoryId}/parameters"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user", "bearer-token-for-application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlatParametersUsingGET2ValidateBeforeCall(@javax.annotation.Nonnull String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getFlatParametersUsingGET2(Async)");
        }

        return getFlatParametersUsingGET2Call(categoryId, _callback);

    }

    /**
     * Get parameters supported by a category
     * Use this resource to get the list of parameters that are supported by the given category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#parametry-ofertowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return CategoryParameterList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryParameterList getFlatParametersUsingGET2(@javax.annotation.Nonnull String categoryId) throws ApiException {
        ApiResponse<CategoryParameterList> localVarResp = getFlatParametersUsingGET2WithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * Get parameters supported by a category
     * Use this resource to get the list of parameters that are supported by the given category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#parametry-ofertowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @return ApiResponse&lt;CategoryParameterList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryParameterList> getFlatParametersUsingGET2WithHttpInfo(@javax.annotation.Nonnull String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getFlatParametersUsingGET2ValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryParameterList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get parameters supported by a category (asynchronously)
     * Use this resource to get the list of parameters that are supported by the given category. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#parametry-ofertowe\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param categoryId The category ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of parameters for the category returned successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The category with the given ID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlatParametersUsingGET2Async(@javax.annotation.Nonnull String categoryId, final ApiCallback<CategoryParameterList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlatParametersUsingGET2ValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryParameterList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
