/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.SmartDeliveryMethod;
import pl.wtx.allegro.api.client.model.SmartOfferClassificationReportClassification;
import pl.wtx.allegro.api.client.model.SmartOfferClassificationReportConditionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * SmartOfferClassificationReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class SmartOfferClassificationReport {
  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  @javax.annotation.Nullable
  private SmartOfferClassificationReportClassification classification;

  public static final String SERIALIZED_NAME_SCHEDULED_FOR_RECLASSIFICATION = "scheduledForReclassification";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_FOR_RECLASSIFICATION)
  @javax.annotation.Nullable
  private Boolean scheduledForReclassification;

  public static final String SERIALIZED_NAME_SMART_DELIVERY_METHODS = "smartDeliveryMethods";
  @SerializedName(SERIALIZED_NAME_SMART_DELIVERY_METHODS)
  @javax.annotation.Nullable
  private List<SmartDeliveryMethod> smartDeliveryMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  @javax.annotation.Nullable
  private List<SmartOfferClassificationReportConditionsInner> conditions = new ArrayList<>();

  public SmartOfferClassificationReport() {
  }

  public SmartOfferClassificationReport classification(@javax.annotation.Nullable SmartOfferClassificationReportClassification classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nullable
  public SmartOfferClassificationReportClassification getClassification() {
    return classification;
  }

  public void setClassification(@javax.annotation.Nullable SmartOfferClassificationReportClassification classification) {
    this.classification = classification;
  }


  public SmartOfferClassificationReport scheduledForReclassification(@javax.annotation.Nullable Boolean scheduledForReclassification) {
    this.scheduledForReclassification = scheduledForReclassification;
    return this;
  }

  /**
   * Indicates whether that particular offer is set to be reclassified in the next 24 hours
   * @return scheduledForReclassification
   */
  @javax.annotation.Nullable
  public Boolean getScheduledForReclassification() {
    return scheduledForReclassification;
  }

  public void setScheduledForReclassification(@javax.annotation.Nullable Boolean scheduledForReclassification) {
    this.scheduledForReclassification = scheduledForReclassification;
  }


  public SmartOfferClassificationReport smartDeliveryMethods(@javax.annotation.Nullable List<SmartDeliveryMethod> smartDeliveryMethods) {
    this.smartDeliveryMethods = smartDeliveryMethods;
    return this;
  }

  public SmartOfferClassificationReport addSmartDeliveryMethodsItem(SmartDeliveryMethod smartDeliveryMethodsItem) {
    if (this.smartDeliveryMethods == null) {
      this.smartDeliveryMethods = new ArrayList<>();
    }
    this.smartDeliveryMethods.add(smartDeliveryMethodsItem);
    return this;
  }

  /**
   * Delivery methods marked with Smart! label
   * @return smartDeliveryMethods
   */
  @javax.annotation.Nullable
  public List<SmartDeliveryMethod> getSmartDeliveryMethods() {
    return smartDeliveryMethods;
  }

  public void setSmartDeliveryMethods(@javax.annotation.Nullable List<SmartDeliveryMethod> smartDeliveryMethods) {
    this.smartDeliveryMethods = smartDeliveryMethods;
  }


  public SmartOfferClassificationReport conditions(@javax.annotation.Nullable List<SmartOfferClassificationReportConditionsInner> conditions) {
    this.conditions = conditions;
    return this;
  }

  public SmartOfferClassificationReport addConditionsItem(SmartOfferClassificationReportConditionsInner conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Set of conditions to be met in order for that particular offer to be Smart!. Each condition filters out improperly configured delivery methods or checks some offer attributes. Order of conditions matters. Please keep in mind that this is a **PREVIEW** of an offer classification if being conducted right now - actual classification is triggered only by attribute changes and as of now it cannot be manually done on demand.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<SmartOfferClassificationReportConditionsInner> getConditions() {
    return conditions;
  }

  public void setConditions(@javax.annotation.Nullable List<SmartOfferClassificationReportConditionsInner> conditions) {
    this.conditions = conditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmartOfferClassificationReport smartOfferClassificationReport = (SmartOfferClassificationReport) o;
    return Objects.equals(this.classification, smartOfferClassificationReport.classification) &&
        Objects.equals(this.scheduledForReclassification, smartOfferClassificationReport.scheduledForReclassification) &&
        Objects.equals(this.smartDeliveryMethods, smartOfferClassificationReport.smartDeliveryMethods) &&
        Objects.equals(this.conditions, smartOfferClassificationReport.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classification, scheduledForReclassification, smartDeliveryMethods, conditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmartOfferClassificationReport {\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    scheduledForReclassification: ").append(toIndentedString(scheduledForReclassification)).append("\n");
    sb.append("    smartDeliveryMethods: ").append(toIndentedString(smartDeliveryMethods)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classification");
    openapiFields.add("scheduledForReclassification");
    openapiFields.add("smartDeliveryMethods");
    openapiFields.add("conditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmartOfferClassificationReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmartOfferClassificationReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmartOfferClassificationReport is not found in the empty JSON string", SmartOfferClassificationReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmartOfferClassificationReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmartOfferClassificationReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        SmartOfferClassificationReportClassification.validateJsonElement(jsonObj.get("classification"));
      }
      if (jsonObj.get("smartDeliveryMethods") != null && !jsonObj.get("smartDeliveryMethods").isJsonNull()) {
        JsonArray jsonArraysmartDeliveryMethods = jsonObj.getAsJsonArray("smartDeliveryMethods");
        if (jsonArraysmartDeliveryMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("smartDeliveryMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `smartDeliveryMethods` to be an array in the JSON string but got `%s`", jsonObj.get("smartDeliveryMethods").toString()));
          }

          // validate the optional field `smartDeliveryMethods` (array)
          for (int i = 0; i < jsonArraysmartDeliveryMethods.size(); i++) {
            SmartDeliveryMethod.validateJsonElement(jsonArraysmartDeliveryMethods.get(i));
          };
        }
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            SmartOfferClassificationReportConditionsInner.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmartOfferClassificationReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmartOfferClassificationReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmartOfferClassificationReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmartOfferClassificationReport.class));

       return (TypeAdapter<T>) new TypeAdapter<SmartOfferClassificationReport>() {
           @Override
           public void write(JsonWriter out, SmartOfferClassificationReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmartOfferClassificationReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmartOfferClassificationReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmartOfferClassificationReport
   * @throws IOException if the JSON string is invalid with respect to SmartOfferClassificationReport
   */
  public static SmartOfferClassificationReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmartOfferClassificationReport.class);
  }

  /**
   * Convert an instance of SmartOfferClassificationReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

