/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.DisputeCheckoutForm;
import pl.wtx.allegro.api.client.model.DisputeClaim;
import pl.wtx.allegro.api.client.model.DisputeFirstMessage;
import pl.wtx.allegro.api.client.model.DisputeUser;
import pl.wtx.allegro.api.client.model.Subject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Dispute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Dispute {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nonnull
  private Subject subject;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CLOSED("CLOSED"),
    
    ONGOING("ONGOING"),
    
    UNRESOLVED("UNRESOLVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  /**
   * Gets or Sets messagesStatus
   */
  @JsonAdapter(MessagesStatusEnum.Adapter.class)
  public enum MessagesStatusEnum {
    NEW("NEW"),
    
    SELLER_REPLIED("SELLER_REPLIED"),
    
    BUYER_REPLIED("BUYER_REPLIED"),
    
    ALLEGRO_ADVISOR_REPLIED("ALLEGRO_ADVISOR_REPLIED");

    private String value;

    MessagesStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessagesStatusEnum fromValue(String value) {
      for (MessagesStatusEnum b : MessagesStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessagesStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessagesStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessagesStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessagesStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessagesStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGES_STATUS = "messagesStatus";
  @SerializedName(SERIALIZED_NAME_MESSAGES_STATUS)
  @javax.annotation.Nonnull
  private MessagesStatusEnum messagesStatus;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  @javax.annotation.Nonnull
  private DisputeUser buyer;

  public static final String SERIALIZED_NAME_CHECKOUT_FORM = "checkoutForm";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_FORM)
  @javax.annotation.Nonnull
  private DisputeCheckoutForm checkoutForm;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nonnull
  private DisputeFirstMessage message;

  public static final String SERIALIZED_NAME_MESSAGES_COUNT = "messagesCount";
  @SerializedName(SERIALIZED_NAME_MESSAGES_COUNT)
  @javax.annotation.Nonnull
  private Integer messagesCount;

  public static final String SERIALIZED_NAME_OPENED_DATE = "openedDate";
  @SerializedName(SERIALIZED_NAME_OPENED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime openedDate;

  public static final String SERIALIZED_NAME_LAST_MESSAGE_CREATION_DATE = "lastMessageCreationDate";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE_CREATION_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime lastMessageCreationDate;

  public static final String SERIALIZED_NAME_CLAIM = "claim";
  @SerializedName(SERIALIZED_NAME_CLAIM)
  @javax.annotation.Nullable
  private DisputeClaim claim;

  public Dispute() {
  }

  public Dispute id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier of the dispute
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Dispute subject(@javax.annotation.Nonnull Subject subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nonnull
  public Subject getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nonnull Subject subject) {
    this.subject = subject;
  }


  public Dispute status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public Dispute messagesStatus(@javax.annotation.Nonnull MessagesStatusEnum messagesStatus) {
    this.messagesStatus = messagesStatus;
    return this;
  }

  /**
   * Get messagesStatus
   * @return messagesStatus
   */
  @javax.annotation.Nonnull
  public MessagesStatusEnum getMessagesStatus() {
    return messagesStatus;
  }

  public void setMessagesStatus(@javax.annotation.Nonnull MessagesStatusEnum messagesStatus) {
    this.messagesStatus = messagesStatus;
  }


  public Dispute buyer(@javax.annotation.Nonnull DisputeUser buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nonnull
  public DisputeUser getBuyer() {
    return buyer;
  }

  public void setBuyer(@javax.annotation.Nonnull DisputeUser buyer) {
    this.buyer = buyer;
  }


  public Dispute checkoutForm(@javax.annotation.Nonnull DisputeCheckoutForm checkoutForm) {
    this.checkoutForm = checkoutForm;
    return this;
  }

  /**
   * Get checkoutForm
   * @return checkoutForm
   */
  @javax.annotation.Nonnull
  public DisputeCheckoutForm getCheckoutForm() {
    return checkoutForm;
  }

  public void setCheckoutForm(@javax.annotation.Nonnull DisputeCheckoutForm checkoutForm) {
    this.checkoutForm = checkoutForm;
  }


  public Dispute message(@javax.annotation.Nonnull DisputeFirstMessage message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public DisputeFirstMessage getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nonnull DisputeFirstMessage message) {
    this.message = message;
  }


  public Dispute messagesCount(@javax.annotation.Nonnull Integer messagesCount) {
    this.messagesCount = messagesCount;
    return this;
  }

  /**
   * Get messagesCount
   * minimum: 0
   * @return messagesCount
   */
  @javax.annotation.Nonnull
  public Integer getMessagesCount() {
    return messagesCount;
  }

  public void setMessagesCount(@javax.annotation.Nonnull Integer messagesCount) {
    this.messagesCount = messagesCount;
  }


  public Dispute openedDate(@javax.annotation.Nullable OffsetDateTime openedDate) {
    this.openedDate = openedDate;
    return this;
  }

  /**
   * Recent date when the dispute has been opened or reopened
   * @return openedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOpenedDate() {
    return openedDate;
  }

  public void setOpenedDate(@javax.annotation.Nullable OffsetDateTime openedDate) {
    this.openedDate = openedDate;
  }


  public Dispute lastMessageCreationDate(@javax.annotation.Nonnull OffsetDateTime lastMessageCreationDate) {
    this.lastMessageCreationDate = lastMessageCreationDate;
    return this;
  }

  /**
   * Get lastMessageCreationDate
   * @return lastMessageCreationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastMessageCreationDate() {
    return lastMessageCreationDate;
  }

  public void setLastMessageCreationDate(@javax.annotation.Nonnull OffsetDateTime lastMessageCreationDate) {
    this.lastMessageCreationDate = lastMessageCreationDate;
  }


  public Dispute claim(@javax.annotation.Nullable DisputeClaim claim) {
    this.claim = claim;
    return this;
  }

  /**
   * Get claim
   * @return claim
   */
  @javax.annotation.Nullable
  public DisputeClaim getClaim() {
    return claim;
  }

  public void setClaim(@javax.annotation.Nullable DisputeClaim claim) {
    this.claim = claim;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dispute dispute = (Dispute) o;
    return Objects.equals(this.id, dispute.id) &&
        Objects.equals(this.subject, dispute.subject) &&
        Objects.equals(this.status, dispute.status) &&
        Objects.equals(this.messagesStatus, dispute.messagesStatus) &&
        Objects.equals(this.buyer, dispute.buyer) &&
        Objects.equals(this.checkoutForm, dispute.checkoutForm) &&
        Objects.equals(this.message, dispute.message) &&
        Objects.equals(this.messagesCount, dispute.messagesCount) &&
        Objects.equals(this.openedDate, dispute.openedDate) &&
        Objects.equals(this.lastMessageCreationDate, dispute.lastMessageCreationDate) &&
        Objects.equals(this.claim, dispute.claim);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, subject, status, messagesStatus, buyer, checkoutForm, message, messagesCount, openedDate, lastMessageCreationDate, claim);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dispute {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    messagesStatus: ").append(toIndentedString(messagesStatus)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    checkoutForm: ").append(toIndentedString(checkoutForm)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    messagesCount: ").append(toIndentedString(messagesCount)).append("\n");
    sb.append("    openedDate: ").append(toIndentedString(openedDate)).append("\n");
    sb.append("    lastMessageCreationDate: ").append(toIndentedString(lastMessageCreationDate)).append("\n");
    sb.append("    claim: ").append(toIndentedString(claim)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("subject");
    openapiFields.add("status");
    openapiFields.add("messagesStatus");
    openapiFields.add("buyer");
    openapiFields.add("checkoutForm");
    openapiFields.add("message");
    openapiFields.add("messagesCount");
    openapiFields.add("openedDate");
    openapiFields.add("lastMessageCreationDate");
    openapiFields.add("claim");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("messagesStatus");
    openapiRequiredFields.add("buyer");
    openapiRequiredFields.add("checkoutForm");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("messagesCount");
    openapiRequiredFields.add("lastMessageCreationDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dispute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dispute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dispute is not found in the empty JSON string", Dispute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dispute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dispute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dispute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `subject`
      Subject.validateJsonElement(jsonObj.get("subject"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("messagesStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messagesStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messagesStatus").toString()));
      }
      // validate the required field `messagesStatus`
      MessagesStatusEnum.validateJsonElement(jsonObj.get("messagesStatus"));
      // validate the required field `buyer`
      DisputeUser.validateJsonElement(jsonObj.get("buyer"));
      // validate the required field `checkoutForm`
      DisputeCheckoutForm.validateJsonElement(jsonObj.get("checkoutForm"));
      // validate the required field `message`
      DisputeFirstMessage.validateJsonElement(jsonObj.get("message"));
      // validate the optional field `claim`
      if (jsonObj.get("claim") != null && !jsonObj.get("claim").isJsonNull()) {
        DisputeClaim.validateJsonElement(jsonObj.get("claim"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dispute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dispute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dispute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dispute.class));

       return (TypeAdapter<T>) new TypeAdapter<Dispute>() {
           @Override
           public void write(JsonWriter out, Dispute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dispute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dispute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dispute
   * @throws IOException if the JSON string is invalid with respect to Dispute
   */
  public static Dispute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dispute.class);
  }

  /**
   * Convert an instance of Dispute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

