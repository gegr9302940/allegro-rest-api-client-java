/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import java.math.BigDecimal;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.GetOfferSmartClassificationGET400Response;
import pl.wtx.allegro.api.client.model.GetOfferSmartClassificationGET403Response;
import pl.wtx.allegro.api.client.model.OffersSearchResultDto;
import pl.wtx.allegro.api.client.model.SalePartialProductOfferResponse;
import pl.wtx.allegro.api.client.model.SaleProductOfferResponseV1;
import pl.wtx.allegro.api.client.model.SellerOfferEventsResponse;
import pl.wtx.allegro.api.client.model.SmartOfferClassificationReport;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersOfferInformationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersOfferInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersOfferInformationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOfferEvents
     * @param from The ID of the last seen event. Events that occured after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offer events returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferEventsCall(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferEventsValidateBeforeCall(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type, final ApiCallback _callback) throws ApiException {
        return getOfferEventsCall(from, limit, type, _callback);

    }

    /**
     * Get events about the seller&#39;s offers
     * Use this endpoint to get events from the last 24 hours concerning changes in the authorized seller&#39;s offers. At present we support the following events:   - OFFER_ACTIVATED - offer is visible on site and available for purchase, occurs when offer status changes from ACTIVATING to ACTIVE.   - OFFER_CHANGED - occurs when offer&#39;s fields has been changed e.g. description or photos.   - OFFER_ENDED - offer is no longer available for purchase, occurs when offer status changes from ACTIVE to ENDED.   - OFFER_STOCK_CHANGED - stock in an offer was changed either via purchase or by seller.   - OFFER_PRICE_CHANGED - occurs when price in an offer was changed.   - OFFER_ARCHIVED - offer is no longer available on listing and has been archived.   - OFFER_BID_PLACED - bid was placed on the offer.   - OFFER_BID_CANCELED - bid for offer was canceled.   - OFFER_TRANSLATION_UPDATED - translation of offer was updated.   - OFFER_VISIBILITY_CHANGED - visibility of offer was changed on marketplaces.  Returned events may occur by actions made via browser or API. The resource allows you to get events concerning active offers and offers scheduled for activation (status ACTIVE and ACTIVATING). Returned events do not concern offers in INACTIVE and ENDED status (the exception is OFFER_ARCHIVED event). External id is returned for all event types except OFFER_BID_PLACED and OFFER_BID_CANCELED. Please note that one change may result in more than one event. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zdarzen-w-ofertach-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-concerning-changes-in-seller-s-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from The ID of the last seen event. Events that occured after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @return SellerOfferEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offer events returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public SellerOfferEventsResponse getOfferEvents(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type) throws ApiException {
        ApiResponse<SellerOfferEventsResponse> localVarResp = getOfferEventsWithHttpInfo(from, limit, type);
        return localVarResp.getData();
    }

    /**
     * Get events about the seller&#39;s offers
     * Use this endpoint to get events from the last 24 hours concerning changes in the authorized seller&#39;s offers. At present we support the following events:   - OFFER_ACTIVATED - offer is visible on site and available for purchase, occurs when offer status changes from ACTIVATING to ACTIVE.   - OFFER_CHANGED - occurs when offer&#39;s fields has been changed e.g. description or photos.   - OFFER_ENDED - offer is no longer available for purchase, occurs when offer status changes from ACTIVE to ENDED.   - OFFER_STOCK_CHANGED - stock in an offer was changed either via purchase or by seller.   - OFFER_PRICE_CHANGED - occurs when price in an offer was changed.   - OFFER_ARCHIVED - offer is no longer available on listing and has been archived.   - OFFER_BID_PLACED - bid was placed on the offer.   - OFFER_BID_CANCELED - bid for offer was canceled.   - OFFER_TRANSLATION_UPDATED - translation of offer was updated.   - OFFER_VISIBILITY_CHANGED - visibility of offer was changed on marketplaces.  Returned events may occur by actions made via browser or API. The resource allows you to get events concerning active offers and offers scheduled for activation (status ACTIVE and ACTIVATING). Returned events do not concern offers in INACTIVE and ENDED status (the exception is OFFER_ARCHIVED event). External id is returned for all event types except OFFER_BID_PLACED and OFFER_BID_CANCELED. Please note that one change may result in more than one event. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zdarzen-w-ofertach-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-concerning-changes-in-seller-s-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from The ID of the last seen event. Events that occured after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @return ApiResponse&lt;SellerOfferEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offer events returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerOfferEventsResponse> getOfferEventsWithHttpInfo(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type) throws ApiException {
        okhttp3.Call localVarCall = getOfferEventsValidateBeforeCall(from, limit, type, null);
        Type localVarReturnType = new TypeToken<SellerOfferEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get events about the seller&#39;s offers (asynchronously)
     * Use this endpoint to get events from the last 24 hours concerning changes in the authorized seller&#39;s offers. At present we support the following events:   - OFFER_ACTIVATED - offer is visible on site and available for purchase, occurs when offer status changes from ACTIVATING to ACTIVE.   - OFFER_CHANGED - occurs when offer&#39;s fields has been changed e.g. description or photos.   - OFFER_ENDED - offer is no longer available for purchase, occurs when offer status changes from ACTIVE to ENDED.   - OFFER_STOCK_CHANGED - stock in an offer was changed either via purchase or by seller.   - OFFER_PRICE_CHANGED - occurs when price in an offer was changed.   - OFFER_ARCHIVED - offer is no longer available on listing and has been archived.   - OFFER_BID_PLACED - bid was placed on the offer.   - OFFER_BID_CANCELED - bid for offer was canceled.   - OFFER_TRANSLATION_UPDATED - translation of offer was updated.   - OFFER_VISIBILITY_CHANGED - visibility of offer was changed on marketplaces.  Returned events may occur by actions made via browser or API. The resource allows you to get events concerning active offers and offers scheduled for activation (status ACTIVE and ACTIVATING). Returned events do not concern offers in INACTIVE and ENDED status (the exception is OFFER_ARCHIVED event). External id is returned for all event types except OFFER_BID_PLACED and OFFER_BID_CANCELED. Please note that one change may result in more than one event. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#dziennik-zdarzen-w-ofertach-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#event-journal-concerning-changes-in-seller-s-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param from The ID of the last seen event. Events that occured after the given event will be returned. (optional)
     * @param limit The number of events that will be returned in the response. (optional, default to 100)
     * @param type The types of events that will be returned in the response. All types of events are returned by default. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offer events returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters supplied in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferEventsAsync(@javax.annotation.Nullable String from, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable List<String> type, final ApiCallback<SellerOfferEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfferEventsValidateBeforeCall(from, limit, type, _callback);
        Type localVarReturnType = new TypeToken<SellerOfferEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOfferSmartClassificationGET
     * @param offerId Offer identifier. (required)
     * @param marketplaceId Marketplace for which offer classification report will be returned. If not specified, the result of the offer&#39;s base marketplace will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned offer Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity - The offer is being created in our system and we are not able to process it yet. Try again later. - Provided marketplaceId is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferSmartClassificationGETCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nullable String marketplaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/{offerId}/smart"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceId", marketplaceId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferSmartClassificationGETValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nullable String marketplaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getOfferSmartClassificationGET(Async)");
        }

        return getOfferSmartClassificationGETCall(offerId, marketplaceId, _callback);

    }

    /**
     * Get Smart! classification report of the particular offer
     * Use this resource to get a full Smart! offer classification report of one of your offers. Please keep in mind you have to meet Smart! seller conditions first - for more details, use *GET /sale/smart*. To learn more about Smart! offer requirements, see our knowledge base article: [PL](https://allegro.pl/pomoc/dla-sprzedajacych/informacje-dla-sprzedajacych/co-zrobic-aby-moje-oferty-byly-oznaczone-ikona-allegro-smart-lDkP8VbKncV) / [EN](https://allegro.pl/help/for-sellers/allegro-smart-for-sellers/how-can-i-make-my-offers-be-marked-with-the-allegro-smart-badge-rKD1RV30jFM). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#kwalifikacja-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#offer-qualification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param marketplaceId Marketplace for which offer classification report will be returned. If not specified, the result of the offer&#39;s base marketplace will be returned. (optional)
     * @return SmartOfferClassificationReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned offer Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity - The offer is being created in our system and we are not able to process it yet. Try again later. - Provided marketplaceId is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public SmartOfferClassificationReport getOfferSmartClassificationGET(@javax.annotation.Nonnull String offerId, @javax.annotation.Nullable String marketplaceId) throws ApiException {
        ApiResponse<SmartOfferClassificationReport> localVarResp = getOfferSmartClassificationGETWithHttpInfo(offerId, marketplaceId);
        return localVarResp.getData();
    }

    /**
     * Get Smart! classification report of the particular offer
     * Use this resource to get a full Smart! offer classification report of one of your offers. Please keep in mind you have to meet Smart! seller conditions first - for more details, use *GET /sale/smart*. To learn more about Smart! offer requirements, see our knowledge base article: [PL](https://allegro.pl/pomoc/dla-sprzedajacych/informacje-dla-sprzedajacych/co-zrobic-aby-moje-oferty-byly-oznaczone-ikona-allegro-smart-lDkP8VbKncV) / [EN](https://allegro.pl/help/for-sellers/allegro-smart-for-sellers/how-can-i-make-my-offers-be-marked-with-the-allegro-smart-badge-rKD1RV30jFM). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#kwalifikacja-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#offer-qualification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param marketplaceId Marketplace for which offer classification report will be returned. If not specified, the result of the offer&#39;s base marketplace will be returned. (optional)
     * @return ApiResponse&lt;SmartOfferClassificationReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned offer Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity - The offer is being created in our system and we are not able to process it yet. Try again later. - Provided marketplaceId is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartOfferClassificationReport> getOfferSmartClassificationGETWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nullable String marketplaceId) throws ApiException {
        okhttp3.Call localVarCall = getOfferSmartClassificationGETValidateBeforeCall(offerId, marketplaceId, null);
        Type localVarReturnType = new TypeToken<SmartOfferClassificationReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Smart! classification report of the particular offer (asynchronously)
     * Use this resource to get a full Smart! offer classification report of one of your offers. Please keep in mind you have to meet Smart! seller conditions first - for more details, use *GET /sale/smart*. To learn more about Smart! offer requirements, see our knowledge base article: [PL](https://allegro.pl/pomoc/dla-sprzedajacych/informacje-dla-sprzedajacych/co-zrobic-aby-moje-oferty-byly-oznaczone-ikona-allegro-smart-lDkP8VbKncV) / [EN](https://allegro.pl/help/for-sellers/allegro-smart-for-sellers/how-can-i-make-my-offers-be-marked-with-the-allegro-smart-badge-rKD1RV30jFM). Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#kwalifikacja-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#offer-qualification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param marketplaceId Marketplace for which offer classification report will be returned. If not specified, the result of the offer&#39;s base marketplace will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned offer Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Offer does not belong to seller </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity - The offer is being created in our system and we are not able to process it yet. Try again later. - Provided marketplaceId is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferSmartClassificationGETAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nullable String marketplaceId, final ApiCallback<SmartOfferClassificationReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfferSmartClassificationGETValidateBeforeCall(offerId, marketplaceId, _callback);
        Type localVarReturnType = new TypeToken<SmartOfferClassificationReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartialProductOffer
     * @param offerId Offer identifier. (required)
     * @param include Selection of parts intended to retrieve. Multiple parts can be specified at the same time. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format or unsupported part name </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - access to this resource requires authorization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access to offer is forbidden for this account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartialProductOfferCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull List<String> include, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/product-offers/{offerId}/parts"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartialProductOfferValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull List<String> include, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getPartialProductOffer(Async)");
        }

        // verify the required parameter 'include' is set
        if (include == null) {
            throw new ApiException("Missing the required parameter 'include' when calling getPartialProductOffer(Async)");
        }

        return getPartialProductOfferCall(offerId, include, acceptLanguage, _callback);

    }

    /**
     * Get selected data of the particular product-offer
     * Use this resource to retrieve selected data of the particular product-offer. The model and functionality is a subset of the full product offer get endpoint (&#x60;GET /sale/product-offers/{offerId}&#x60;), but it is faster and more reliable.
     * @param offerId Offer identifier. (required)
     * @param include Selection of parts intended to retrieve. Multiple parts can be specified at the same time. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return SalePartialProductOfferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format or unsupported part name </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - access to this resource requires authorization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access to offer is forbidden for this account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public SalePartialProductOfferResponse getPartialProductOffer(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull List<String> include, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<SalePartialProductOfferResponse> localVarResp = getPartialProductOfferWithHttpInfo(offerId, include, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get selected data of the particular product-offer
     * Use this resource to retrieve selected data of the particular product-offer. The model and functionality is a subset of the full product offer get endpoint (&#x60;GET /sale/product-offers/{offerId}&#x60;), but it is faster and more reliable.
     * @param offerId Offer identifier. (required)
     * @param include Selection of parts intended to retrieve. Multiple parts can be specified at the same time. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @return ApiResponse&lt;SalePartialProductOfferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format or unsupported part name </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - access to this resource requires authorization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access to offer is forbidden for this account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalePartialProductOfferResponse> getPartialProductOfferWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull List<String> include, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getPartialProductOfferValidateBeforeCall(offerId, include, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<SalePartialProductOfferResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get selected data of the particular product-offer (asynchronously)
     * Use this resource to retrieve selected data of the particular product-offer. The model and functionality is a subset of the full product offer get endpoint (&#x60;GET /sale/product-offers/{offerId}&#x60;), but it is faster and more reliable.
     * @param offerId Offer identifier. (required)
     * @param include Selection of parts intended to retrieve. Multiple parts can be specified at the same time. (required)
     * @param acceptLanguage Expected language of messages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format or unsupported part name </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - access to this resource requires authorization </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access to offer is forbidden for this account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartialProductOfferAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull List<String> include, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<SalePartialProductOfferResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartialProductOfferValidateBeforeCall(offerId, include, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<SalePartialProductOfferResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductOffer
     * @param offerId Offer identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductOfferCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/product-offers/{offerId}"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductOfferValidateBeforeCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling getProductOffer(Async)");
        }

        return getProductOfferCall(offerId, _callback);

    }

    /**
     * Get all data of the particular product-offer
     * Use this resource to retrieve all data of the particular product-offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @return SaleProductOfferResponseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SaleProductOfferResponseV1 getProductOffer(@javax.annotation.Nonnull String offerId) throws ApiException {
        ApiResponse<SaleProductOfferResponseV1> localVarResp = getProductOfferWithHttpInfo(offerId);
        return localVarResp.getData();
    }

    /**
     * Get all data of the particular product-offer
     * Use this resource to retrieve all data of the particular product-offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @return ApiResponse&lt;SaleProductOfferResponseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaleProductOfferResponseV1> getProductOfferWithHttpInfo(@javax.annotation.Nonnull String offerId) throws ApiException {
        okhttp3.Call localVarCall = getProductOfferValidateBeforeCall(offerId, null);
        Type localVarReturnType = new TypeToken<SaleProductOfferResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all data of the particular product-offer (asynchronously)
     * Use this resource to retrieve all data of the particular product-offer. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-jednym-requestem-wystawic-oferte-powiazana-z-produktem-D7Kj9gw4xFA#publikacja-oferty-w-asynchronicznym-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/list-offer-assigned-product-one-request-D7Kj9M71Bu6#offer-publication-in-asynchronous-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid offer ID format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductOfferAsync(@javax.annotation.Nonnull String offerId, final ApiCallback<SaleProductOfferResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductOfferValidateBeforeCall(offerId, _callback);
        Type localVarReturnType = new TypeToken<SaleProductOfferResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchOffersUsingGET
     * @param offerId Offer ID. (optional)
     * @param name The text to search in the offer title. (optional)
     * @param sellingModePriceAmountGte The lower threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAmountLte The upper threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleId The ID of price automation rule. Returns offers with given price automation rule ID.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleIdEmpty Allows to filter offers by existence of price automation rule ID. Passing &#39;false&#39; will return offers with any price automation rule, passing &#39;true&#39; will return offers without any price automation rules.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param publicationStatus The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: &#x60;publication.status&#x3D;INACTIVE&amp;publication.status&#x3D;ACTIVE&#x60; - returns offers with status &#x60;INACTIVE&#x60; or &#x60;ACTIVE&#x60;. (optional)
     * @param publicationMarketplace Either the base marketplace or an additional marketplace of the offer.  When passing the parameter &#x60;publication.marketplace&#x60;, searches for offers with the given marketplace as either its base marketplace or one of its additional marketplaces. When the parameter is omitted, searches for offers with all marketplaces.  In addition to searching, passing the parameter also influences the functionality of other query parameter by searching and sorting by data (e.g. price) on the given marketplace. (optional)
     * @param sellingModeFormat The offer&#39;s selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: &#x60;sellingMode.format&#x3D;BUY_NOW&amp;sellingMode.format&#x3D;ADVERTISEMENT&#x60; - returns offers with with format &#x60;BUY_NOW&#x60; or &#x60;ADVERTISEMENT&#x60;. (optional)
     * @param externalId The ID from the client&#39;s external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: &#x60;external.id&#x3D;1233&amp;external.id&#x3D;1234&#x60; - returns offers with ID &#x60;1233&#x60; or &#x60;1234&#x60;. Single ID length shouldn&#39;t exceed 100 characters. (optional)
     * @param deliveryShippingRatesId The ID of shipping rates. Returns offers with given shipping rates ID. (optional)
     * @param deliveryShippingRatesIdEmpty Allows to filter offers by existence of shipping rates ID. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by offer creation time, descending.  If additionally a &#x60;publication.marketplace&#x60; is provided, sorts by price and &#x60;stock.sold&#x60; using the data on the given marketplace. (optional)
     * @param limit The maximum number of offers returned in the response. (optional, default to 20)
     * @param offset Index of the first returned offer from all search results. Maximum sum of offset and limit is 10 000 000. (optional)
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param productIdEmpty Allows to filter offers by existence of product ID. (optional)
     * @param productizationRequired Allows to search for offers from categories where productization is required. (optional)
     * @param b2bBuyableOnlyByBusiness Allows to search for offers buyable only by businesses. (optional)
     * @param fundraisingCampaignId ID of the charity fundraising campaign that benefits from this offer. (optional)
     * @param fundraisingCampaignIdEmpty Allows to search for charity or commercial offers. (optional)
     * @param afterSalesServicesReturnPolicyId The ID of return policy. Returns offers with given return policy ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offers returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user has no rights to query offers or provided token is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchOffersUsingGETCall(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String name, @javax.annotation.Nullable BigDecimal sellingModePriceAmountGte, @javax.annotation.Nullable BigDecimal sellingModePriceAmountLte, @javax.annotation.Nullable String sellingModePriceAutomationRuleId, @javax.annotation.Nullable Boolean sellingModePriceAutomationRuleIdEmpty, @javax.annotation.Nullable List<String> publicationStatus, @javax.annotation.Nullable String publicationMarketplace, @javax.annotation.Nullable List<String> sellingModeFormat, @javax.annotation.Nullable List<String> externalId, @javax.annotation.Nullable UUID deliveryShippingRatesId, @javax.annotation.Nullable Boolean deliveryShippingRatesIdEmpty, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean productIdEmpty, @javax.annotation.Nullable Boolean productizationRequired, @javax.annotation.Nullable Boolean b2bBuyableOnlyByBusiness, @javax.annotation.Nullable UUID fundraisingCampaignId, @javax.annotation.Nullable Boolean fundraisingCampaignIdEmpty, @javax.annotation.Nullable UUID afterSalesServicesReturnPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "offer.id", offerId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (sellingModePriceAmountGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellingMode.price.amount.gte", sellingModePriceAmountGte));
        }

        if (sellingModePriceAmountLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellingMode.price.amount.lte", sellingModePriceAmountLte));
        }

        if (sellingModePriceAutomationRuleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellingMode.priceAutomation.rule.id", sellingModePriceAutomationRuleId));
        }

        if (sellingModePriceAutomationRuleIdEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellingMode.priceAutomation.rule.id.empty", sellingModePriceAutomationRuleIdEmpty));
        }

        if (publicationStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "publication.status", publicationStatus));
        }

        if (publicationMarketplace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publication.marketplace", publicationMarketplace));
        }

        if (sellingModeFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sellingMode.format", sellingModeFormat));
        }

        if (externalId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "external.id", externalId));
        }

        if (deliveryShippingRatesId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery.shippingRates.id", deliveryShippingRatesId));
        }

        if (deliveryShippingRatesIdEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery.shippingRates.id.empty", deliveryShippingRatesIdEmpty));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category.id", categoryId));
        }

        if (productIdEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product.id.empty", productIdEmpty));
        }

        if (productizationRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productizationRequired", productizationRequired));
        }

        if (b2bBuyableOnlyByBusiness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("b2b.buyableOnlyByBusiness", b2bBuyableOnlyByBusiness));
        }

        if (fundraisingCampaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fundraisingCampaign.id", fundraisingCampaignId));
        }

        if (fundraisingCampaignIdEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fundraisingCampaign.id.empty", fundraisingCampaignIdEmpty));
        }

        if (afterSalesServicesReturnPolicyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterSalesServices.returnPolicy.id", afterSalesServicesReturnPolicyId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchOffersUsingGETValidateBeforeCall(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String name, @javax.annotation.Nullable BigDecimal sellingModePriceAmountGte, @javax.annotation.Nullable BigDecimal sellingModePriceAmountLte, @javax.annotation.Nullable String sellingModePriceAutomationRuleId, @javax.annotation.Nullable Boolean sellingModePriceAutomationRuleIdEmpty, @javax.annotation.Nullable List<String> publicationStatus, @javax.annotation.Nullable String publicationMarketplace, @javax.annotation.Nullable List<String> sellingModeFormat, @javax.annotation.Nullable List<String> externalId, @javax.annotation.Nullable UUID deliveryShippingRatesId, @javax.annotation.Nullable Boolean deliveryShippingRatesIdEmpty, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean productIdEmpty, @javax.annotation.Nullable Boolean productizationRequired, @javax.annotation.Nullable Boolean b2bBuyableOnlyByBusiness, @javax.annotation.Nullable UUID fundraisingCampaignId, @javax.annotation.Nullable Boolean fundraisingCampaignIdEmpty, @javax.annotation.Nullable UUID afterSalesServicesReturnPolicyId, final ApiCallback _callback) throws ApiException {
        return searchOffersUsingGETCall(offerId, name, sellingModePriceAmountGte, sellingModePriceAmountLte, sellingModePriceAutomationRuleId, sellingModePriceAutomationRuleIdEmpty, publicationStatus, publicationMarketplace, sellingModeFormat, externalId, deliveryShippingRatesId, deliveryShippingRatesIdEmpty, sort, limit, offset, categoryId, productIdEmpty, productizationRequired, b2bBuyableOnlyByBusiness, fundraisingCampaignId, fundraisingCampaignIdEmpty, afterSalesServicesReturnPolicyId, _callback);

    }

    /**
     * Get seller&#39;s offers
     * Use this resource to get the list of the seller&#39;s offers. You can use different query parameters to filter the list. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-moje-oferty-w-rest-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#list-of-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (optional)
     * @param name The text to search in the offer title. (optional)
     * @param sellingModePriceAmountGte The lower threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAmountLte The upper threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleId The ID of price automation rule. Returns offers with given price automation rule ID.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleIdEmpty Allows to filter offers by existence of price automation rule ID. Passing &#39;false&#39; will return offers with any price automation rule, passing &#39;true&#39; will return offers without any price automation rules.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param publicationStatus The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: &#x60;publication.status&#x3D;INACTIVE&amp;publication.status&#x3D;ACTIVE&#x60; - returns offers with status &#x60;INACTIVE&#x60; or &#x60;ACTIVE&#x60;. (optional)
     * @param publicationMarketplace Either the base marketplace or an additional marketplace of the offer.  When passing the parameter &#x60;publication.marketplace&#x60;, searches for offers with the given marketplace as either its base marketplace or one of its additional marketplaces. When the parameter is omitted, searches for offers with all marketplaces.  In addition to searching, passing the parameter also influences the functionality of other query parameter by searching and sorting by data (e.g. price) on the given marketplace. (optional)
     * @param sellingModeFormat The offer&#39;s selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: &#x60;sellingMode.format&#x3D;BUY_NOW&amp;sellingMode.format&#x3D;ADVERTISEMENT&#x60; - returns offers with with format &#x60;BUY_NOW&#x60; or &#x60;ADVERTISEMENT&#x60;. (optional)
     * @param externalId The ID from the client&#39;s external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: &#x60;external.id&#x3D;1233&amp;external.id&#x3D;1234&#x60; - returns offers with ID &#x60;1233&#x60; or &#x60;1234&#x60;. Single ID length shouldn&#39;t exceed 100 characters. (optional)
     * @param deliveryShippingRatesId The ID of shipping rates. Returns offers with given shipping rates ID. (optional)
     * @param deliveryShippingRatesIdEmpty Allows to filter offers by existence of shipping rates ID. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by offer creation time, descending.  If additionally a &#x60;publication.marketplace&#x60; is provided, sorts by price and &#x60;stock.sold&#x60; using the data on the given marketplace. (optional)
     * @param limit The maximum number of offers returned in the response. (optional, default to 20)
     * @param offset Index of the first returned offer from all search results. Maximum sum of offset and limit is 10 000 000. (optional)
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param productIdEmpty Allows to filter offers by existence of product ID. (optional)
     * @param productizationRequired Allows to search for offers from categories where productization is required. (optional)
     * @param b2bBuyableOnlyByBusiness Allows to search for offers buyable only by businesses. (optional)
     * @param fundraisingCampaignId ID of the charity fundraising campaign that benefits from this offer. (optional)
     * @param fundraisingCampaignIdEmpty Allows to search for charity or commercial offers. (optional)
     * @param afterSalesServicesReturnPolicyId The ID of return policy. Returns offers with given return policy ID. (optional)
     * @return OffersSearchResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offers returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user has no rights to query offers or provided token is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public OffersSearchResultDto searchOffersUsingGET(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String name, @javax.annotation.Nullable BigDecimal sellingModePriceAmountGte, @javax.annotation.Nullable BigDecimal sellingModePriceAmountLte, @javax.annotation.Nullable String sellingModePriceAutomationRuleId, @javax.annotation.Nullable Boolean sellingModePriceAutomationRuleIdEmpty, @javax.annotation.Nullable List<String> publicationStatus, @javax.annotation.Nullable String publicationMarketplace, @javax.annotation.Nullable List<String> sellingModeFormat, @javax.annotation.Nullable List<String> externalId, @javax.annotation.Nullable UUID deliveryShippingRatesId, @javax.annotation.Nullable Boolean deliveryShippingRatesIdEmpty, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean productIdEmpty, @javax.annotation.Nullable Boolean productizationRequired, @javax.annotation.Nullable Boolean b2bBuyableOnlyByBusiness, @javax.annotation.Nullable UUID fundraisingCampaignId, @javax.annotation.Nullable Boolean fundraisingCampaignIdEmpty, @javax.annotation.Nullable UUID afterSalesServicesReturnPolicyId) throws ApiException {
        ApiResponse<OffersSearchResultDto> localVarResp = searchOffersUsingGETWithHttpInfo(offerId, name, sellingModePriceAmountGte, sellingModePriceAmountLte, sellingModePriceAutomationRuleId, sellingModePriceAutomationRuleIdEmpty, publicationStatus, publicationMarketplace, sellingModeFormat, externalId, deliveryShippingRatesId, deliveryShippingRatesIdEmpty, sort, limit, offset, categoryId, productIdEmpty, productizationRequired, b2bBuyableOnlyByBusiness, fundraisingCampaignId, fundraisingCampaignIdEmpty, afterSalesServicesReturnPolicyId);
        return localVarResp.getData();
    }

    /**
     * Get seller&#39;s offers
     * Use this resource to get the list of the seller&#39;s offers. You can use different query parameters to filter the list. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-moje-oferty-w-rest-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#list-of-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (optional)
     * @param name The text to search in the offer title. (optional)
     * @param sellingModePriceAmountGte The lower threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAmountLte The upper threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleId The ID of price automation rule. Returns offers with given price automation rule ID.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleIdEmpty Allows to filter offers by existence of price automation rule ID. Passing &#39;false&#39; will return offers with any price automation rule, passing &#39;true&#39; will return offers without any price automation rules.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param publicationStatus The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: &#x60;publication.status&#x3D;INACTIVE&amp;publication.status&#x3D;ACTIVE&#x60; - returns offers with status &#x60;INACTIVE&#x60; or &#x60;ACTIVE&#x60;. (optional)
     * @param publicationMarketplace Either the base marketplace or an additional marketplace of the offer.  When passing the parameter &#x60;publication.marketplace&#x60;, searches for offers with the given marketplace as either its base marketplace or one of its additional marketplaces. When the parameter is omitted, searches for offers with all marketplaces.  In addition to searching, passing the parameter also influences the functionality of other query parameter by searching and sorting by data (e.g. price) on the given marketplace. (optional)
     * @param sellingModeFormat The offer&#39;s selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: &#x60;sellingMode.format&#x3D;BUY_NOW&amp;sellingMode.format&#x3D;ADVERTISEMENT&#x60; - returns offers with with format &#x60;BUY_NOW&#x60; or &#x60;ADVERTISEMENT&#x60;. (optional)
     * @param externalId The ID from the client&#39;s external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: &#x60;external.id&#x3D;1233&amp;external.id&#x3D;1234&#x60; - returns offers with ID &#x60;1233&#x60; or &#x60;1234&#x60;. Single ID length shouldn&#39;t exceed 100 characters. (optional)
     * @param deliveryShippingRatesId The ID of shipping rates. Returns offers with given shipping rates ID. (optional)
     * @param deliveryShippingRatesIdEmpty Allows to filter offers by existence of shipping rates ID. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by offer creation time, descending.  If additionally a &#x60;publication.marketplace&#x60; is provided, sorts by price and &#x60;stock.sold&#x60; using the data on the given marketplace. (optional)
     * @param limit The maximum number of offers returned in the response. (optional, default to 20)
     * @param offset Index of the first returned offer from all search results. Maximum sum of offset and limit is 10 000 000. (optional)
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param productIdEmpty Allows to filter offers by existence of product ID. (optional)
     * @param productizationRequired Allows to search for offers from categories where productization is required. (optional)
     * @param b2bBuyableOnlyByBusiness Allows to search for offers buyable only by businesses. (optional)
     * @param fundraisingCampaignId ID of the charity fundraising campaign that benefits from this offer. (optional)
     * @param fundraisingCampaignIdEmpty Allows to search for charity or commercial offers. (optional)
     * @param afterSalesServicesReturnPolicyId The ID of return policy. Returns offers with given return policy ID. (optional)
     * @return ApiResponse&lt;OffersSearchResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offers returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user has no rights to query offers or provided token is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OffersSearchResultDto> searchOffersUsingGETWithHttpInfo(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String name, @javax.annotation.Nullable BigDecimal sellingModePriceAmountGte, @javax.annotation.Nullable BigDecimal sellingModePriceAmountLte, @javax.annotation.Nullable String sellingModePriceAutomationRuleId, @javax.annotation.Nullable Boolean sellingModePriceAutomationRuleIdEmpty, @javax.annotation.Nullable List<String> publicationStatus, @javax.annotation.Nullable String publicationMarketplace, @javax.annotation.Nullable List<String> sellingModeFormat, @javax.annotation.Nullable List<String> externalId, @javax.annotation.Nullable UUID deliveryShippingRatesId, @javax.annotation.Nullable Boolean deliveryShippingRatesIdEmpty, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean productIdEmpty, @javax.annotation.Nullable Boolean productizationRequired, @javax.annotation.Nullable Boolean b2bBuyableOnlyByBusiness, @javax.annotation.Nullable UUID fundraisingCampaignId, @javax.annotation.Nullable Boolean fundraisingCampaignIdEmpty, @javax.annotation.Nullable UUID afterSalesServicesReturnPolicyId) throws ApiException {
        okhttp3.Call localVarCall = searchOffersUsingGETValidateBeforeCall(offerId, name, sellingModePriceAmountGte, sellingModePriceAmountLte, sellingModePriceAutomationRuleId, sellingModePriceAutomationRuleIdEmpty, publicationStatus, publicationMarketplace, sellingModeFormat, externalId, deliveryShippingRatesId, deliveryShippingRatesIdEmpty, sort, limit, offset, categoryId, productIdEmpty, productizationRequired, b2bBuyableOnlyByBusiness, fundraisingCampaignId, fundraisingCampaignIdEmpty, afterSalesServicesReturnPolicyId, null);
        Type localVarReturnType = new TypeToken<OffersSearchResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get seller&#39;s offers (asynchronously)
     * Use this resource to get the list of the seller&#39;s offers. You can use different query parameters to filter the list. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-ofertami-7GzB2L37ase#jak-pobrac-moje-oferty-w-rest-api\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-process-list-of-offers-m09BKA5v8H3#list-of-offers\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer ID. (optional)
     * @param name The text to search in the offer title. (optional)
     * @param sellingModePriceAmountGte The lower threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAmountLte The upper threshold of price.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleId The ID of price automation rule. Returns offers with given price automation rule ID.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param sellingModePriceAutomationRuleIdEmpty Allows to filter offers by existence of price automation rule ID. Passing &#39;false&#39; will return offers with any price automation rule, passing &#39;true&#39; will return offers without any price automation rules.  If additionally a &#x60;publication.marketplace&#x60; is provided, searches using the price automation rule on the given marketplace. (optional)
     * @param publicationStatus The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included. Example: &#x60;publication.status&#x3D;INACTIVE&amp;publication.status&#x3D;ACTIVE&#x60; - returns offers with status &#x60;INACTIVE&#x60; or &#x60;ACTIVE&#x60;. (optional)
     * @param publicationMarketplace Either the base marketplace or an additional marketplace of the offer.  When passing the parameter &#x60;publication.marketplace&#x60;, searches for offers with the given marketplace as either its base marketplace or one of its additional marketplaces. When the parameter is omitted, searches for offers with all marketplaces.  In addition to searching, passing the parameter also influences the functionality of other query parameter by searching and sorting by data (e.g. price) on the given marketplace. (optional)
     * @param sellingModeFormat The offer&#39;s selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included. Example: &#x60;sellingMode.format&#x3D;BUY_NOW&amp;sellingMode.format&#x3D;ADVERTISEMENT&#x60; - returns offers with with format &#x60;BUY_NOW&#x60; or &#x60;ADVERTISEMENT&#x60;. (optional)
     * @param externalId The ID from the client&#39;s external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included. Example: &#x60;external.id&#x3D;1233&amp;external.id&#x3D;1234&#x60; - returns offers with ID &#x60;1233&#x60; or &#x60;1234&#x60;. Single ID length shouldn&#39;t exceed 100 characters. (optional)
     * @param deliveryShippingRatesId The ID of shipping rates. Returns offers with given shipping rates ID. (optional)
     * @param deliveryShippingRatesIdEmpty Allows to filter offers by existence of shipping rates ID. (optional)
     * @param sort The results&#39; sorting order. No prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. If you don&#39;t provide the sort parameter, the list is sorted by offer creation time, descending.  If additionally a &#x60;publication.marketplace&#x60; is provided, sorts by price and &#x60;stock.sold&#x60; using the data on the given marketplace. (optional)
     * @param limit The maximum number of offers returned in the response. (optional, default to 20)
     * @param offset Index of the first returned offer from all search results. Maximum sum of offset and limit is 10 000 000. (optional)
     * @param categoryId The identifier of the category, where you want to search for offers. (optional)
     * @param productIdEmpty Allows to filter offers by existence of product ID. (optional)
     * @param productizationRequired Allows to search for offers from categories where productization is required. (optional)
     * @param b2bBuyableOnlyByBusiness Allows to search for offers buyable only by businesses. (optional)
     * @param fundraisingCampaignId ID of the charity fundraising campaign that benefits from this offer. (optional)
     * @param fundraisingCampaignIdEmpty Allows to search for charity or commercial offers. (optional)
     * @param afterSalesServicesReturnPolicyId The ID of return policy. Returns offers with given return policy ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of offers returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user has no rights to query offers or provided token is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchOffersUsingGETAsync(@javax.annotation.Nullable List<String> offerId, @javax.annotation.Nullable String name, @javax.annotation.Nullable BigDecimal sellingModePriceAmountGte, @javax.annotation.Nullable BigDecimal sellingModePriceAmountLte, @javax.annotation.Nullable String sellingModePriceAutomationRuleId, @javax.annotation.Nullable Boolean sellingModePriceAutomationRuleIdEmpty, @javax.annotation.Nullable List<String> publicationStatus, @javax.annotation.Nullable String publicationMarketplace, @javax.annotation.Nullable List<String> sellingModeFormat, @javax.annotation.Nullable List<String> externalId, @javax.annotation.Nullable UUID deliveryShippingRatesId, @javax.annotation.Nullable Boolean deliveryShippingRatesIdEmpty, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable Boolean productIdEmpty, @javax.annotation.Nullable Boolean productizationRequired, @javax.annotation.Nullable Boolean b2bBuyableOnlyByBusiness, @javax.annotation.Nullable UUID fundraisingCampaignId, @javax.annotation.Nullable Boolean fundraisingCampaignIdEmpty, @javax.annotation.Nullable UUID afterSalesServicesReturnPolicyId, final ApiCallback<OffersSearchResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchOffersUsingGETValidateBeforeCall(offerId, name, sellingModePriceAmountGte, sellingModePriceAmountLte, sellingModePriceAutomationRuleId, sellingModePriceAutomationRuleIdEmpty, publicationStatus, publicationMarketplace, sellingModeFormat, externalId, deliveryShippingRatesId, deliveryShippingRatesIdEmpty, sort, limit, offset, categoryId, productIdEmpty, productizationRequired, b2bBuyableOnlyByBusiness, fundraisingCampaignId, fundraisingCampaignIdEmpty, afterSalesServicesReturnPolicyId, _callback);
        Type localVarReturnType = new TypeToken<OffersSearchResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
