/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AlleDiscountGetSubmitCommandResponse;
import pl.wtx.allegro.api.client.model.AlleDiscountGetWithdrawCommandResponse;
import pl.wtx.allegro.api.client.model.AlleDiscountListCampaignsResponse;
import pl.wtx.allegro.api.client.model.AlleDiscountListEligibleResponse;
import pl.wtx.allegro.api.client.model.AlleDiscountListSubmittedResponse;
import pl.wtx.allegro.api.client.model.AlleDiscountSubmitCommandRequest;
import pl.wtx.allegro.api.client.model.AlleDiscountSubmitCommandResponse;
import pl.wtx.allegro.api.client.model.AlleDiscountWithdrawCommandRequest;
import pl.wtx.allegro.api.client.model.AlleDiscountWithdrawCommandResponse;
import pl.wtx.allegro.api.client.model.ErrorsHolder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlleDiscountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlleDiscountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlleDiscountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAlleDiscountCampaigns
     * @param campaignId Id of the searched campaign. If present, returns at most one entry. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists current AlleDiscount campaigns. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlleDiscountCampaignsCall(@javax.annotation.Nullable String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/alle-discount/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlleDiscountCampaignsValidateBeforeCall(@javax.annotation.Nullable String campaignId, final ApiCallback _callback) throws ApiException {
        return getAlleDiscountCampaignsCall(campaignId, _callback);

    }

    /**
     * List AlleDiscount campaigns
     * List current AlleDiscount campaigns. Each campaign has its own list of goods (products) that indicate which offers can be submitted to it. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-dostepnych-kampanii-alleobnizka\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-available-allediscount-campaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Id of the searched campaign. If present, returns at most one entry. (optional)
     * @return AlleDiscountListCampaignsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists current AlleDiscount campaigns. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public AlleDiscountListCampaignsResponse getAlleDiscountCampaigns(@javax.annotation.Nullable String campaignId) throws ApiException {
        ApiResponse<AlleDiscountListCampaignsResponse> localVarResp = getAlleDiscountCampaignsWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * List AlleDiscount campaigns
     * List current AlleDiscount campaigns. Each campaign has its own list of goods (products) that indicate which offers can be submitted to it. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-dostepnych-kampanii-alleobnizka\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-available-allediscount-campaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Id of the searched campaign. If present, returns at most one entry. (optional)
     * @return ApiResponse&lt;AlleDiscountListCampaignsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists current AlleDiscount campaigns. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlleDiscountListCampaignsResponse> getAlleDiscountCampaignsWithHttpInfo(@javax.annotation.Nullable String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getAlleDiscountCampaignsValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<AlleDiscountListCampaignsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List AlleDiscount campaigns (asynchronously)
     * List current AlleDiscount campaigns. Each campaign has its own list of goods (products) that indicate which offers can be submitted to it. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-dostepnych-kampanii-alleobnizka\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-available-allediscount-campaigns\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Id of the searched campaign. If present, returns at most one entry. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists current AlleDiscount campaigns. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlleDiscountCampaignsAsync(@javax.annotation.Nullable String campaignId, final ApiCallback<AlleDiscountListCampaignsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlleDiscountCampaignsValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<AlleDiscountListCampaignsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOffersEligibleForAlleDiscount
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param meetsConditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offers eligible for submission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Example error codes:   - OffsetNegative   - LimitBelowMin   - LimitAboveMax   - OfferIdInvalidFormat </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersEligibleForAlleDiscountCall(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Boolean meetsConditions, @javax.annotation.Nullable String offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/alle-discount/{campaignId}/eligible-offers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (meetsConditions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meetsConditions", meetsConditions));
        }

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerId", offerId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOffersEligibleForAlleDiscountValidateBeforeCall(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Boolean meetsConditions, @javax.annotation.Nullable String offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getOffersEligibleForAlleDiscount(Async)");
        }

        return getOffersEligibleForAlleDiscountCall(campaignId, limit, offset, meetsConditions, offerId, _callback);

    }

    /**
     * List eligible offers
     * Endpoint returning info about offers that can be submitted to a given AlleDiscount campaign. Only offer linked to the product in published list of goods (products) can be submitted to a given AlleDiscount campaign. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-ofert-kwalifikujacych-sie-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-offers-eligible-for-the-selected-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param meetsConditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @return AlleDiscountListEligibleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offers eligible for submission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Example error codes:   - OffsetNegative   - LimitBelowMin   - LimitAboveMax   - OfferIdInvalidFormat </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public AlleDiscountListEligibleResponse getOffersEligibleForAlleDiscount(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Boolean meetsConditions, @javax.annotation.Nullable String offerId) throws ApiException {
        ApiResponse<AlleDiscountListEligibleResponse> localVarResp = getOffersEligibleForAlleDiscountWithHttpInfo(campaignId, limit, offset, meetsConditions, offerId);
        return localVarResp.getData();
    }

    /**
     * List eligible offers
     * Endpoint returning info about offers that can be submitted to a given AlleDiscount campaign. Only offer linked to the product in published list of goods (products) can be submitted to a given AlleDiscount campaign. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-ofert-kwalifikujacych-sie-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-offers-eligible-for-the-selected-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param meetsConditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @return ApiResponse&lt;AlleDiscountListEligibleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offers eligible for submission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Example error codes:   - OffsetNegative   - LimitBelowMin   - LimitAboveMax   - OfferIdInvalidFormat </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlleDiscountListEligibleResponse> getOffersEligibleForAlleDiscountWithHttpInfo(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Boolean meetsConditions, @javax.annotation.Nullable String offerId) throws ApiException {
        okhttp3.Call localVarCall = getOffersEligibleForAlleDiscountValidateBeforeCall(campaignId, limit, offset, meetsConditions, offerId, null);
        Type localVarReturnType = new TypeToken<AlleDiscountListEligibleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List eligible offers (asynchronously)
     * Endpoint returning info about offers that can be submitted to a given AlleDiscount campaign. Only offer linked to the product in published list of goods (products) can be submitted to a given AlleDiscount campaign. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-ofert-kwalifikujacych-sie-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-offers-eligible-for-the-selected-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param meetsConditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offers eligible for submission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Example error codes:   - OffsetNegative   - LimitBelowMin   - LimitAboveMax   - OfferIdInvalidFormat </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersEligibleForAlleDiscountAsync(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Boolean meetsConditions, @javax.annotation.Nullable String offerId, final ApiCallback<AlleDiscountListEligibleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOffersEligibleForAlleDiscountValidateBeforeCall(campaignId, limit, offset, meetsConditions, offerId, _callback);
        Type localVarReturnType = new TypeToken<AlleDiscountListEligibleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOffersSubmittedToAlleDiscount
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param participationId Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offer participations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersSubmittedToAlleDiscountCall(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String participationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/alle-discount/{campaignId}/submitted-offers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerId", offerId));
        }

        if (participationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participationId", participationId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOffersSubmittedToAlleDiscountValidateBeforeCall(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String participationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getOffersSubmittedToAlleDiscount(Async)");
        }

        return getOffersSubmittedToAlleDiscountCall(campaignId, limit, offset, offerId, participationId, _callback);

    }

    /**
     * List offer participations
     * Endpoint returning info about offer participations for a given AlleDiscount campaign. With this endpoint you are able to validate if the offer participates in AlleDiscount and if it has lowered price on the platform. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-ofert-zgloszonych-do-wybranej-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-offers-submitted-for-the-selected-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param participationId Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @return AlleDiscountListSubmittedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offer participations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public AlleDiscountListSubmittedResponse getOffersSubmittedToAlleDiscount(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String participationId) throws ApiException {
        ApiResponse<AlleDiscountListSubmittedResponse> localVarResp = getOffersSubmittedToAlleDiscountWithHttpInfo(campaignId, limit, offset, offerId, participationId);
        return localVarResp.getData();
    }

    /**
     * List offer participations
     * Endpoint returning info about offer participations for a given AlleDiscount campaign. With this endpoint you are able to validate if the offer participates in AlleDiscount and if it has lowered price on the platform. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-ofert-zgloszonych-do-wybranej-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-offers-submitted-for-the-selected-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param participationId Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @return ApiResponse&lt;AlleDiscountListSubmittedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offer participations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlleDiscountListSubmittedResponse> getOffersSubmittedToAlleDiscountWithHttpInfo(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String participationId) throws ApiException {
        okhttp3.Call localVarCall = getOffersSubmittedToAlleDiscountValidateBeforeCall(campaignId, limit, offset, offerId, participationId, null);
        Type localVarReturnType = new TypeToken<AlleDiscountListSubmittedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List offer participations (asynchronously)
     * Endpoint returning info about offer participations for a given AlleDiscount campaign. With this endpoint you are able to validate if the offer participates in AlleDiscount and if it has lowered price on the platform. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#lista-ofert-zgloszonych-do-wybranej-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#list-of-offers-submitted-for-the-selected-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param campaignId Campaign id to list offers from. (required)
     * @param limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param offset The number of offers to skip while listing the results. (optional)
     * @param offerId ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param participationId Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists offer participations. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Access to the AlleDiscount campaign may have been restricted, check user message. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided AlleDiscount campaign id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersSubmittedToAlleDiscountAsync(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String participationId, final ApiCallback<AlleDiscountListSubmittedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOffersSubmittedToAlleDiscountValidateBeforeCall(campaignId, limit, offset, offerId, participationId, _callback);
        Type localVarReturnType = new TypeToken<AlleDiscountListSubmittedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmitOfferToAlleDiscountCommandsStatus
     * @param commandId Command id in UUID format, must be unique. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmitOfferToAlleDiscountCommandsStatusCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/alle-discount/submit-offer-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmitOfferToAlleDiscountCommandsStatusValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getSubmitOfferToAlleDiscountCommandsStatus(Async)");
        }

        return getSubmitOfferToAlleDiscountCommandsStatusCall(commandId, _callback);

    }

    /**
     * Get the offer submission command status
     * Use this resource to get information about the submit offer command execution status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-sprawdzic-status-zgloszenia-oferty-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-check-the-status-of-an-offer-submission-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command id in UUID format, must be unique. (required)
     * @return AlleDiscountGetSubmitCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public AlleDiscountGetSubmitCommandResponse getSubmitOfferToAlleDiscountCommandsStatus(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<AlleDiscountGetSubmitCommandResponse> localVarResp = getSubmitOfferToAlleDiscountCommandsStatusWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Get the offer submission command status
     * Use this resource to get information about the submit offer command execution status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-sprawdzic-status-zgloszenia-oferty-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-check-the-status-of-an-offer-submission-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command id in UUID format, must be unique. (required)
     * @return ApiResponse&lt;AlleDiscountGetSubmitCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlleDiscountGetSubmitCommandResponse> getSubmitOfferToAlleDiscountCommandsStatusWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getSubmitOfferToAlleDiscountCommandsStatusValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<AlleDiscountGetSubmitCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the offer submission command status (asynchronously)
     * Use this resource to get information about the submit offer command execution status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-sprawdzic-status-zgloszenia-oferty-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-check-the-status-of-an-offer-submission-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command id in UUID format, must be unique. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmitOfferToAlleDiscountCommandsStatusAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<AlleDiscountGetSubmitCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmitOfferToAlleDiscountCommandsStatusValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<AlleDiscountGetSubmitCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWithdrawOfferFromAlleDiscountCommandsStatus
     * @param commandId Command id in UUID format, must be unique. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWithdrawOfferFromAlleDiscountCommandsStatusCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/alle-discount/withdraw-offer-commands/{commandId}"
            .replace("{" + "commandId" + "}", localVarApiClient.escapeString(commandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWithdrawOfferFromAlleDiscountCommandsStatusValidateBeforeCall(@javax.annotation.Nonnull String commandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commandId' is set
        if (commandId == null) {
            throw new ApiException("Missing the required parameter 'commandId' when calling getWithdrawOfferFromAlleDiscountCommandsStatus(Async)");
        }

        return getWithdrawOfferFromAlleDiscountCommandsStatusCall(commandId, _callback);

    }

    /**
     * Get the offer withdrawal command status
     * Use this resource to get information about the withdrawal command execution status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-sprawdzic-status-wycofania-oferty-z-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-check-the-withdrawal-status-of-an-offer-from-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command id in UUID format, must be unique. (required)
     * @return AlleDiscountGetWithdrawCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public AlleDiscountGetWithdrawCommandResponse getWithdrawOfferFromAlleDiscountCommandsStatus(@javax.annotation.Nonnull String commandId) throws ApiException {
        ApiResponse<AlleDiscountGetWithdrawCommandResponse> localVarResp = getWithdrawOfferFromAlleDiscountCommandsStatusWithHttpInfo(commandId);
        return localVarResp.getData();
    }

    /**
     * Get the offer withdrawal command status
     * Use this resource to get information about the withdrawal command execution status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-sprawdzic-status-wycofania-oferty-z-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-check-the-withdrawal-status-of-an-offer-from-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command id in UUID format, must be unique. (required)
     * @return ApiResponse&lt;AlleDiscountGetWithdrawCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlleDiscountGetWithdrawCommandResponse> getWithdrawOfferFromAlleDiscountCommandsStatusWithHttpInfo(@javax.annotation.Nonnull String commandId) throws ApiException {
        okhttp3.Call localVarCall = getWithdrawOfferFromAlleDiscountCommandsStatusValidateBeforeCall(commandId, null);
        Type localVarReturnType = new TypeToken<AlleDiscountGetWithdrawCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the offer withdrawal command status (asynchronously)
     * Use this resource to get information about the withdrawal command execution status. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-sprawdzic-status-wycofania-oferty-z-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-check-the-withdrawal-status-of-an-offer-from-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param commandId Command id in UUID format, must be unique. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns command output with status and possible errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Check provided command id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWithdrawOfferFromAlleDiscountCommandsStatusAsync(@javax.annotation.Nonnull String commandId, final ApiCallback<AlleDiscountGetWithdrawCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWithdrawOfferFromAlleDiscountCommandsStatusValidateBeforeCall(commandId, _callback);
        Type localVarReturnType = new TypeToken<AlleDiscountGetWithdrawCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitOfferToAlleDiscountCommands
     * @param alleDiscountSubmitCommandRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ProposedPriceAmountInvalidNumberFormat   - ProposedPriceAmountNotPositive   - ProposedPriceAmountInvalidDecimalPlaces   - ProposedPriceAmountCannotBeNull </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitOfferToAlleDiscountCommandsCall(@javax.annotation.Nonnull AlleDiscountSubmitCommandRequest alleDiscountSubmitCommandRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alleDiscountSubmitCommandRequest;

        // create path and map variables
        String localVarPath = "/sale/alle-discount/submit-offer-commands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitOfferToAlleDiscountCommandsValidateBeforeCall(@javax.annotation.Nonnull AlleDiscountSubmitCommandRequest alleDiscountSubmitCommandRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alleDiscountSubmitCommandRequest' is set
        if (alleDiscountSubmitCommandRequest == null) {
            throw new ApiException("Missing the required parameter 'alleDiscountSubmitCommandRequest' when calling submitOfferToAlleDiscountCommands(Async)");
        }

        return submitOfferToAlleDiscountCommandsCall(alleDiscountSubmitCommandRequest, _callback);

    }

    /**
     * Create submit offer command
     * Use this resource to create a command for submitting an offer. Offer will be submitted to the AlleDiscount campaign only if command is processed successfully. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-zglosic-oferte-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-submit-an-offer-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param alleDiscountSubmitCommandRequest  (required)
     * @return AlleDiscountSubmitCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ProposedPriceAmountInvalidNumberFormat   - ProposedPriceAmountNotPositive   - ProposedPriceAmountInvalidDecimalPlaces   - ProposedPriceAmountCannotBeNull </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public AlleDiscountSubmitCommandResponse submitOfferToAlleDiscountCommands(@javax.annotation.Nonnull AlleDiscountSubmitCommandRequest alleDiscountSubmitCommandRequest) throws ApiException {
        ApiResponse<AlleDiscountSubmitCommandResponse> localVarResp = submitOfferToAlleDiscountCommandsWithHttpInfo(alleDiscountSubmitCommandRequest);
        return localVarResp.getData();
    }

    /**
     * Create submit offer command
     * Use this resource to create a command for submitting an offer. Offer will be submitted to the AlleDiscount campaign only if command is processed successfully. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-zglosic-oferte-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-submit-an-offer-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param alleDiscountSubmitCommandRequest  (required)
     * @return ApiResponse&lt;AlleDiscountSubmitCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ProposedPriceAmountInvalidNumberFormat   - ProposedPriceAmountNotPositive   - ProposedPriceAmountInvalidDecimalPlaces   - ProposedPriceAmountCannotBeNull </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlleDiscountSubmitCommandResponse> submitOfferToAlleDiscountCommandsWithHttpInfo(@javax.annotation.Nonnull AlleDiscountSubmitCommandRequest alleDiscountSubmitCommandRequest) throws ApiException {
        okhttp3.Call localVarCall = submitOfferToAlleDiscountCommandsValidateBeforeCall(alleDiscountSubmitCommandRequest, null);
        Type localVarReturnType = new TypeToken<AlleDiscountSubmitCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create submit offer command (asynchronously)
     * Use this resource to create a command for submitting an offer. Offer will be submitted to the AlleDiscount campaign only if command is processed successfully. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-zglosic-oferte-do-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-submit-an-offer-to-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param alleDiscountSubmitCommandRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ProposedPriceAmountInvalidNumberFormat   - ProposedPriceAmountNotPositive   - ProposedPriceAmountInvalidDecimalPlaces   - ProposedPriceAmountCannotBeNull </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitOfferToAlleDiscountCommandsAsync(@javax.annotation.Nonnull AlleDiscountSubmitCommandRequest alleDiscountSubmitCommandRequest, final ApiCallback<AlleDiscountSubmitCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitOfferToAlleDiscountCommandsValidateBeforeCall(alleDiscountSubmitCommandRequest, _callback);
        Type localVarReturnType = new TypeToken<AlleDiscountSubmitCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for withdrawOfferFromAlleDiscountCommands
     * @param alleDiscountWithdrawCommandRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ParticipationIdMustBeUuid   - InputParticipationIdFieldMissing   - InputParticipationIdDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawOfferFromAlleDiscountCommandsCall(@javax.annotation.Nonnull AlleDiscountWithdrawCommandRequest alleDiscountWithdrawCommandRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alleDiscountWithdrawCommandRequest;

        // create path and map variables
        String localVarPath = "/sale/alle-discount/withdraw-offer-commands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawOfferFromAlleDiscountCommandsValidateBeforeCall(@javax.annotation.Nonnull AlleDiscountWithdrawCommandRequest alleDiscountWithdrawCommandRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alleDiscountWithdrawCommandRequest' is set
        if (alleDiscountWithdrawCommandRequest == null) {
            throw new ApiException("Missing the required parameter 'alleDiscountWithdrawCommandRequest' when calling withdrawOfferFromAlleDiscountCommands(Async)");
        }

        return withdrawOfferFromAlleDiscountCommandsCall(alleDiscountWithdrawCommandRequest, _callback);

    }

    /**
     * Create withdraw offer command
     * Use this resource to create a command for withdrawing an offer from specific campaign. Offer will be withdrawn from the AlleDiscount campaign only if command is processed successfully. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-wycofac-oferte-z-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-withdraw-an-offer-from-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param alleDiscountWithdrawCommandRequest  (required)
     * @return AlleDiscountWithdrawCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ParticipationIdMustBeUuid   - InputParticipationIdFieldMissing   - InputParticipationIdDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public AlleDiscountWithdrawCommandResponse withdrawOfferFromAlleDiscountCommands(@javax.annotation.Nonnull AlleDiscountWithdrawCommandRequest alleDiscountWithdrawCommandRequest) throws ApiException {
        ApiResponse<AlleDiscountWithdrawCommandResponse> localVarResp = withdrawOfferFromAlleDiscountCommandsWithHttpInfo(alleDiscountWithdrawCommandRequest);
        return localVarResp.getData();
    }

    /**
     * Create withdraw offer command
     * Use this resource to create a command for withdrawing an offer from specific campaign. Offer will be withdrawn from the AlleDiscount campaign only if command is processed successfully. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-wycofac-oferte-z-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-withdraw-an-offer-from-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param alleDiscountWithdrawCommandRequest  (required)
     * @return ApiResponse&lt;AlleDiscountWithdrawCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ParticipationIdMustBeUuid   - InputParticipationIdFieldMissing   - InputParticipationIdDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlleDiscountWithdrawCommandResponse> withdrawOfferFromAlleDiscountCommandsWithHttpInfo(@javax.annotation.Nonnull AlleDiscountWithdrawCommandRequest alleDiscountWithdrawCommandRequest) throws ApiException {
        okhttp3.Call localVarCall = withdrawOfferFromAlleDiscountCommandsValidateBeforeCall(alleDiscountWithdrawCommandRequest, null);
        Type localVarReturnType = new TypeToken<AlleDiscountWithdrawCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create withdraw offer command (asynchronously)
     * Use this resource to create a command for withdrawing an offer from specific campaign. Offer will be withdrawn from the AlleDiscount campaign only if command is processed successfully. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-przypisac-oferte-kampanii-GRaj0q6Gwuy#jak-wycofac-oferte-z-kampanii\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/how-to-submit-offers-to-campaigns-AgGjd6EmyH4#how-to-withdraw-an-offer-from-a-campaign\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param alleDiscountWithdrawCommandRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Command has been created. </td><td>  * location - A location to created command (URI). <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request. Example error codes:   - CommandIdNotValidUuid   - ParticipationIdMustBeUuid   - InputParticipationIdFieldMissing   - InputParticipationIdDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Provided UUID is already being used. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawOfferFromAlleDiscountCommandsAsync(@javax.annotation.Nonnull AlleDiscountWithdrawCommandRequest alleDiscountWithdrawCommandRequest, final ApiCallback<AlleDiscountWithdrawCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawOfferFromAlleDiscountCommandsValidateBeforeCall(alleDiscountWithdrawCommandRequest, _callback);
        Type localVarReturnType = new TypeToken<AlleDiscountWithdrawCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
