/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.AuctionDetails;
import pl.wtx.allegro.api.client.model.MaxPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * bid response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class MyBidResponse {
  public static final String SERIALIZED_NAME_MAX_AMOUNT = "maxAmount";
  @SerializedName(SERIALIZED_NAME_MAX_AMOUNT)
  @javax.annotation.Nonnull
  private MaxPrice maxAmount;

  public static final String SERIALIZED_NAME_MINIMAL_PRICE_MET = "minimalPriceMet";
  @SerializedName(SERIALIZED_NAME_MINIMAL_PRICE_MET)
  @javax.annotation.Nullable
  private Boolean minimalPriceMet;

  public static final String SERIALIZED_NAME_HIGH_BIDDER = "highBidder";
  @SerializedName(SERIALIZED_NAME_HIGH_BIDDER)
  @javax.annotation.Nonnull
  private Boolean highBidder;

  public static final String SERIALIZED_NAME_AUCTION = "auction";
  @SerializedName(SERIALIZED_NAME_AUCTION)
  @javax.annotation.Nonnull
  private AuctionDetails auction;

  public MyBidResponse() {
  }

  public MyBidResponse maxAmount(@javax.annotation.Nonnull MaxPrice maxAmount) {
    this.maxAmount = maxAmount;
    return this;
  }

  /**
   * Get maxAmount
   * @return maxAmount
   */
  @javax.annotation.Nonnull
  public MaxPrice getMaxAmount() {
    return maxAmount;
  }

  public void setMaxAmount(@javax.annotation.Nonnull MaxPrice maxAmount) {
    this.maxAmount = maxAmount;
  }


  public MyBidResponse minimalPriceMet(@javax.annotation.Nullable Boolean minimalPriceMet) {
    this.minimalPriceMet = minimalPriceMet;
    return this;
  }

  /**
   * This indicates if the minimal price of the auction has been met or is not set at all. A minimal price can be set by the seller and is the minimum amount the seller is willing to sell the item for. If the highest bid is not higher than the minimal price when the auction ends, the listing ends and the item is not sold.
   * @return minimalPriceMet
   */
  @javax.annotation.Nullable
  public Boolean getMinimalPriceMet() {
    return minimalPriceMet;
  }

  public void setMinimalPriceMet(@javax.annotation.Nullable Boolean minimalPriceMet) {
    this.minimalPriceMet = minimalPriceMet;
  }


  public MyBidResponse highBidder(@javax.annotation.Nonnull Boolean highBidder) {
    this.highBidder = highBidder;
    return this;
  }

  /**
   * Is this bid currently winning?
   * @return highBidder
   */
  @javax.annotation.Nonnull
  public Boolean getHighBidder() {
    return highBidder;
  }

  public void setHighBidder(@javax.annotation.Nonnull Boolean highBidder) {
    this.highBidder = highBidder;
  }


  public MyBidResponse auction(@javax.annotation.Nonnull AuctionDetails auction) {
    this.auction = auction;
    return this;
  }

  /**
   * Get auction
   * @return auction
   */
  @javax.annotation.Nonnull
  public AuctionDetails getAuction() {
    return auction;
  }

  public void setAuction(@javax.annotation.Nonnull AuctionDetails auction) {
    this.auction = auction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MyBidResponse myBidResponse = (MyBidResponse) o;
    return Objects.equals(this.maxAmount, myBidResponse.maxAmount) &&
        Objects.equals(this.minimalPriceMet, myBidResponse.minimalPriceMet) &&
        Objects.equals(this.highBidder, myBidResponse.highBidder) &&
        Objects.equals(this.auction, myBidResponse.auction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxAmount, minimalPriceMet, highBidder, auction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MyBidResponse {\n");
    sb.append("    maxAmount: ").append(toIndentedString(maxAmount)).append("\n");
    sb.append("    minimalPriceMet: ").append(toIndentedString(minimalPriceMet)).append("\n");
    sb.append("    highBidder: ").append(toIndentedString(highBidder)).append("\n");
    sb.append("    auction: ").append(toIndentedString(auction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxAmount");
    openapiFields.add("minimalPriceMet");
    openapiFields.add("highBidder");
    openapiFields.add("auction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("maxAmount");
    openapiRequiredFields.add("highBidder");
    openapiRequiredFields.add("auction");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MyBidResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MyBidResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MyBidResponse is not found in the empty JSON string", MyBidResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MyBidResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MyBidResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MyBidResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `maxAmount`
      MaxPrice.validateJsonElement(jsonObj.get("maxAmount"));
      // validate the required field `auction`
      AuctionDetails.validateJsonElement(jsonObj.get("auction"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MyBidResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MyBidResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MyBidResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MyBidResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MyBidResponse>() {
           @Override
           public void write(JsonWriter out, MyBidResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MyBidResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MyBidResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MyBidResponse
   * @throws IOException if the JSON string is invalid with respect to MyBidResponse
   */
  public static MyBidResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MyBidResponse.class);
  }

  /**
   * Convert an instance of MyBidResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

