/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.allegro.api.client.model.AiCoCreatedContent;
import pl.wtx.allegro.api.client.model.ImageUrl;
import pl.wtx.allegro.api.client.model.OfferRequirements;
import pl.wtx.allegro.api.client.model.ProductCategoryWithPath;
import pl.wtx.allegro.api.client.model.ProductParameterDto;
import pl.wtx.allegro.api.client.model.ProductSafetyDto;
import pl.wtx.allegro.api.client.model.SaleProductCompatibilityList;
import pl.wtx.allegro.api.client.model.SaleProductDtoPublication;
import pl.wtx.allegro.api.client.model.StandardizedDescription;
import pl.wtx.allegro.api.client.model.TecdocSpecification;
import pl.wtx.allegro.api.client.model.TrustedContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * SaleProductDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class SaleProductDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nonnull
  private ProductCategoryWithPath category;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  @javax.annotation.Nullable
  private List<ImageUrl> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private List<ProductParameterDto> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFER_REQUIREMENTS = "offerRequirements";
  @SerializedName(SERIALIZED_NAME_OFFER_REQUIREMENTS)
  @javax.annotation.Nullable
  private OfferRequirements offerRequirements;

  public static final String SERIALIZED_NAME_COMPATIBILITY_LIST = "compatibilityList";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_LIST)
  @javax.annotation.Nullable
  private SaleProductCompatibilityList compatibilityList;

  public static final String SERIALIZED_NAME_TECDOC_SPECIFICATION = "tecdocSpecification";
  @SerializedName(SERIALIZED_NAME_TECDOC_SPECIFICATION)
  @javax.annotation.Nullable
  private TecdocSpecification tecdocSpecification;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private StandardizedDescription description;

  public static final String SERIALIZED_NAME_IS_DRAFT = "isDraft";
  @SerializedName(SERIALIZED_NAME_IS_DRAFT)
  @javax.annotation.Nullable
  private Boolean isDraft;

  public static final String SERIALIZED_NAME_AI_CO_CREATED_CONTENT = "aiCoCreatedContent";
  @SerializedName(SERIALIZED_NAME_AI_CO_CREATED_CONTENT)
  @javax.annotation.Nullable
  private AiCoCreatedContent aiCoCreatedContent;

  public static final String SERIALIZED_NAME_TRUSTED_CONTENT = "trustedContent";
  @SerializedName(SERIALIZED_NAME_TRUSTED_CONTENT)
  @javax.annotation.Nullable
  private TrustedContent trustedContent;

  public static final String SERIALIZED_NAME_HAS_PROTECTED_BRAND = "hasProtectedBrand";
  @SerializedName(SERIALIZED_NAME_HAS_PROTECTED_BRAND)
  @javax.annotation.Nullable
  private Boolean hasProtectedBrand;

  public static final String SERIALIZED_NAME_PUBLICATION = "publication";
  @SerializedName(SERIALIZED_NAME_PUBLICATION)
  @javax.annotation.Nullable
  private SaleProductDtoPublication publication;

  public static final String SERIALIZED_NAME_PRODUCT_SAFETY = "productSafety";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SAFETY)
  @javax.annotation.Nullable
  private ProductSafetyDto productSafety;

  public SaleProductDto() {
  }

  public SaleProductDto id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Product id.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public SaleProductDto name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Product name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public SaleProductDto category(@javax.annotation.Nonnull ProductCategoryWithPath category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public ProductCategoryWithPath getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nonnull ProductCategoryWithPath category) {
    this.category = category;
  }


  public SaleProductDto images(@javax.annotation.Nullable List<ImageUrl> images) {
    this.images = images;
    return this;
  }

  public SaleProductDto addImagesItem(ImageUrl imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * List of product images.
   * @return images
   */
  @javax.annotation.Nullable
  public List<ImageUrl> getImages() {
    return images;
  }

  public void setImages(@javax.annotation.Nullable List<ImageUrl> images) {
    this.images = images;
  }


  public SaleProductDto parameters(@javax.annotation.Nullable List<ProductParameterDto> parameters) {
    this.parameters = parameters;
    return this;
  }

  public SaleProductDto addParametersItem(ProductParameterDto parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * List of product parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<ProductParameterDto> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable List<ProductParameterDto> parameters) {
    this.parameters = parameters;
  }


  public SaleProductDto offerRequirements(@javax.annotation.Nullable OfferRequirements offerRequirements) {
    this.offerRequirements = offerRequirements;
    return this;
  }

  /**
   * Get offerRequirements
   * @return offerRequirements
   */
  @javax.annotation.Nullable
  public OfferRequirements getOfferRequirements() {
    return offerRequirements;
  }

  public void setOfferRequirements(@javax.annotation.Nullable OfferRequirements offerRequirements) {
    this.offerRequirements = offerRequirements;
  }


  public SaleProductDto compatibilityList(@javax.annotation.Nullable SaleProductCompatibilityList compatibilityList) {
    this.compatibilityList = compatibilityList;
    return this;
  }

  /**
   * Get compatibilityList
   * @return compatibilityList
   */
  @javax.annotation.Nullable
  public SaleProductCompatibilityList getCompatibilityList() {
    return compatibilityList;
  }

  public void setCompatibilityList(@javax.annotation.Nullable SaleProductCompatibilityList compatibilityList) {
    this.compatibilityList = compatibilityList;
  }


  public SaleProductDto tecdocSpecification(@javax.annotation.Nullable TecdocSpecification tecdocSpecification) {
    this.tecdocSpecification = tecdocSpecification;
    return this;
  }

  /**
   * Get tecdocSpecification
   * @return tecdocSpecification
   */
  @javax.annotation.Nullable
  public TecdocSpecification getTecdocSpecification() {
    return tecdocSpecification;
  }

  public void setTecdocSpecification(@javax.annotation.Nullable TecdocSpecification tecdocSpecification) {
    this.tecdocSpecification = tecdocSpecification;
  }


  public SaleProductDto description(@javax.annotation.Nullable StandardizedDescription description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public StandardizedDescription getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable StandardizedDescription description) {
    this.description = description;
  }


  public SaleProductDto isDraft(@javax.annotation.Nullable Boolean isDraft) {
    this.isDraft = isDraft;
    return this;
  }

  /**
   * Flag that informs if product is waiting for resolution of basic parameters change proposal.
   * @return isDraft
   */
  @javax.annotation.Nullable
  public Boolean getIsDraft() {
    return isDraft;
  }

  public void setIsDraft(@javax.annotation.Nullable Boolean isDraft) {
    this.isDraft = isDraft;
  }


  public SaleProductDto aiCoCreatedContent(@javax.annotation.Nullable AiCoCreatedContent aiCoCreatedContent) {
    this.aiCoCreatedContent = aiCoCreatedContent;
    return this;
  }

  /**
   * Get aiCoCreatedContent
   * @return aiCoCreatedContent
   */
  @javax.annotation.Nullable
  public AiCoCreatedContent getAiCoCreatedContent() {
    return aiCoCreatedContent;
  }

  public void setAiCoCreatedContent(@javax.annotation.Nullable AiCoCreatedContent aiCoCreatedContent) {
    this.aiCoCreatedContent = aiCoCreatedContent;
  }


  public SaleProductDto trustedContent(@javax.annotation.Nullable TrustedContent trustedContent) {
    this.trustedContent = trustedContent;
    return this;
  }

  /**
   * Get trustedContent
   * @return trustedContent
   */
  @javax.annotation.Nullable
  public TrustedContent getTrustedContent() {
    return trustedContent;
  }

  public void setTrustedContent(@javax.annotation.Nullable TrustedContent trustedContent) {
    this.trustedContent = trustedContent;
  }


  public SaleProductDto hasProtectedBrand(@javax.annotation.Nullable Boolean hasProtectedBrand) {
    this.hasProtectedBrand = hasProtectedBrand;
    return this;
  }

  /**
   * Flag that informs if product is a part of a protected brand&#39;s assortment and its use may be restricted.
   * @return hasProtectedBrand
   */
  @javax.annotation.Nullable
  public Boolean getHasProtectedBrand() {
    return hasProtectedBrand;
  }

  public void setHasProtectedBrand(@javax.annotation.Nullable Boolean hasProtectedBrand) {
    this.hasProtectedBrand = hasProtectedBrand;
  }


  public SaleProductDto publication(@javax.annotation.Nullable SaleProductDtoPublication publication) {
    this.publication = publication;
    return this;
  }

  /**
   * Get publication
   * @return publication
   */
  @javax.annotation.Nullable
  public SaleProductDtoPublication getPublication() {
    return publication;
  }

  public void setPublication(@javax.annotation.Nullable SaleProductDtoPublication publication) {
    this.publication = publication;
  }


  public SaleProductDto productSafety(@javax.annotation.Nullable ProductSafetyDto productSafety) {
    this.productSafety = productSafety;
    return this;
  }

  /**
   * Get productSafety
   * @return productSafety
   */
  @javax.annotation.Nullable
  public ProductSafetyDto getProductSafety() {
    return productSafety;
  }

  public void setProductSafety(@javax.annotation.Nullable ProductSafetyDto productSafety) {
    this.productSafety = productSafety;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleProductDto saleProductDto = (SaleProductDto) o;
    return Objects.equals(this.id, saleProductDto.id) &&
        Objects.equals(this.name, saleProductDto.name) &&
        Objects.equals(this.category, saleProductDto.category) &&
        Objects.equals(this.images, saleProductDto.images) &&
        Objects.equals(this.parameters, saleProductDto.parameters) &&
        Objects.equals(this.offerRequirements, saleProductDto.offerRequirements) &&
        Objects.equals(this.compatibilityList, saleProductDto.compatibilityList) &&
        Objects.equals(this.tecdocSpecification, saleProductDto.tecdocSpecification) &&
        Objects.equals(this.description, saleProductDto.description) &&
        Objects.equals(this.isDraft, saleProductDto.isDraft) &&
        Objects.equals(this.aiCoCreatedContent, saleProductDto.aiCoCreatedContent) &&
        Objects.equals(this.trustedContent, saleProductDto.trustedContent) &&
        Objects.equals(this.hasProtectedBrand, saleProductDto.hasProtectedBrand) &&
        Objects.equals(this.publication, saleProductDto.publication) &&
        Objects.equals(this.productSafety, saleProductDto.productSafety);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, category, images, parameters, offerRequirements, compatibilityList, tecdocSpecification, description, isDraft, aiCoCreatedContent, trustedContent, hasProtectedBrand, publication, productSafety);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleProductDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    offerRequirements: ").append(toIndentedString(offerRequirements)).append("\n");
    sb.append("    compatibilityList: ").append(toIndentedString(compatibilityList)).append("\n");
    sb.append("    tecdocSpecification: ").append(toIndentedString(tecdocSpecification)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDraft: ").append(toIndentedString(isDraft)).append("\n");
    sb.append("    aiCoCreatedContent: ").append(toIndentedString(aiCoCreatedContent)).append("\n");
    sb.append("    trustedContent: ").append(toIndentedString(trustedContent)).append("\n");
    sb.append("    hasProtectedBrand: ").append(toIndentedString(hasProtectedBrand)).append("\n");
    sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
    sb.append("    productSafety: ").append(toIndentedString(productSafety)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("category");
    openapiFields.add("images");
    openapiFields.add("parameters");
    openapiFields.add("offerRequirements");
    openapiFields.add("compatibilityList");
    openapiFields.add("tecdocSpecification");
    openapiFields.add("description");
    openapiFields.add("isDraft");
    openapiFields.add("aiCoCreatedContent");
    openapiFields.add("trustedContent");
    openapiFields.add("hasProtectedBrand");
    openapiFields.add("publication");
    openapiFields.add("productSafety");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("category");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaleProductDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaleProductDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleProductDto is not found in the empty JSON string", SaleProductDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaleProductDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaleProductDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaleProductDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `category`
      ProductCategoryWithPath.validateJsonElement(jsonObj.get("category"));
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            ImageUrl.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            ProductParameterDto.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `offerRequirements`
      if (jsonObj.get("offerRequirements") != null && !jsonObj.get("offerRequirements").isJsonNull()) {
        OfferRequirements.validateJsonElement(jsonObj.get("offerRequirements"));
      }
      // validate the optional field `compatibilityList`
      if (jsonObj.get("compatibilityList") != null && !jsonObj.get("compatibilityList").isJsonNull()) {
        SaleProductCompatibilityList.validateJsonElement(jsonObj.get("compatibilityList"));
      }
      // validate the optional field `tecdocSpecification`
      if (jsonObj.get("tecdocSpecification") != null && !jsonObj.get("tecdocSpecification").isJsonNull()) {
        TecdocSpecification.validateJsonElement(jsonObj.get("tecdocSpecification"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        StandardizedDescription.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `aiCoCreatedContent`
      if (jsonObj.get("aiCoCreatedContent") != null && !jsonObj.get("aiCoCreatedContent").isJsonNull()) {
        AiCoCreatedContent.validateJsonElement(jsonObj.get("aiCoCreatedContent"));
      }
      // validate the optional field `trustedContent`
      if (jsonObj.get("trustedContent") != null && !jsonObj.get("trustedContent").isJsonNull()) {
        TrustedContent.validateJsonElement(jsonObj.get("trustedContent"));
      }
      // validate the optional field `publication`
      if (jsonObj.get("publication") != null && !jsonObj.get("publication").isJsonNull()) {
        SaleProductDtoPublication.validateJsonElement(jsonObj.get("publication"));
      }
      // validate the optional field `productSafety`
      if (jsonObj.get("productSafety") != null && !jsonObj.get("productSafety").isJsonNull()) {
        ProductSafetyDto.validateJsonElement(jsonObj.get("productSafety"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleProductDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleProductDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleProductDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleProductDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleProductDto>() {
           @Override
           public void write(JsonWriter out, SaleProductDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleProductDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaleProductDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaleProductDto
   * @throws IOException if the JSON string is invalid with respect to SaleProductDto
   */
  public static SaleProductDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleProductDto.class);
  }

  /**
   * Convert an instance of SaleProductDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

