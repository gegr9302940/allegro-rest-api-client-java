/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.GetRefundApplications200Response;
import pl.wtx.allegro.api.client.model.RefundClaim;
import pl.wtx.allegro.api.client.model.RefundClaimRequest;
import pl.wtx.allegro.api.client.model.RefundClaimResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommissionRefundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommissionRefundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommissionRefundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelRefundApplication
     * @param claimId Refund application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Refund application was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Refund application has already been processed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRefundApplicationCall(@javax.annotation.Nonnull String claimId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/refund-claims/{claimId}"
            .replace("{" + "claimId" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRefundApplicationValidateBeforeCall(@javax.annotation.Nonnull String claimId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling cancelRefundApplication(Async)");
        }

        return cancelRefundApplicationCall(claimId, _callback);

    }

    /**
     * Cancel a refund application
     * Use this resource to cancel a refund application. This cannot be undone. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-anulowac-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-cancel-sale-commission-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param claimId Refund application ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Refund application was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Refund application has already been processed. </td><td>  -  </td></tr>
     </table>
     */
    public void cancelRefundApplication(@javax.annotation.Nonnull String claimId) throws ApiException {
        cancelRefundApplicationWithHttpInfo(claimId);
    }

    /**
     * Cancel a refund application
     * Use this resource to cancel a refund application. This cannot be undone. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-anulowac-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-cancel-sale-commission-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param claimId Refund application ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Refund application was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Refund application has already been processed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelRefundApplicationWithHttpInfo(@javax.annotation.Nonnull String claimId) throws ApiException {
        okhttp3.Call localVarCall = cancelRefundApplicationValidateBeforeCall(claimId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel a refund application (asynchronously)
     * Use this resource to cancel a refund application. This cannot be undone. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-anulowac-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-cancel-sale-commission-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param claimId Refund application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Refund application was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Refund application has already been processed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRefundApplicationAsync(@javax.annotation.Nonnull String claimId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRefundApplicationValidateBeforeCall(claimId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRefundApplication
     * @param refundClaimRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The refund application was created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRefundApplicationCall(@javax.annotation.Nonnull RefundClaimRequest refundClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refundClaimRequest;

        // create path and map variables
        String localVarPath = "/order/refund-claims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRefundApplicationValidateBeforeCall(@javax.annotation.Nonnull RefundClaimRequest refundClaimRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'refundClaimRequest' is set
        if (refundClaimRequest == null) {
            throw new ApiException("Missing the required parameter 'refundClaimRequest' when calling createRefundApplication(Async)");
        }

        return createRefundApplicationCall(refundClaimRequest, _callback);

    }

    /**
     * Create a refund application
     * Use this resource to create a refund application. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-utworzyc-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-create-a-sale-commission-refund-application\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param refundClaimRequest  (required)
     * @return RefundClaimResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The refund application was created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public RefundClaimResponse createRefundApplication(@javax.annotation.Nonnull RefundClaimRequest refundClaimRequest) throws ApiException {
        ApiResponse<RefundClaimResponse> localVarResp = createRefundApplicationWithHttpInfo(refundClaimRequest);
        return localVarResp.getData();
    }

    /**
     * Create a refund application
     * Use this resource to create a refund application. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-utworzyc-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-create-a-sale-commission-refund-application\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param refundClaimRequest  (required)
     * @return ApiResponse&lt;RefundClaimResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The refund application was created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundClaimResponse> createRefundApplicationWithHttpInfo(@javax.annotation.Nonnull RefundClaimRequest refundClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = createRefundApplicationValidateBeforeCall(refundClaimRequest, null);
        Type localVarReturnType = new TypeToken<RefundClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a refund application (asynchronously)
     * Use this resource to create a refund application. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-utworzyc-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-create-a-sale-commission-refund-application\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param refundClaimRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The refund application was created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRefundApplicationAsync(@javax.annotation.Nonnull RefundClaimRequest refundClaimRequest, final ApiCallback<RefundClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRefundApplicationValidateBeforeCall(refundClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<RefundClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRefundApplication
     * @param claimId Refund application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned refund application. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundApplicationCall(@javax.annotation.Nonnull String claimId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/refund-claims/{claimId}"
            .replace("{" + "claimId" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundApplicationValidateBeforeCall(@javax.annotation.Nonnull String claimId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling getRefundApplication(Async)");
        }

        return getRefundApplicationCall(claimId, _callback);

    }

    /**
     * Get a refund application details
     * Use this resource to get refund application details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-pojedynczy-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-single-sale-commission-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param claimId Refund application ID. (required)
     * @return RefundClaim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned refund application. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public RefundClaim getRefundApplication(@javax.annotation.Nonnull String claimId) throws ApiException {
        ApiResponse<RefundClaim> localVarResp = getRefundApplicationWithHttpInfo(claimId);
        return localVarResp.getData();
    }

    /**
     * Get a refund application details
     * Use this resource to get refund application details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-pojedynczy-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-single-sale-commission-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param claimId Refund application ID. (required)
     * @return ApiResponse&lt;RefundClaim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned refund application. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundClaim> getRefundApplicationWithHttpInfo(@javax.annotation.Nonnull String claimId) throws ApiException {
        okhttp3.Call localVarCall = getRefundApplicationValidateBeforeCall(claimId, null);
        Type localVarReturnType = new TypeToken<RefundClaim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a refund application details (asynchronously)
     * Use this resource to get refund application details. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-pojedynczy-wniosek-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-single-sale-commission-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param claimId Refund application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned refund application. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Refund application not found. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundApplicationAsync(@javax.annotation.Nonnull String claimId, final ApiCallback<RefundClaim> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRefundApplicationValidateBeforeCall(claimId, _callback);
        Type localVarReturnType = new TypeToken<RefundClaim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRefundApplications
     * @param lineItemOfferId ID of the offer associated with the refund application. (optional)
     * @param buyerLogin Login of the buyer that made the purchase associated with the refund application. (optional)
     * @param status Status of the refund application. (optional)
     * @param limit Maximum number of returned refund applications in response. (optional, default to 25)
     * @param offset Index of the first returned refund application from all search results. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of refund applications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundApplicationsCall(@javax.annotation.Nullable String lineItemOfferId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order/refund-claims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lineItemOfferId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineItem.offer.id", lineItemOfferId));
        }

        if (buyerLogin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer.login", buyerLogin));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundApplicationsValidateBeforeCall(@javax.annotation.Nullable String lineItemOfferId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return getRefundApplicationsCall(lineItemOfferId, buyerLogin, status, limit, offset, _callback);

    }

    /**
     * Get a list of refund applications
     * Use this resource to get a list of refund applications based on the provided query parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-utworzonych-wnioskow-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-list-of-sale-commission-refunds\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param lineItemOfferId ID of the offer associated with the refund application. (optional)
     * @param buyerLogin Login of the buyer that made the purchase associated with the refund application. (optional)
     * @param status Status of the refund application. (optional)
     * @param limit Maximum number of returned refund applications in response. (optional, default to 25)
     * @param offset Index of the first returned refund application from all search results. (optional, default to 0)
     * @return GetRefundApplications200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of refund applications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public GetRefundApplications200Response getRefundApplications(@javax.annotation.Nullable String lineItemOfferId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<GetRefundApplications200Response> localVarResp = getRefundApplicationsWithHttpInfo(lineItemOfferId, buyerLogin, status, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a list of refund applications
     * Use this resource to get a list of refund applications based on the provided query parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-utworzonych-wnioskow-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-list-of-sale-commission-refunds\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param lineItemOfferId ID of the offer associated with the refund application. (optional)
     * @param buyerLogin Login of the buyer that made the purchase associated with the refund application. (optional)
     * @param status Status of the refund application. (optional)
     * @param limit Maximum number of returned refund applications in response. (optional, default to 25)
     * @param offset Index of the first returned refund application from all search results. (optional, default to 0)
     * @return ApiResponse&lt;GetRefundApplications200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of refund applications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRefundApplications200Response> getRefundApplicationsWithHttpInfo(@javax.annotation.Nullable String lineItemOfferId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getRefundApplicationsValidateBeforeCall(lineItemOfferId, buyerLogin, status, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetRefundApplications200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of refund applications (asynchronously)
     * Use this resource to get a list of refund applications based on the provided query parameters. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-obslugiwac-zamowienia-GRaj0qyvwtR#jak-pobrac-liste-utworzonych-wnioskow-o-rabat-transakcyjny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/process-orders-PgPMlWDr8Cv#how-to-retrieve-list-of-sale-commission-refunds\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param lineItemOfferId ID of the offer associated with the refund application. (optional)
     * @param buyerLogin Login of the buyer that made the purchase associated with the refund application. (optional)
     * @param status Status of the refund application. (optional)
     * @param limit Maximum number of returned refund applications in response. (optional, default to 25)
     * @param offset Index of the first returned refund application from all search results. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of refund applications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Semantically incorrect request or provided conditions not correct. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Refund application does not belong to you. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundApplicationsAsync(@javax.annotation.Nullable String lineItemOfferId, @javax.annotation.Nullable String buyerLogin, @javax.annotation.Nullable String status, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<GetRefundApplications200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRefundApplicationsValidateBeforeCall(lineItemOfferId, buyerLogin, status, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetRefundApplications200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
