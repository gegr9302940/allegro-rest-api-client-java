/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.Answer;
import pl.wtx.allegro.api.client.model.Order;
import pl.wtx.allegro.api.client.model.Rates;
import pl.wtx.allegro.api.client.model.Removal;
import pl.wtx.allegro.api.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * UserRating
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class UserRating {
  public static final String SERIALIZED_NAME_ANSWER = "answer";
  @SerializedName(SERIALIZED_NAME_ANSWER)
  @javax.annotation.Nullable
  private Answer answer;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  @javax.annotation.Nonnull
  private User buyer;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private String createdAt;

  public static final String SERIALIZED_NAME_EDITED_AT = "editedAt";
  @SerializedName(SERIALIZED_NAME_EDITED_AT)
  @javax.annotation.Nullable
  private String editedAt;

  public static final String SERIALIZED_NAME_EXCLUDED_FROM_AVERAGE_RATES = "excludedFromAverageRates";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_FROM_AVERAGE_RATES)
  @javax.annotation.Nullable
  private Boolean excludedFromAverageRates;

  public static final String SERIALIZED_NAME_EXCLUDED_FROM_AVERAGE_RATES_REASON = "excludedFromAverageRatesReason";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_FROM_AVERAGE_RATES_REASON)
  @javax.annotation.Nullable
  private String excludedFromAverageRatesReason;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_LAST_CHANGED_AT = "lastChangedAt";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGED_AT)
  @javax.annotation.Nullable
  private String lastChangedAt;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  @javax.annotation.Nullable
  private Order order;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  @javax.annotation.Nullable
  private Rates rates;

  public static final String SERIALIZED_NAME_RECOMMENDED = "recommended";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED)
  @javax.annotation.Nonnull
  private Boolean recommended;

  public static final String SERIALIZED_NAME_REMOVAL = "removal";
  @SerializedName(SERIALIZED_NAME_REMOVAL)
  @javax.annotation.Nullable
  private Removal removal;

  public UserRating() {
  }

  public UserRating answer(@javax.annotation.Nullable Answer answer) {
    this.answer = answer;
    return this;
  }

  /**
   * Get answer
   * @return answer
   */
  @javax.annotation.Nullable
  public Answer getAnswer() {
    return answer;
  }

  public void setAnswer(@javax.annotation.Nullable Answer answer) {
    this.answer = answer;
  }


  public UserRating buyer(@javax.annotation.Nonnull User buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nonnull
  public User getBuyer() {
    return buyer;
  }

  public void setBuyer(@javax.annotation.Nonnull User buyer) {
    this.buyer = buyer;
  }


  public UserRating comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Buyer&#39;s text comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public UserRating createdAt(@javax.annotation.Nonnull String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation datetime in ISO 8601 format
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull String createdAt) {
    this.createdAt = createdAt;
  }


  public UserRating editedAt(@javax.annotation.Nullable String editedAt) {
    this.editedAt = editedAt;
    return this;
  }

  /**
   * Edition datetime in ISO 8601 format
   * @return editedAt
   */
  @javax.annotation.Nullable
  public String getEditedAt() {
    return editedAt;
  }

  public void setEditedAt(@javax.annotation.Nullable String editedAt) {
    this.editedAt = editedAt;
  }


  public UserRating excludedFromAverageRates(@javax.annotation.Nullable Boolean excludedFromAverageRates) {
    this.excludedFromAverageRates = excludedFromAverageRates;
    return this;
  }

  /**
   * If true this rating was not included in calculating average user rates
   * @return excludedFromAverageRates
   */
  @javax.annotation.Nullable
  public Boolean getExcludedFromAverageRates() {
    return excludedFromAverageRates;
  }

  public void setExcludedFromAverageRates(@javax.annotation.Nullable Boolean excludedFromAverageRates) {
    this.excludedFromAverageRates = excludedFromAverageRates;
  }


  public UserRating excludedFromAverageRatesReason(@javax.annotation.Nullable String excludedFromAverageRatesReason) {
    this.excludedFromAverageRatesReason = excludedFromAverageRatesReason;
    return this;
  }

  /**
   * The reason why the rating was excluded from calculating average user rates. The message is translated based on the value of the \&quot;Accept-Language\&quot; header and exists only when the rating was excluded.
   * @return excludedFromAverageRatesReason
   */
  @javax.annotation.Nullable
  public String getExcludedFromAverageRatesReason() {
    return excludedFromAverageRatesReason;
  }

  public void setExcludedFromAverageRatesReason(@javax.annotation.Nullable String excludedFromAverageRatesReason) {
    this.excludedFromAverageRatesReason = excludedFromAverageRatesReason;
  }


  public UserRating id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Rating id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public UserRating lastChangedAt(@javax.annotation.Nullable String lastChangedAt) {
    this.lastChangedAt = lastChangedAt;
    return this;
  }

  /**
   * Last change (creation or latest edition) datetime in ISO 8601 format
   * @return lastChangedAt
   */
  @javax.annotation.Nullable
  public String getLastChangedAt() {
    return lastChangedAt;
  }

  public void setLastChangedAt(@javax.annotation.Nullable String lastChangedAt) {
    this.lastChangedAt = lastChangedAt;
  }


  public UserRating order(@javax.annotation.Nullable Order order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Order getOrder() {
    return order;
  }

  public void setOrder(@javax.annotation.Nullable Order order) {
    this.order = order;
  }


  public UserRating rates(@javax.annotation.Nullable Rates rates) {
    this.rates = rates;
    return this;
  }

  /**
   * Get rates
   * @return rates
   */
  @javax.annotation.Nullable
  public Rates getRates() {
    return rates;
  }

  public void setRates(@javax.annotation.Nullable Rates rates) {
    this.rates = rates;
  }


  public UserRating recommended(@javax.annotation.Nonnull Boolean recommended) {
    this.recommended = recommended;
    return this;
  }

  /**
   * Whether buyer recommends the order
   * @return recommended
   */
  @javax.annotation.Nonnull
  public Boolean getRecommended() {
    return recommended;
  }

  public void setRecommended(@javax.annotation.Nonnull Boolean recommended) {
    this.recommended = recommended;
  }


  public UserRating removal(@javax.annotation.Nullable Removal removal) {
    this.removal = removal;
    return this;
  }

  /**
   * Get removal
   * @return removal
   */
  @javax.annotation.Nullable
  public Removal getRemoval() {
    return removal;
  }

  public void setRemoval(@javax.annotation.Nullable Removal removal) {
    this.removal = removal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserRating userRating = (UserRating) o;
    return Objects.equals(this.answer, userRating.answer) &&
        Objects.equals(this.buyer, userRating.buyer) &&
        Objects.equals(this.comment, userRating.comment) &&
        Objects.equals(this.createdAt, userRating.createdAt) &&
        Objects.equals(this.editedAt, userRating.editedAt) &&
        Objects.equals(this.excludedFromAverageRates, userRating.excludedFromAverageRates) &&
        Objects.equals(this.excludedFromAverageRatesReason, userRating.excludedFromAverageRatesReason) &&
        Objects.equals(this.id, userRating.id) &&
        Objects.equals(this.lastChangedAt, userRating.lastChangedAt) &&
        Objects.equals(this.order, userRating.order) &&
        Objects.equals(this.rates, userRating.rates) &&
        Objects.equals(this.recommended, userRating.recommended) &&
        Objects.equals(this.removal, userRating.removal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answer, buyer, comment, createdAt, editedAt, excludedFromAverageRates, excludedFromAverageRatesReason, id, lastChangedAt, order, rates, recommended, removal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserRating {\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    editedAt: ").append(toIndentedString(editedAt)).append("\n");
    sb.append("    excludedFromAverageRates: ").append(toIndentedString(excludedFromAverageRates)).append("\n");
    sb.append("    excludedFromAverageRatesReason: ").append(toIndentedString(excludedFromAverageRatesReason)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastChangedAt: ").append(toIndentedString(lastChangedAt)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    recommended: ").append(toIndentedString(recommended)).append("\n");
    sb.append("    removal: ").append(toIndentedString(removal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answer");
    openapiFields.add("buyer");
    openapiFields.add("comment");
    openapiFields.add("createdAt");
    openapiFields.add("editedAt");
    openapiFields.add("excludedFromAverageRates");
    openapiFields.add("excludedFromAverageRatesReason");
    openapiFields.add("id");
    openapiFields.add("lastChangedAt");
    openapiFields.add("order");
    openapiFields.add("rates");
    openapiFields.add("recommended");
    openapiFields.add("removal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("buyer");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("recommended");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserRating is not found in the empty JSON string", UserRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserRating.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `answer`
      if (jsonObj.get("answer") != null && !jsonObj.get("answer").isJsonNull()) {
        Answer.validateJsonElement(jsonObj.get("answer"));
      }
      // validate the required field `buyer`
      User.validateJsonElement(jsonObj.get("buyer"));
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("editedAt") != null && !jsonObj.get("editedAt").isJsonNull()) && !jsonObj.get("editedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editedAt").toString()));
      }
      if ((jsonObj.get("excludedFromAverageRatesReason") != null && !jsonObj.get("excludedFromAverageRatesReason").isJsonNull()) && !jsonObj.get("excludedFromAverageRatesReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedFromAverageRatesReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedFromAverageRatesReason").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastChangedAt") != null && !jsonObj.get("lastChangedAt").isJsonNull()) && !jsonObj.get("lastChangedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastChangedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastChangedAt").toString()));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        Order.validateJsonElement(jsonObj.get("order"));
      }
      // validate the optional field `rates`
      if (jsonObj.get("rates") != null && !jsonObj.get("rates").isJsonNull()) {
        Rates.validateJsonElement(jsonObj.get("rates"));
      }
      // validate the optional field `removal`
      if (jsonObj.get("removal") != null && !jsonObj.get("removal").isJsonNull()) {
        Removal.validateJsonElement(jsonObj.get("removal"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserRating.class));

       return (TypeAdapter<T>) new TypeAdapter<UserRating>() {
           @Override
           public void write(JsonWriter out, UserRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserRating
   * @throws IOException if the JSON string is invalid with respect to UserRating
   */
  public static UserRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserRating.class);
  }

  /**
   * Convert an instance of UserRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

