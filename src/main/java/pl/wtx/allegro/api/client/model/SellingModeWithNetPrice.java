/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.BuyNowPrice;
import pl.wtx.allegro.api.client.model.MinimalPrice;
import pl.wtx.allegro.api.client.model.NetPrice;
import pl.wtx.allegro.api.client.model.SellingModeFormat;
import pl.wtx.allegro.api.client.model.StartingPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Information on the offer&#39;s selling mode.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class SellingModeWithNetPrice {
  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private SellingModeFormat format;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private BuyNowPrice price;

  public static final String SERIALIZED_NAME_MINIMAL_PRICE = "minimalPrice";
  @SerializedName(SERIALIZED_NAME_MINIMAL_PRICE)
  @javax.annotation.Nullable
  private MinimalPrice minimalPrice;

  public static final String SERIALIZED_NAME_STARTING_PRICE = "startingPrice";
  @SerializedName(SERIALIZED_NAME_STARTING_PRICE)
  @javax.annotation.Nullable
  private StartingPrice startingPrice;

  public static final String SERIALIZED_NAME_NET_PRICE = "netPrice";
  @SerializedName(SERIALIZED_NAME_NET_PRICE)
  @javax.annotation.Nullable
  private NetPrice netPrice;

  public SellingModeWithNetPrice() {
  }

  public SellingModeWithNetPrice format(@javax.annotation.Nullable SellingModeFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public SellingModeFormat getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable SellingModeFormat format) {
    this.format = format;
  }


  public SellingModeWithNetPrice price(@javax.annotation.Nullable BuyNowPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public BuyNowPrice getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable BuyNowPrice price) {
    this.price = price;
  }


  public SellingModeWithNetPrice minimalPrice(@javax.annotation.Nullable MinimalPrice minimalPrice) {
    this.minimalPrice = minimalPrice;
    return this;
  }

  /**
   * Get minimalPrice
   * @return minimalPrice
   */
  @javax.annotation.Nullable
  public MinimalPrice getMinimalPrice() {
    return minimalPrice;
  }

  public void setMinimalPrice(@javax.annotation.Nullable MinimalPrice minimalPrice) {
    this.minimalPrice = minimalPrice;
  }


  public SellingModeWithNetPrice startingPrice(@javax.annotation.Nullable StartingPrice startingPrice) {
    this.startingPrice = startingPrice;
    return this;
  }

  /**
   * Get startingPrice
   * @return startingPrice
   */
  @javax.annotation.Nullable
  public StartingPrice getStartingPrice() {
    return startingPrice;
  }

  public void setStartingPrice(@javax.annotation.Nullable StartingPrice startingPrice) {
    this.startingPrice = startingPrice;
  }


  public SellingModeWithNetPrice netPrice(@javax.annotation.Nullable NetPrice netPrice) {
    this.netPrice = netPrice;
    return this;
  }

  /**
   * Get netPrice
   * @return netPrice
   */
  @javax.annotation.Nullable
  public NetPrice getNetPrice() {
    return netPrice;
  }

  public void setNetPrice(@javax.annotation.Nullable NetPrice netPrice) {
    this.netPrice = netPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellingModeWithNetPrice sellingModeWithNetPrice = (SellingModeWithNetPrice) o;
    return Objects.equals(this.format, sellingModeWithNetPrice.format) &&
        Objects.equals(this.price, sellingModeWithNetPrice.price) &&
        Objects.equals(this.minimalPrice, sellingModeWithNetPrice.minimalPrice) &&
        Objects.equals(this.startingPrice, sellingModeWithNetPrice.startingPrice) &&
        Objects.equals(this.netPrice, sellingModeWithNetPrice.netPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, price, minimalPrice, startingPrice, netPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellingModeWithNetPrice {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    minimalPrice: ").append(toIndentedString(minimalPrice)).append("\n");
    sb.append("    startingPrice: ").append(toIndentedString(startingPrice)).append("\n");
    sb.append("    netPrice: ").append(toIndentedString(netPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("format");
    openapiFields.add("price");
    openapiFields.add("minimalPrice");
    openapiFields.add("startingPrice");
    openapiFields.add("netPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SellingModeWithNetPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SellingModeWithNetPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SellingModeWithNetPrice is not found in the empty JSON string", SellingModeWithNetPrice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SellingModeWithNetPrice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SellingModeWithNetPrice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        SellingModeFormat.validateJsonElement(jsonObj.get("format"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        BuyNowPrice.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `minimalPrice`
      if (jsonObj.get("minimalPrice") != null && !jsonObj.get("minimalPrice").isJsonNull()) {
        MinimalPrice.validateJsonElement(jsonObj.get("minimalPrice"));
      }
      // validate the optional field `startingPrice`
      if (jsonObj.get("startingPrice") != null && !jsonObj.get("startingPrice").isJsonNull()) {
        StartingPrice.validateJsonElement(jsonObj.get("startingPrice"));
      }
      // validate the optional field `netPrice`
      if (jsonObj.get("netPrice") != null && !jsonObj.get("netPrice").isJsonNull()) {
        NetPrice.validateJsonElement(jsonObj.get("netPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SellingModeWithNetPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SellingModeWithNetPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SellingModeWithNetPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SellingModeWithNetPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<SellingModeWithNetPrice>() {
           @Override
           public void write(JsonWriter out, SellingModeWithNetPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SellingModeWithNetPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SellingModeWithNetPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SellingModeWithNetPrice
   * @throws IOException if the JSON string is invalid with respect to SellingModeWithNetPrice
   */
  public static SellingModeWithNetPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SellingModeWithNetPrice.class);
  }

  /**
   * Convert an instance of SellingModeWithNetPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

