/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.TaxExemption;
import pl.wtx.allegro.api.client.model.TaxRate;
import pl.wtx.allegro.api.client.model.TaxSubject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CategoryTaxSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CategoryTaxSettings {
  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  @javax.annotation.Nullable
  private List<TaxSubject> subjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  @javax.annotation.Nullable
  private List<TaxRate> rates = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXEMPTIONS = "exemptions";
  @SerializedName(SERIALIZED_NAME_EXEMPTIONS)
  @javax.annotation.Nullable
  private List<TaxExemption> exemptions = new ArrayList<>();

  public CategoryTaxSettings() {
  }

  public CategoryTaxSettings subjects(@javax.annotation.Nullable List<TaxSubject> subjects) {
    this.subjects = subjects;
    return this;
  }

  public CategoryTaxSettings addSubjectsItem(TaxSubject subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * A list of tax subjects.
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<TaxSubject> getSubjects() {
    return subjects;
  }

  public void setSubjects(@javax.annotation.Nullable List<TaxSubject> subjects) {
    this.subjects = subjects;
  }


  public CategoryTaxSettings rates(@javax.annotation.Nullable List<TaxRate> rates) {
    this.rates = rates;
    return this;
  }

  public CategoryTaxSettings addRatesItem(TaxRate ratesItem) {
    if (this.rates == null) {
      this.rates = new ArrayList<>();
    }
    this.rates.add(ratesItem);
    return this;
  }

  /**
   * A list of tax rates.
   * @return rates
   */
  @javax.annotation.Nullable
  public List<TaxRate> getRates() {
    return rates;
  }

  public void setRates(@javax.annotation.Nullable List<TaxRate> rates) {
    this.rates = rates;
  }


  public CategoryTaxSettings exemptions(@javax.annotation.Nullable List<TaxExemption> exemptions) {
    this.exemptions = exemptions;
    return this;
  }

  public CategoryTaxSettings addExemptionsItem(TaxExemption exemptionsItem) {
    if (this.exemptions == null) {
      this.exemptions = new ArrayList<>();
    }
    this.exemptions.add(exemptionsItem);
    return this;
  }

  /**
   * A list of tax exemptions.
   * @return exemptions
   */
  @javax.annotation.Nullable
  public List<TaxExemption> getExemptions() {
    return exemptions;
  }

  public void setExemptions(@javax.annotation.Nullable List<TaxExemption> exemptions) {
    this.exemptions = exemptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryTaxSettings categoryTaxSettings = (CategoryTaxSettings) o;
    return Objects.equals(this.subjects, categoryTaxSettings.subjects) &&
        Objects.equals(this.rates, categoryTaxSettings.rates) &&
        Objects.equals(this.exemptions, categoryTaxSettings.exemptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subjects, rates, exemptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryTaxSettings {\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    exemptions: ").append(toIndentedString(exemptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subjects");
    openapiFields.add("rates");
    openapiFields.add("exemptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryTaxSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryTaxSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryTaxSettings is not found in the empty JSON string", CategoryTaxSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryTaxSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryTaxSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull()) {
        JsonArray jsonArraysubjects = jsonObj.getAsJsonArray("subjects");
        if (jsonArraysubjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
          }

          // validate the optional field `subjects` (array)
          for (int i = 0; i < jsonArraysubjects.size(); i++) {
            TaxSubject.validateJsonElement(jsonArraysubjects.get(i));
          };
        }
      }
      if (jsonObj.get("rates") != null && !jsonObj.get("rates").isJsonNull()) {
        JsonArray jsonArrayrates = jsonObj.getAsJsonArray("rates");
        if (jsonArrayrates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rates` to be an array in the JSON string but got `%s`", jsonObj.get("rates").toString()));
          }

          // validate the optional field `rates` (array)
          for (int i = 0; i < jsonArrayrates.size(); i++) {
            TaxRate.validateJsonElement(jsonArrayrates.get(i));
          };
        }
      }
      if (jsonObj.get("exemptions") != null && !jsonObj.get("exemptions").isJsonNull()) {
        JsonArray jsonArrayexemptions = jsonObj.getAsJsonArray("exemptions");
        if (jsonArrayexemptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exemptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exemptions` to be an array in the JSON string but got `%s`", jsonObj.get("exemptions").toString()));
          }

          // validate the optional field `exemptions` (array)
          for (int i = 0; i < jsonArrayexemptions.size(); i++) {
            TaxExemption.validateJsonElement(jsonArrayexemptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryTaxSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryTaxSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryTaxSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryTaxSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryTaxSettings>() {
           @Override
           public void write(JsonWriter out, CategoryTaxSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryTaxSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryTaxSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryTaxSettings
   * @throws IOException if the JSON string is invalid with respect to CategoryTaxSettings
   */
  public static CategoryTaxSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryTaxSettings.class);
  }

  /**
   * Convert an instance of CategoryTaxSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

