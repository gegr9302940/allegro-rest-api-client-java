/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.UserRatingSummaryResponseV2NotRecommended;
import pl.wtx.allegro.api.client.model.UserRatingSummaryResponseV2Recommended;
import pl.wtx.allegro.api.client.model.UserRatingSummaryResponseV2Statistics;
import pl.wtx.allegro.api.client.model.UserRatingSummaryResponseV2User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * UserRatingSummaryResponseV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class UserRatingSummaryResponseV2 {
  public static final String SERIALIZED_NAME_RECOMMENDED = "recommended";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED)
  @javax.annotation.Nullable
  private UserRatingSummaryResponseV2Recommended recommended;

  public static final String SERIALIZED_NAME_NOT_RECOMMENDED = "notRecommended";
  @SerializedName(SERIALIZED_NAME_NOT_RECOMMENDED)
  @javax.annotation.Nullable
  private UserRatingSummaryResponseV2NotRecommended notRecommended;

  public static final String SERIALIZED_NAME_RECOMMENDED_PERCENTAGE = "recommendedPercentage";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_PERCENTAGE)
  @javax.annotation.Nullable
  private String recommendedPercentage;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  @javax.annotation.Nullable
  private UserRatingSummaryResponseV2Statistics statistics;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nonnull
  private UserRatingSummaryResponseV2User user;

  public UserRatingSummaryResponseV2() {
  }

  public UserRatingSummaryResponseV2 recommended(@javax.annotation.Nullable UserRatingSummaryResponseV2Recommended recommended) {
    this.recommended = recommended;
    return this;
  }

  /**
   * Get recommended
   * @return recommended
   */
  @javax.annotation.Nullable
  public UserRatingSummaryResponseV2Recommended getRecommended() {
    return recommended;
  }

  public void setRecommended(@javax.annotation.Nullable UserRatingSummaryResponseV2Recommended recommended) {
    this.recommended = recommended;
  }


  public UserRatingSummaryResponseV2 notRecommended(@javax.annotation.Nullable UserRatingSummaryResponseV2NotRecommended notRecommended) {
    this.notRecommended = notRecommended;
    return this;
  }

  /**
   * Get notRecommended
   * @return notRecommended
   */
  @javax.annotation.Nullable
  public UserRatingSummaryResponseV2NotRecommended getNotRecommended() {
    return notRecommended;
  }

  public void setNotRecommended(@javax.annotation.Nullable UserRatingSummaryResponseV2NotRecommended notRecommended) {
    this.notRecommended = notRecommended;
  }


  public UserRatingSummaryResponseV2 recommendedPercentage(@javax.annotation.Nullable String recommendedPercentage) {
    this.recommendedPercentage = recommendedPercentage;
    return this;
  }

  /**
   * Percentage of unique buyers recommending the seller.
   * @return recommendedPercentage
   */
  @javax.annotation.Nullable
  public String getRecommendedPercentage() {
    return recommendedPercentage;
  }

  public void setRecommendedPercentage(@javax.annotation.Nullable String recommendedPercentage) {
    this.recommendedPercentage = recommendedPercentage;
  }


  public UserRatingSummaryResponseV2 statistics(@javax.annotation.Nullable UserRatingSummaryResponseV2Statistics statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public UserRatingSummaryResponseV2Statistics getStatistics() {
    return statistics;
  }

  public void setStatistics(@javax.annotation.Nullable UserRatingSummaryResponseV2Statistics statistics) {
    this.statistics = statistics;
  }


  public UserRatingSummaryResponseV2 user(@javax.annotation.Nonnull UserRatingSummaryResponseV2User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public UserRatingSummaryResponseV2User getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nonnull UserRatingSummaryResponseV2User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserRatingSummaryResponseV2 userRatingSummaryResponseV2 = (UserRatingSummaryResponseV2) o;
    return Objects.equals(this.recommended, userRatingSummaryResponseV2.recommended) &&
        Objects.equals(this.notRecommended, userRatingSummaryResponseV2.notRecommended) &&
        Objects.equals(this.recommendedPercentage, userRatingSummaryResponseV2.recommendedPercentage) &&
        Objects.equals(this.statistics, userRatingSummaryResponseV2.statistics) &&
        Objects.equals(this.user, userRatingSummaryResponseV2.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recommended, notRecommended, recommendedPercentage, statistics, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserRatingSummaryResponseV2 {\n");
    sb.append("    recommended: ").append(toIndentedString(recommended)).append("\n");
    sb.append("    notRecommended: ").append(toIndentedString(notRecommended)).append("\n");
    sb.append("    recommendedPercentage: ").append(toIndentedString(recommendedPercentage)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recommended");
    openapiFields.add("notRecommended");
    openapiFields.add("recommendedPercentage");
    openapiFields.add("statistics");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserRatingSummaryResponseV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserRatingSummaryResponseV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserRatingSummaryResponseV2 is not found in the empty JSON string", UserRatingSummaryResponseV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserRatingSummaryResponseV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserRatingSummaryResponseV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserRatingSummaryResponseV2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `recommended`
      if (jsonObj.get("recommended") != null && !jsonObj.get("recommended").isJsonNull()) {
        UserRatingSummaryResponseV2Recommended.validateJsonElement(jsonObj.get("recommended"));
      }
      // validate the optional field `notRecommended`
      if (jsonObj.get("notRecommended") != null && !jsonObj.get("notRecommended").isJsonNull()) {
        UserRatingSummaryResponseV2NotRecommended.validateJsonElement(jsonObj.get("notRecommended"));
      }
      if ((jsonObj.get("recommendedPercentage") != null && !jsonObj.get("recommendedPercentage").isJsonNull()) && !jsonObj.get("recommendedPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedPercentage").toString()));
      }
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        UserRatingSummaryResponseV2Statistics.validateJsonElement(jsonObj.get("statistics"));
      }
      // validate the required field `user`
      UserRatingSummaryResponseV2User.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserRatingSummaryResponseV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserRatingSummaryResponseV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserRatingSummaryResponseV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserRatingSummaryResponseV2.class));

       return (TypeAdapter<T>) new TypeAdapter<UserRatingSummaryResponseV2>() {
           @Override
           public void write(JsonWriter out, UserRatingSummaryResponseV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserRatingSummaryResponseV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserRatingSummaryResponseV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserRatingSummaryResponseV2
   * @throws IOException if the JSON string is invalid with respect to UserRatingSummaryResponseV2
   */
  public static UserRatingSummaryResponseV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserRatingSummaryResponseV2.class);
  }

  /**
   * Convert an instance of UserRatingSummaryResponseV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

