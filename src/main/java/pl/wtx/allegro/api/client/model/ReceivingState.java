/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.ReceivingEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ReceivingState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ReceivingState {
  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  /**
   * Stage of Advance Ship Notice receiving
   */
  @JsonAdapter(StageEnum.Adapter.class)
  public enum StageEnum {
    IN_PROGRESS("IN_PROGRESS"),
    
    COMPLETED("COMPLETED");

    private String value;

    StageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StageEnum fromValue(String value) {
      for (StageEnum b : StageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  @javax.annotation.Nullable
  private StageEnum stage;

  public static final String SERIALIZED_NAME_DISPLAY_NUMBER = "displayNumber";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NUMBER)
  @javax.annotation.Nullable
  private String displayNumber;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  @javax.annotation.Nullable
  private List<ReceivingEntry> content = new ArrayList<>();

  public ReceivingState() {
  }

  public ReceivingState updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time when report was updated last time. Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ReceivingState stage(@javax.annotation.Nullable StageEnum stage) {
    this.stage = stage;
    return this;
  }

  /**
   * Stage of Advance Ship Notice receiving
   * @return stage
   */
  @javax.annotation.Nullable
  public StageEnum getStage() {
    return stage;
  }

  public void setStage(@javax.annotation.Nullable StageEnum stage) {
    this.stage = stage;
  }


  public ReceivingState displayNumber(@javax.annotation.Nullable String displayNumber) {
    this.displayNumber = displayNumber;
    return this;
  }

  /**
   * A human friendly identifier of Advance Ship Notice.
   * @return displayNumber
   */
  @javax.annotation.Nullable
  public String getDisplayNumber() {
    return displayNumber;
  }

  public void setDisplayNumber(@javax.annotation.Nullable String displayNumber) {
    this.displayNumber = displayNumber;
  }


  public ReceivingState content(@javax.annotation.Nullable List<ReceivingEntry> content) {
    this.content = content;
    return this;
  }

  public ReceivingState addContentItem(ReceivingEntry contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<>();
    }
    this.content.add(contentItem);
    return this;
  }

  /**
   * The list of products with receiving status.
   * @return content
   */
  @javax.annotation.Nullable
  public List<ReceivingEntry> getContent() {
    return content;
  }

  public void setContent(@javax.annotation.Nullable List<ReceivingEntry> content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceivingState receivingState = (ReceivingState) o;
    return Objects.equals(this.updatedAt, receivingState.updatedAt) &&
        Objects.equals(this.stage, receivingState.stage) &&
        Objects.equals(this.displayNumber, receivingState.displayNumber) &&
        Objects.equals(this.content, receivingState.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updatedAt, stage, displayNumber, content);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceivingState {\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    displayNumber: ").append(toIndentedString(displayNumber)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("updatedAt");
    openapiFields.add("stage");
    openapiFields.add("displayNumber");
    openapiFields.add("content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceivingState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceivingState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceivingState is not found in the empty JSON string", ReceivingState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceivingState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceivingState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) && !jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      // validate the optional field `stage`
      if (jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) {
        StageEnum.validateJsonElement(jsonObj.get("stage"));
      }
      if ((jsonObj.get("displayNumber") != null && !jsonObj.get("displayNumber").isJsonNull()) && !jsonObj.get("displayNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayNumber").toString()));
      }
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        JsonArray jsonArraycontent = jsonObj.getAsJsonArray("content");
        if (jsonArraycontent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("content").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `content` to be an array in the JSON string but got `%s`", jsonObj.get("content").toString()));
          }

          // validate the optional field `content` (array)
          for (int i = 0; i < jsonArraycontent.size(); i++) {
            ReceivingEntry.validateJsonElement(jsonArraycontent.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceivingState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceivingState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceivingState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceivingState.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceivingState>() {
           @Override
           public void write(JsonWriter out, ReceivingState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceivingState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceivingState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceivingState
   * @throws IOException if the JSON string is invalid with respect to ReceivingState
   */
  public static ReceivingState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceivingState.class);
  }

  /**
   * Convert an instance of ReceivingState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

