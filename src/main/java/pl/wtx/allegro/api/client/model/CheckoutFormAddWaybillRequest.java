/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.CheckoutFormAddWaybillRequestLineItemsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * CheckoutFormAddWaybillRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckoutFormAddWaybillRequest {
  public static final String SERIALIZED_NAME_CARRIER_ID = "carrierId";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  @javax.annotation.Nonnull
  private String carrierId;

  public static final String SERIALIZED_NAME_WAYBILL = "waybill";
  @SerializedName(SERIALIZED_NAME_WAYBILL)
  @javax.annotation.Nonnull
  private String waybill;

  public static final String SERIALIZED_NAME_CARRIER_NAME = "carrierName";
  @SerializedName(SERIALIZED_NAME_CARRIER_NAME)
  @javax.annotation.Nullable
  private String carrierName;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  @javax.annotation.Nullable
  private List<CheckoutFormAddWaybillRequestLineItemsInner> lineItems = new ArrayList<>();

  public CheckoutFormAddWaybillRequest() {
  }

  public CheckoutFormAddWaybillRequest carrierId(@javax.annotation.Nonnull String carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  /**
   * Supported carriers are available via &lt;a href&#x3D;\&quot;#operation/getOrdersCarriersUsingGET\&quot; target&#x3D;\&quot;_blank\&quot;&gt;shipping carriers resource&lt;/a&gt;.
   * @return carrierId
   */
  @javax.annotation.Nonnull
  public String getCarrierId() {
    return carrierId;
  }

  public void setCarrierId(@javax.annotation.Nonnull String carrierId) {
    this.carrierId = carrierId;
  }


  public CheckoutFormAddWaybillRequest waybill(@javax.annotation.Nonnull String waybill) {
    this.waybill = waybill;
    return this;
  }

  /**
   * Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters.
   * @return waybill
   */
  @javax.annotation.Nonnull
  public String getWaybill() {
    return waybill;
  }

  public void setWaybill(@javax.annotation.Nonnull String waybill) {
    this.waybill = waybill;
  }


  public CheckoutFormAddWaybillRequest carrierName(@javax.annotation.Nullable String carrierName) {
    this.carrierName = carrierName;
    return this;
  }

  /**
   * Carrier name to be provided only if carrierId is OTHER, otherwise itâ€™s ignored. Must be no longer than 30 characters.
   * @return carrierName
   */
  @javax.annotation.Nullable
  public String getCarrierName() {
    return carrierName;
  }

  public void setCarrierName(@javax.annotation.Nullable String carrierName) {
    this.carrierName = carrierName;
  }


  public CheckoutFormAddWaybillRequest lineItems(@javax.annotation.Nullable List<CheckoutFormAddWaybillRequestLineItemsInner> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public CheckoutFormAddWaybillRequest addLineItemsItem(CheckoutFormAddWaybillRequestLineItemsInner lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * List of order line items. They must be from the order specified in the path parameter. When list is not provided or it is empty it means that every item from an order is included in shipment.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<CheckoutFormAddWaybillRequestLineItemsInner> getLineItems() {
    return lineItems;
  }

  public void setLineItems(@javax.annotation.Nullable List<CheckoutFormAddWaybillRequestLineItemsInner> lineItems) {
    this.lineItems = lineItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutFormAddWaybillRequest checkoutFormAddWaybillRequest = (CheckoutFormAddWaybillRequest) o;
    return Objects.equals(this.carrierId, checkoutFormAddWaybillRequest.carrierId) &&
        Objects.equals(this.waybill, checkoutFormAddWaybillRequest.waybill) &&
        Objects.equals(this.carrierName, checkoutFormAddWaybillRequest.carrierName) &&
        Objects.equals(this.lineItems, checkoutFormAddWaybillRequest.lineItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierId, waybill, carrierName, lineItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutFormAddWaybillRequest {\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    waybill: ").append(toIndentedString(waybill)).append("\n");
    sb.append("    carrierName: ").append(toIndentedString(carrierName)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrierId");
    openapiFields.add("waybill");
    openapiFields.add("carrierName");
    openapiFields.add("lineItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrierId");
    openapiRequiredFields.add("waybill");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutFormAddWaybillRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutFormAddWaybillRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutFormAddWaybillRequest is not found in the empty JSON string", CheckoutFormAddWaybillRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutFormAddWaybillRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutFormAddWaybillRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutFormAddWaybillRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("carrierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierId").toString()));
      }
      if (!jsonObj.get("waybill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waybill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waybill").toString()));
      }
      if ((jsonObj.get("carrierName") != null && !jsonObj.get("carrierName").isJsonNull()) && !jsonObj.get("carrierName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierName").toString()));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            CheckoutFormAddWaybillRequestLineItemsInner.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutFormAddWaybillRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutFormAddWaybillRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutFormAddWaybillRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutFormAddWaybillRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutFormAddWaybillRequest>() {
           @Override
           public void write(JsonWriter out, CheckoutFormAddWaybillRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutFormAddWaybillRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutFormAddWaybillRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutFormAddWaybillRequest
   * @throws IOException if the JSON string is invalid with respect to CheckoutFormAddWaybillRequest
   */
  public static CheckoutFormAddWaybillRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutFormAddWaybillRequest.class);
  }

  /**
   * Convert an instance of CheckoutFormAddWaybillRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

