/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AdditionalEmail;
import pl.wtx.allegro.api.client.model.AdditionalEmailRequest;
import pl.wtx.allegro.api.client.model.AdditionalEmailsResponse;
import pl.wtx.allegro.api.client.model.Answer;
import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.MeResponse;
import java.time.OffsetDateTime;
import pl.wtx.allegro.api.client.model.Removal;
import pl.wtx.allegro.api.client.model.SalesQualityHistoryResponse;
import pl.wtx.allegro.api.client.model.SmartSellerClassificationReport;
import pl.wtx.allegro.api.client.model.UserRating;
import pl.wtx.allegro.api.client.model.UserRatingAnswerRequest;
import pl.wtx.allegro.api.client.model.UserRatingListResponse;
import pl.wtx.allegro.api.client.model.UserRatingListResponseVBeta1;
import pl.wtx.allegro.api.client.model.UserRatingRemovalRequest;
import pl.wtx.allegro.api.client.model.UserRatingVBeta1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InformationAboutUserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InformationAboutUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InformationAboutUserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAdditionalEmailUsingPOST
     * @param additionalEmailRequest request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Additional email added successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Email address provided in the request is not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAdditionalEmailUsingPOSTCall(@javax.annotation.Nonnull AdditionalEmailRequest additionalEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = additionalEmailRequest;

        // create path and map variables
        String localVarPath = "/account/additional-emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAdditionalEmailUsingPOSTValidateBeforeCall(@javax.annotation.Nonnull AdditionalEmailRequest additionalEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'additionalEmailRequest' is set
        if (additionalEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'additionalEmailRequest' when calling addAdditionalEmailUsingPOST(Async)");
        }

        return addAdditionalEmailUsingPOSTCall(additionalEmailRequest, _callback);

    }

    /**
     * Add a new additional email address to user&#39;s account
     * Use this resource to add a new additional email address to account. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-adres-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-add-an-additional-email\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param additionalEmailRequest request (required)
     * @return AdditionalEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Additional email added successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Email address provided in the request is not valid </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalEmail addAdditionalEmailUsingPOST(@javax.annotation.Nonnull AdditionalEmailRequest additionalEmailRequest) throws ApiException {
        ApiResponse<AdditionalEmail> localVarResp = addAdditionalEmailUsingPOSTWithHttpInfo(additionalEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new additional email address to user&#39;s account
     * Use this resource to add a new additional email address to account. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-adres-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-add-an-additional-email\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param additionalEmailRequest request (required)
     * @return ApiResponse&lt;AdditionalEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Additional email added successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Email address provided in the request is not valid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdditionalEmail> addAdditionalEmailUsingPOSTWithHttpInfo(@javax.annotation.Nonnull AdditionalEmailRequest additionalEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = addAdditionalEmailUsingPOSTValidateBeforeCall(additionalEmailRequest, null);
        Type localVarReturnType = new TypeToken<AdditionalEmail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new additional email address to user&#39;s account (asynchronously)
     * Use this resource to add a new additional email address to account. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-adres-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-add-an-additional-email\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param additionalEmailRequest request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Additional email added successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Email address provided in the request is not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAdditionalEmailUsingPOSTAsync(@javax.annotation.Nonnull AdditionalEmailRequest additionalEmailRequest, final ApiCallback<AdditionalEmail> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAdditionalEmailUsingPOSTValidateBeforeCall(additionalEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<AdditionalEmail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for answerUserRatingUsingPUT
     * @param ratingId ID of the rating. (required)
     * @param userRatingAnswerRequest User rating answer request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call answerUserRatingUsingPUTCall(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingAnswerRequest userRatingAnswerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRatingAnswerRequest;

        // create path and map variables
        String localVarPath = "/sale/user-ratings/{ratingId}/answer"
            .replace("{" + "ratingId" + "}", localVarApiClient.escapeString(ratingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call answerUserRatingUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingAnswerRequest userRatingAnswerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ratingId' is set
        if (ratingId == null) {
            throw new ApiException("Missing the required parameter 'ratingId' when calling answerUserRatingUsingPUT(Async)");
        }

        // verify the required parameter 'userRatingAnswerRequest' is set
        if (userRatingAnswerRequest == null) {
            throw new ApiException("Missing the required parameter 'userRatingAnswerRequest' when calling answerUserRatingUsingPUT(Async)");
        }

        return answerUserRatingUsingPUTCall(ratingId, userRatingAnswerRequest, _callback);

    }

    /**
     * Answer for user&#39;s rating
     * Use this resource to answer for received rating. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-odpowiedz-na-ocene\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-answer-for-user-rating\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId ID of the rating. (required)
     * @param userRatingAnswerRequest User rating answer request. (required)
     * @return Answer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Answer answerUserRatingUsingPUT(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingAnswerRequest userRatingAnswerRequest) throws ApiException {
        ApiResponse<Answer> localVarResp = answerUserRatingUsingPUTWithHttpInfo(ratingId, userRatingAnswerRequest);
        return localVarResp.getData();
    }

    /**
     * Answer for user&#39;s rating
     * Use this resource to answer for received rating. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-odpowiedz-na-ocene\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-answer-for-user-rating\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId ID of the rating. (required)
     * @param userRatingAnswerRequest User rating answer request. (required)
     * @return ApiResponse&lt;Answer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Answer> answerUserRatingUsingPUTWithHttpInfo(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingAnswerRequest userRatingAnswerRequest) throws ApiException {
        okhttp3.Call localVarCall = answerUserRatingUsingPUTValidateBeforeCall(ratingId, userRatingAnswerRequest, null);
        Type localVarReturnType = new TypeToken<Answer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Answer for user&#39;s rating (asynchronously)
     * Use this resource to answer for received rating. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-dodac-odpowiedz-na-ocene\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-answer-for-user-rating\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId ID of the rating. (required)
     * @param userRatingAnswerRequest User rating answer request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call answerUserRatingUsingPUTAsync(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingAnswerRequest userRatingAnswerRequest, final ApiCallback<Answer> _callback) throws ApiException {

        okhttp3.Call localVarCall = answerUserRatingUsingPUTValidateBeforeCall(ratingId, userRatingAnswerRequest, _callback);
        Type localVarReturnType = new TypeToken<Answer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAdditionalEmailUsingDELETE
     * @param emailId Id of the additional email to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted additional email </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdditionalEmailUsingDELETECall(@javax.annotation.Nonnull String emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/additional-emails/{emailId}"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdditionalEmailUsingDELETEValidateBeforeCall(@javax.annotation.Nonnull String emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling deleteAdditionalEmailUsingDELETE(Async)");
        }

        return deleteAdditionalEmailUsingDELETECall(emailId, _callback);

    }

    /**
     * Delete an additional email address
     * Use this resource to delete one of additional emails. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-usunac-adres-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-remove-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param emailId Id of the additional email to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted additional email </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAdditionalEmailUsingDELETE(@javax.annotation.Nonnull String emailId) throws ApiException {
        deleteAdditionalEmailUsingDELETEWithHttpInfo(emailId);
    }

    /**
     * Delete an additional email address
     * Use this resource to delete one of additional emails. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-usunac-adres-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-remove-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param emailId Id of the additional email to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted additional email </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAdditionalEmailUsingDELETEWithHttpInfo(@javax.annotation.Nonnull String emailId) throws ApiException {
        okhttp3.Call localVarCall = deleteAdditionalEmailUsingDELETEValidateBeforeCall(emailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an additional email address (asynchronously)
     * Use this resource to delete one of additional emails. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-usunac-adres-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-remove-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param emailId Id of the additional email to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted additional email </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdditionalEmailUsingDELETEAsync(@javax.annotation.Nonnull String emailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdditionalEmailUsingDELETEValidateBeforeCall(emailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdditionalEmailUsingGET
     * @param emailId Id of the additional email. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional email returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdditionalEmailUsingGETCall(@javax.annotation.Nonnull String emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/additional-emails/{emailId}"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdditionalEmailUsingGETValidateBeforeCall(@javax.annotation.Nonnull String emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getAdditionalEmailUsingGET(Async)");
        }

        return getAdditionalEmailUsingGETCall(emailId, _callback);

    }

    /**
     * Get information about a particular additional email
     * Use this resource to retrieve a single additional email. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-szczegolowe-informacje-o-adresie-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-e-mail-details\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param emailId Id of the additional email. (required)
     * @return AdditionalEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional email returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalEmail getAdditionalEmailUsingGET(@javax.annotation.Nonnull String emailId) throws ApiException {
        ApiResponse<AdditionalEmail> localVarResp = getAdditionalEmailUsingGETWithHttpInfo(emailId);
        return localVarResp.getData();
    }

    /**
     * Get information about a particular additional email
     * Use this resource to retrieve a single additional email. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-szczegolowe-informacje-o-adresie-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-e-mail-details\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param emailId Id of the additional email. (required)
     * @return ApiResponse&lt;AdditionalEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional email returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdditionalEmail> getAdditionalEmailUsingGETWithHttpInfo(@javax.annotation.Nonnull String emailId) throws ApiException {
        okhttp3.Call localVarCall = getAdditionalEmailUsingGETValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<AdditionalEmail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a particular additional email (asynchronously)
     * Use this resource to retrieve a single additional email. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-szczegolowe-informacje-o-adresie-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-e-mail-details\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param emailId Id of the additional email. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional email returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Additional email not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdditionalEmailUsingGETAsync(@javax.annotation.Nonnull String emailId, final ApiCallback<AdditionalEmail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdditionalEmailUsingGETValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<AdditionalEmail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfAdditionalEmailsUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user&#39;s additional emails returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfAdditionalEmailsUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/additional-emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfAdditionalEmailsUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getListOfAdditionalEmailsUsingGETCall(_callback);

    }

    /**
     * Get user&#39;s additional emails
     * Use this resource to get a list of all additional email addresses assigned to account. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-adresy-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-email-addresses\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return AdditionalEmailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user&#39;s additional emails returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalEmailsResponse getListOfAdditionalEmailsUsingGET() throws ApiException {
        ApiResponse<AdditionalEmailsResponse> localVarResp = getListOfAdditionalEmailsUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user&#39;s additional emails
     * Use this resource to get a list of all additional email addresses assigned to account. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-adresy-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-email-addresses\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return ApiResponse&lt;AdditionalEmailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user&#39;s additional emails returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdditionalEmailsResponse> getListOfAdditionalEmailsUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getListOfAdditionalEmailsUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AdditionalEmailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user&#39;s additional emails (asynchronously)
     * Use this resource to get a list of all additional email addresses assigned to account. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-adresy-e-mail\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-email-addresses\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user&#39;s additional emails returned successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfAdditionalEmailsUsingGETAsync(final ApiCallback<AdditionalEmailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfAdditionalEmailsUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AdditionalEmailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSaleQualityUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleQualityUsingGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/quality";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSaleQualityUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSaleQualityUsingGETCall(_callback);

    }

    /**
     * Get sales quality
     * Use this resource to get current sales quality with at most 30 days history. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jakosc-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#sales-quality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return SalesQualityHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SalesQualityHistoryResponse getSaleQualityUsingGET() throws ApiException {
        ApiResponse<SalesQualityHistoryResponse> localVarResp = getSaleQualityUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get sales quality
     * Use this resource to get current sales quality with at most 30 days history. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jakosc-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#sales-quality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return ApiResponse&lt;SalesQualityHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesQualityHistoryResponse> getSaleQualityUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSaleQualityUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SalesQualityHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sales quality (asynchronously)
     * Use this resource to get current sales quality with at most 30 days history. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jakosc-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#sales-quality\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleQualityUsingGETAsync(final ApiCallback<SalesQualityHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSaleQualityUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SalesQualityHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSellerSmartClassificationGET
     * @param marketplaceId Marketplace for which seller classification report will be returned. If not specified, the classification result for the seller&#39;s registration marketplace will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned seller Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSellerSmartClassificationGETCall(@javax.annotation.Nullable String marketplaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/smart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketplaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceId", marketplaceId));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerSmartClassificationGETValidateBeforeCall(@javax.annotation.Nullable String marketplaceId, final ApiCallback _callback) throws ApiException {
        return getSellerSmartClassificationGETCall(marketplaceId, _callback);

    }

    /**
     * Get Smart! seller classification report
     * Use this resource to get a full Smart! seller classification report. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#kwalifikacja-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#seller-qualification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId Marketplace for which seller classification report will be returned. If not specified, the classification result for the seller&#39;s registration marketplace will be returned. (optional)
     * @return SmartSellerClassificationReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned seller Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public SmartSellerClassificationReport getSellerSmartClassificationGET(@javax.annotation.Nullable String marketplaceId) throws ApiException {
        ApiResponse<SmartSellerClassificationReport> localVarResp = getSellerSmartClassificationGETWithHttpInfo(marketplaceId);
        return localVarResp.getData();
    }

    /**
     * Get Smart! seller classification report
     * Use this resource to get a full Smart! seller classification report. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#kwalifikacja-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#seller-qualification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId Marketplace for which seller classification report will be returned. If not specified, the classification result for the seller&#39;s registration marketplace will be returned. (optional)
     * @return ApiResponse&lt;SmartSellerClassificationReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned seller Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartSellerClassificationReport> getSellerSmartClassificationGETWithHttpInfo(@javax.annotation.Nullable String marketplaceId) throws ApiException {
        okhttp3.Call localVarCall = getSellerSmartClassificationGETValidateBeforeCall(marketplaceId, null);
        Type localVarReturnType = new TypeToken<SmartSellerClassificationReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Smart! seller classification report (asynchronously)
     * Use this resource to get a full Smart! seller classification report. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#kwalifikacja-sprzedawcy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#seller-qualification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param marketplaceId Marketplace for which seller classification report will be returned. If not specified, the classification result for the seller&#39;s registration marketplace will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned seller Smart! classification report </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSellerSmartClassificationGETAsync(@javax.annotation.Nullable String marketplaceId, final ApiCallback<SmartSellerClassificationReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSellerSmartClassificationGETValidateBeforeCall(marketplaceId, _callback);
        Type localVarReturnType = new TypeToken<SmartSellerClassificationReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserRatingUsingGET
     * @param ratingId The ID of the rating. (required)
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRatingUsingGETCall(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/user-ratings/{ratingId}"
            .replace("{" + "ratingId" + "}", localVarApiClient.escapeString(ratingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/vnd.allegro.beta.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRatingUsingGETValidateBeforeCall(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ratingId' is set
        if (ratingId == null) {
            throw new ApiException("Missing the required parameter 'ratingId' when calling getUserRatingUsingGET(Async)");
        }

        return getUserRatingUsingGETCall(ratingId, acceptLanguage, _callback);

    }

    /**
     * Get the user&#39;s rating by given rating id
     * Use this resource to receive your sales rating by given rating id. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-informacje-o-ocenie-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-user-s-ratings-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId The ID of the rating. (required)
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @return UserRating
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserRating getUserRatingUsingGET(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        ApiResponse<UserRating> localVarResp = getUserRatingUsingGETWithHttpInfo(ratingId, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s rating by given rating id
     * Use this resource to receive your sales rating by given rating id. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-informacje-o-ocenie-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-user-s-ratings-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId The ID of the rating. (required)
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @return ApiResponse&lt;UserRating&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRating> getUserRatingUsingGETWithHttpInfo(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nullable String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getUserRatingUsingGETValidateBeforeCall(ratingId, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<UserRating>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s rating by given rating id (asynchronously)
     * Use this resource to receive your sales rating by given rating id. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-informacje-o-ocenie-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-user-s-ratings-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId The ID of the rating. (required)
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRatingUsingGETAsync(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nullable String acceptLanguage, final ApiCallback<UserRating> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRatingUsingGETValidateBeforeCall(ratingId, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<UserRating>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserRatingsUsingGET
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @param recommended Filter by recommended. (optional)
     * @param lastChangedAtGte Last change (creation or latest edition) date time in ISO 8601 format. The lower bound of date time range from which ratings will be fetched. (optional)
     * @param lastChangedAtLte Last change (creation or latest edition) date time in ISO 8601 format. The upper bound of date time range from which ratings will be fetched. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRatingsUsingGETCall(@javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String recommended, @javax.annotation.Nullable OffsetDateTime lastChangedAtGte, @javax.annotation.Nullable OffsetDateTime lastChangedAtLte, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/user-ratings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recommended != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recommended", recommended));
        }

        if (lastChangedAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastChangedAt.gte", lastChangedAtGte));
        }

        if (lastChangedAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastChangedAt.lte", lastChangedAtLte));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json",
            "application/vnd.allegro.beta.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRatingsUsingGETValidateBeforeCall(@javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String recommended, @javax.annotation.Nullable OffsetDateTime lastChangedAtGte, @javax.annotation.Nullable OffsetDateTime lastChangedAtLte, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getUserRatingsUsingGETCall(acceptLanguage, recommended, lastChangedAtGte, lastChangedAtLte, offset, limit, _callback);

    }

    /**
     * Get the user&#39;s ratings
     * Use this resource to receive your sales ratings sorted by last change date, starting from the latest. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-informacje-o-ocenie-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-user-s-ratings-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @param recommended Filter by recommended. (optional)
     * @param lastChangedAtGte Last change (creation or latest edition) date time in ISO 8601 format. The lower bound of date time range from which ratings will be fetched. (optional)
     * @param lastChangedAtLte Last change (creation or latest edition) date time in ISO 8601 format. The upper bound of date time range from which ratings will be fetched. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 20)
     * @return UserRatingListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserRatingListResponse getUserRatingsUsingGET(@javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String recommended, @javax.annotation.Nullable OffsetDateTime lastChangedAtGte, @javax.annotation.Nullable OffsetDateTime lastChangedAtLte, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<UserRatingListResponse> localVarResp = getUserRatingsUsingGETWithHttpInfo(acceptLanguage, recommended, lastChangedAtGte, lastChangedAtLte, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s ratings
     * Use this resource to receive your sales ratings sorted by last change date, starting from the latest. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-informacje-o-ocenie-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-user-s-ratings-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @param recommended Filter by recommended. (optional)
     * @param lastChangedAtGte Last change (creation or latest edition) date time in ISO 8601 format. The lower bound of date time range from which ratings will be fetched. (optional)
     * @param lastChangedAtLte Last change (creation or latest edition) date time in ISO 8601 format. The upper bound of date time range from which ratings will be fetched. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 20)
     * @return ApiResponse&lt;UserRatingListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRatingListResponse> getUserRatingsUsingGETWithHttpInfo(@javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String recommended, @javax.annotation.Nullable OffsetDateTime lastChangedAtGte, @javax.annotation.Nullable OffsetDateTime lastChangedAtLte, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getUserRatingsUsingGETValidateBeforeCall(acceptLanguage, recommended, lastChangedAtGte, lastChangedAtLte, offset, limit, null);
        Type localVarReturnType = new TypeToken<UserRatingListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s ratings (asynchronously)
     * Use this resource to receive your sales ratings sorted by last change date, starting from the latest. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-pobrac-informacje-o-ocenie-sprzedazy\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-retrieve-user-s-ratings-data\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param acceptLanguage Expected language of messages. The header is available only for content version &#39;application/vnd.allegro.beta.v1+json&#39;. (optional, default to pl-PL)
     * @param recommended Filter by recommended. (optional)
     * @param lastChangedAtGte Last change (creation or latest edition) date time in ISO 8601 format. The lower bound of date time range from which ratings will be fetched. (optional)
     * @param lastChangedAtLte Last change (creation or latest edition) date time in ISO 8601 format. The upper bound of date time range from which ratings will be fetched. (optional)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param limit The limit of elements in the response. (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRatingsUsingGETAsync(@javax.annotation.Nullable String acceptLanguage, @javax.annotation.Nullable String recommended, @javax.annotation.Nullable OffsetDateTime lastChangedAtGte, @javax.annotation.Nullable OffsetDateTime lastChangedAtLte, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<UserRatingListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRatingsUsingGETValidateBeforeCall(acceptLanguage, recommended, lastChangedAtGte, lastChangedAtLte, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<UserRatingListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for meGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - when token is without user context </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return meGETCall(_callback);

    }

    /**
     * Get basic information about user
     * Use this resource when you need basic information about authenticated user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#informacje-o-uzytkowniku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#information-about-user\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return MeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - when token is without user context </td><td>  -  </td></tr>
     </table>
     */
    public MeResponse meGET() throws ApiException {
        ApiResponse<MeResponse> localVarResp = meGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get basic information about user
     * Use this resource when you need basic information about authenticated user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#informacje-o-uzytkowniku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#information-about-user\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @return ApiResponse&lt;MeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - when token is without user context </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeResponse> meGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = meGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get basic information about user (asynchronously)
     * Use this resource when you need basic information about authenticated user. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#informacje-o-uzytkowniku\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#information-about-user\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - when token is without user context </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meGETAsync(final ApiCallback<MeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = meGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userRatingRemovalUsingPUT
     * @param ratingId ID of the rating. (required)
     * @param userRatingRemovalRequest User rating removal request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRatingRemovalUsingPUTCall(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingRemovalRequest userRatingRemovalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRatingRemovalRequest;

        // create path and map variables
        String localVarPath = "/sale/user-ratings/{ratingId}/removal"
            .replace("{" + "ratingId" + "}", localVarApiClient.escapeString(ratingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userRatingRemovalUsingPUTValidateBeforeCall(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingRemovalRequest userRatingRemovalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ratingId' is set
        if (ratingId == null) {
            throw new ApiException("Missing the required parameter 'ratingId' when calling userRatingRemovalUsingPUT(Async)");
        }

        // verify the required parameter 'userRatingRemovalRequest' is set
        if (userRatingRemovalRequest == null) {
            throw new ApiException("Missing the required parameter 'userRatingRemovalRequest' when calling userRatingRemovalUsingPUT(Async)");
        }

        return userRatingRemovalUsingPUTCall(ratingId, userRatingRemovalRequest, _callback);

    }

    /**
     * Request removal of user&#39;s rating
     * Use this resource to request removal of received rating. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-wyslac-prosbe-o-usuniecie-oceny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-send-a-request-to-remove-user-rating\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId ID of the rating. (required)
     * @param userRatingRemovalRequest User rating removal request. (required)
     * @return Removal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Removal userRatingRemovalUsingPUT(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingRemovalRequest userRatingRemovalRequest) throws ApiException {
        ApiResponse<Removal> localVarResp = userRatingRemovalUsingPUTWithHttpInfo(ratingId, userRatingRemovalRequest);
        return localVarResp.getData();
    }

    /**
     * Request removal of user&#39;s rating
     * Use this resource to request removal of received rating. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-wyslac-prosbe-o-usuniecie-oceny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-send-a-request-to-remove-user-rating\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId ID of the rating. (required)
     * @param userRatingRemovalRequest User rating removal request. (required)
     * @return ApiResponse&lt;Removal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Removal> userRatingRemovalUsingPUTWithHttpInfo(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingRemovalRequest userRatingRemovalRequest) throws ApiException {
        okhttp3.Call localVarCall = userRatingRemovalUsingPUTValidateBeforeCall(ratingId, userRatingRemovalRequest, null);
        Type localVarReturnType = new TypeToken<Removal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request removal of user&#39;s rating (asynchronously)
     * Use this resource to request removal of received rating. Read more: &lt;a href&#x3D;\&quot;../../tutorials/jak-zarzadzac-kontem-danymi-uzytkownika-ZM9YAKgPgi2#jak-wyslac-prosbe-o-usuniecie-oceny\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../tutorials/account-and-user-data-management-jn9vBjqjnsw#how-to-send-a-request-to-remove-user-rating\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param ratingId ID of the rating. (required)
     * @param userRatingRemovalRequest User rating removal request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRatingRemovalUsingPUTAsync(@javax.annotation.Nonnull String ratingId, @javax.annotation.Nonnull UserRatingRemovalRequest userRatingRemovalRequest, final ApiCallback<Removal> _callback) throws ApiException {

        okhttp3.Call localVarCall = userRatingRemovalUsingPUTValidateBeforeCall(ratingId, userRatingRemovalRequest, _callback);
        Type localVarReturnType = new TypeToken<Removal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
