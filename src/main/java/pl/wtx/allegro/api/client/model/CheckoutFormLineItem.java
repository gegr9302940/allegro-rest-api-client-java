/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import pl.wtx.allegro.api.client.model.CheckoutFormAdditionalService;
import pl.wtx.allegro.api.client.model.CheckoutFormLineItemTax;
import pl.wtx.allegro.api.client.model.LineItemDiscount;
import pl.wtx.allegro.api.client.model.LineItemReconciliation;
import pl.wtx.allegro.api.client.model.LineItemVoucher;
import pl.wtx.allegro.api.client.model.OfferReference;
import pl.wtx.allegro.api.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Order item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckoutFormLineItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_OFFER = "offer";
  @SerializedName(SERIALIZED_NAME_OFFER)
  @javax.annotation.Nonnull
  private OfferReference offer;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nonnull
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_ORIGINAL_PRICE = "originalPrice";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PRICE)
  @javax.annotation.Nonnull
  private Price originalPrice;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nonnull
  private Price price;

  public static final String SERIALIZED_NAME_RECONCILIATION = "reconciliation";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION)
  @javax.annotation.Nullable
  private LineItemReconciliation reconciliation;

  public static final String SERIALIZED_NAME_SELECTED_ADDITIONAL_SERVICES = "selectedAdditionalServices";
  @SerializedName(SERIALIZED_NAME_SELECTED_ADDITIONAL_SERVICES)
  @javax.annotation.Nullable
  private List<CheckoutFormAdditionalService> selectedAdditionalServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOUCHERS = "vouchers";
  @SerializedName(SERIALIZED_NAME_VOUCHERS)
  @javax.annotation.Nullable
  private List<LineItemVoucher> vouchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  @javax.annotation.Nullable
  private CheckoutFormLineItemTax tax;

  public static final String SERIALIZED_NAME_BOUGHT_AT = "boughtAt";
  @SerializedName(SERIALIZED_NAME_BOUGHT_AT)
  @javax.annotation.Nullable
  private OffsetDateTime boughtAt;

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  @javax.annotation.Nullable
  private List<LineItemDiscount> discounts = new ArrayList<>();

  public CheckoutFormLineItem() {
  }

  public CheckoutFormLineItem id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Line item identifier
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public CheckoutFormLineItem offer(@javax.annotation.Nonnull OfferReference offer) {
    this.offer = offer;
    return this;
  }

  /**
   * Get offer
   * @return offer
   */
  @javax.annotation.Nonnull
  public OfferReference getOffer() {
    return offer;
  }

  public void setOffer(@javax.annotation.Nonnull OfferReference offer) {
    this.offer = offer;
  }


  public CheckoutFormLineItem quantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * quantity
   * minimum: 1
   * @return quantity
   */
  @javax.annotation.Nonnull
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
  }


  public CheckoutFormLineItem originalPrice(@javax.annotation.Nonnull Price originalPrice) {
    this.originalPrice = originalPrice;
    return this;
  }

  /**
   * Get originalPrice
   * @return originalPrice
   */
  @javax.annotation.Nonnull
  public Price getOriginalPrice() {
    return originalPrice;
  }

  public void setOriginalPrice(@javax.annotation.Nonnull Price originalPrice) {
    this.originalPrice = originalPrice;
  }


  public CheckoutFormLineItem price(@javax.annotation.Nonnull Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public Price getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nonnull Price price) {
    this.price = price;
  }


  public CheckoutFormLineItem reconciliation(@javax.annotation.Nullable LineItemReconciliation reconciliation) {
    this.reconciliation = reconciliation;
    return this;
  }

  /**
   * Get reconciliation
   * @return reconciliation
   */
  @javax.annotation.Nullable
  public LineItemReconciliation getReconciliation() {
    return reconciliation;
  }

  public void setReconciliation(@javax.annotation.Nullable LineItemReconciliation reconciliation) {
    this.reconciliation = reconciliation;
  }


  public CheckoutFormLineItem selectedAdditionalServices(@javax.annotation.Nullable List<CheckoutFormAdditionalService> selectedAdditionalServices) {
    this.selectedAdditionalServices = selectedAdditionalServices;
    return this;
  }

  public CheckoutFormLineItem addSelectedAdditionalServicesItem(CheckoutFormAdditionalService selectedAdditionalServicesItem) {
    if (this.selectedAdditionalServices == null) {
      this.selectedAdditionalServices = new ArrayList<>();
    }
    this.selectedAdditionalServices.add(selectedAdditionalServicesItem);
    return this;
  }

  /**
   * Get selectedAdditionalServices
   * @return selectedAdditionalServices
   */
  @javax.annotation.Nullable
  public List<CheckoutFormAdditionalService> getSelectedAdditionalServices() {
    return selectedAdditionalServices;
  }

  public void setSelectedAdditionalServices(@javax.annotation.Nullable List<CheckoutFormAdditionalService> selectedAdditionalServices) {
    this.selectedAdditionalServices = selectedAdditionalServices;
  }


  public CheckoutFormLineItem vouchers(@javax.annotation.Nullable List<LineItemVoucher> vouchers) {
    this.vouchers = vouchers;
    return this;
  }

  public CheckoutFormLineItem addVouchersItem(LineItemVoucher vouchersItem) {
    if (this.vouchers == null) {
      this.vouchers = new ArrayList<>();
    }
    this.vouchers.add(vouchersItem);
    return this;
  }

  /**
   * Get vouchers
   * @return vouchers
   */
  @javax.annotation.Nullable
  public List<LineItemVoucher> getVouchers() {
    return vouchers;
  }

  public void setVouchers(@javax.annotation.Nullable List<LineItemVoucher> vouchers) {
    this.vouchers = vouchers;
  }


  public CheckoutFormLineItem tax(@javax.annotation.Nullable CheckoutFormLineItemTax tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public CheckoutFormLineItemTax getTax() {
    return tax;
  }

  public void setTax(@javax.annotation.Nullable CheckoutFormLineItemTax tax) {
    this.tax = tax;
  }


  public CheckoutFormLineItem boughtAt(@javax.annotation.Nullable OffsetDateTime boughtAt) {
    this.boughtAt = boughtAt;
    return this;
  }

  /**
   * ISO date when offer was bought
   * @return boughtAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBoughtAt() {
    return boughtAt;
  }

  public void setBoughtAt(@javax.annotation.Nullable OffsetDateTime boughtAt) {
    this.boughtAt = boughtAt;
  }


  public CheckoutFormLineItem discounts(@javax.annotation.Nullable List<LineItemDiscount> discounts) {
    this.discounts = discounts;
    return this;
  }

  public CheckoutFormLineItem addDiscountsItem(LineItemDiscount discountsItem) {
    if (this.discounts == null) {
      this.discounts = new ArrayList<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

  /**
   * Get discounts
   * @return discounts
   */
  @javax.annotation.Nullable
  public List<LineItemDiscount> getDiscounts() {
    return discounts;
  }

  public void setDiscounts(@javax.annotation.Nullable List<LineItemDiscount> discounts) {
    this.discounts = discounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutFormLineItem checkoutFormLineItem = (CheckoutFormLineItem) o;
    return Objects.equals(this.id, checkoutFormLineItem.id) &&
        Objects.equals(this.offer, checkoutFormLineItem.offer) &&
        Objects.equals(this.quantity, checkoutFormLineItem.quantity) &&
        Objects.equals(this.originalPrice, checkoutFormLineItem.originalPrice) &&
        Objects.equals(this.price, checkoutFormLineItem.price) &&
        Objects.equals(this.reconciliation, checkoutFormLineItem.reconciliation) &&
        Objects.equals(this.selectedAdditionalServices, checkoutFormLineItem.selectedAdditionalServices) &&
        Objects.equals(this.vouchers, checkoutFormLineItem.vouchers) &&
        Objects.equals(this.tax, checkoutFormLineItem.tax) &&
        Objects.equals(this.boughtAt, checkoutFormLineItem.boughtAt) &&
        Objects.equals(this.discounts, checkoutFormLineItem.discounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, offer, quantity, originalPrice, price, reconciliation, selectedAdditionalServices, vouchers, tax, boughtAt, discounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutFormLineItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    originalPrice: ").append(toIndentedString(originalPrice)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    reconciliation: ").append(toIndentedString(reconciliation)).append("\n");
    sb.append("    selectedAdditionalServices: ").append(toIndentedString(selectedAdditionalServices)).append("\n");
    sb.append("    vouchers: ").append(toIndentedString(vouchers)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    boughtAt: ").append(toIndentedString(boughtAt)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("offer");
    openapiFields.add("quantity");
    openapiFields.add("originalPrice");
    openapiFields.add("price");
    openapiFields.add("reconciliation");
    openapiFields.add("selectedAdditionalServices");
    openapiFields.add("vouchers");
    openapiFields.add("tax");
    openapiFields.add("boughtAt");
    openapiFields.add("discounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("offer");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("originalPrice");
    openapiRequiredFields.add("price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutFormLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutFormLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutFormLineItem is not found in the empty JSON string", CheckoutFormLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutFormLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutFormLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutFormLineItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `offer`
      OfferReference.validateJsonElement(jsonObj.get("offer"));
      // validate the required field `originalPrice`
      Price.validateJsonElement(jsonObj.get("originalPrice"));
      // validate the required field `price`
      Price.validateJsonElement(jsonObj.get("price"));
      // validate the optional field `reconciliation`
      if (jsonObj.get("reconciliation") != null && !jsonObj.get("reconciliation").isJsonNull()) {
        LineItemReconciliation.validateJsonElement(jsonObj.get("reconciliation"));
      }
      if (jsonObj.get("selectedAdditionalServices") != null && !jsonObj.get("selectedAdditionalServices").isJsonNull()) {
        JsonArray jsonArrayselectedAdditionalServices = jsonObj.getAsJsonArray("selectedAdditionalServices");
        if (jsonArrayselectedAdditionalServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectedAdditionalServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectedAdditionalServices` to be an array in the JSON string but got `%s`", jsonObj.get("selectedAdditionalServices").toString()));
          }

          // validate the optional field `selectedAdditionalServices` (array)
          for (int i = 0; i < jsonArrayselectedAdditionalServices.size(); i++) {
            CheckoutFormAdditionalService.validateJsonElement(jsonArrayselectedAdditionalServices.get(i));
          };
        }
      }
      if (jsonObj.get("vouchers") != null && !jsonObj.get("vouchers").isJsonNull()) {
        JsonArray jsonArrayvouchers = jsonObj.getAsJsonArray("vouchers");
        if (jsonArrayvouchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vouchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vouchers` to be an array in the JSON string but got `%s`", jsonObj.get("vouchers").toString()));
          }

          // validate the optional field `vouchers` (array)
          for (int i = 0; i < jsonArrayvouchers.size(); i++) {
            LineItemVoucher.validateJsonElement(jsonArrayvouchers.get(i));
          };
        }
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        CheckoutFormLineItemTax.validateJsonElement(jsonObj.get("tax"));
      }
      if (jsonObj.get("discounts") != null && !jsonObj.get("discounts").isJsonNull()) {
        JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
        if (jsonArraydiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
          }

          // validate the optional field `discounts` (array)
          for (int i = 0; i < jsonArraydiscounts.size(); i++) {
            LineItemDiscount.validateJsonElement(jsonArraydiscounts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutFormLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutFormLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutFormLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutFormLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutFormLineItem>() {
           @Override
           public void write(JsonWriter out, CheckoutFormLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutFormLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutFormLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutFormLineItem
   * @throws IOException if the JSON string is invalid with respect to CheckoutFormLineItem
   */
  public static CheckoutFormLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutFormLineItem.class);
  }

  /**
   * Convert an instance of CheckoutFormLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

