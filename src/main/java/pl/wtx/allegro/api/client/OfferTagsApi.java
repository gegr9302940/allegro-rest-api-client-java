/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client;

import pl.wtx.allegro.api.client.invoker.ApiCallback;
import pl.wtx.allegro.api.client.invoker.ApiClient;
import pl.wtx.allegro.api.client.invoker.ApiException;
import pl.wtx.allegro.api.client.invoker.ApiResponse;
import pl.wtx.allegro.api.client.invoker.Configuration;
import pl.wtx.allegro.api.client.invoker.Pair;
import pl.wtx.allegro.api.client.invoker.ProgressRequestBody;
import pl.wtx.allegro.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.allegro.api.client.model.AuthError;
import pl.wtx.allegro.api.client.model.ErrorsHolder;
import pl.wtx.allegro.api.client.model.TagId;
import pl.wtx.allegro.api.client.model.TagIdsRequest;
import pl.wtx.allegro.api.client.model.TagListResponse;
import pl.wtx.allegro.api.client.model.TagRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OfferTagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OfferTagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OfferTagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignTagToOfferPOST
     * @param offerId Offer identifier. (required)
     * @param tagIdsRequest request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully assigned tag to offer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - offer is created by someone else or user is not brandzone user or doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be assigned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignTagToOfferPOSTCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull TagIdsRequest tagIdsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagIdsRequest;

        // create path and map variables
        String localVarPath = "/sale/offers/{offerId}/tags"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignTagToOfferPOSTValidateBeforeCall(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull TagIdsRequest tagIdsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling assignTagToOfferPOST(Async)");
        }

        // verify the required parameter 'tagIdsRequest' is set
        if (tagIdsRequest == null) {
            throw new ApiException("Missing the required parameter 'tagIdsRequest' when calling assignTagToOfferPOST(Async)");
        }

        return assignTagToOfferPOSTCall(offerId, tagIdsRequest, _callback);

    }

    /**
     * Assign tags to an offer
     * Use this resource to assign a tag to offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param tagIdsRequest request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully assigned tag to offer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - offer is created by someone else or user is not brandzone user or doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be assigned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public void assignTagToOfferPOST(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull TagIdsRequest tagIdsRequest) throws ApiException {
        assignTagToOfferPOSTWithHttpInfo(offerId, tagIdsRequest);
    }

    /**
     * Assign tags to an offer
     * Use this resource to assign a tag to offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param tagIdsRequest request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully assigned tag to offer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - offer is created by someone else or user is not brandzone user or doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be assigned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assignTagToOfferPOSTWithHttpInfo(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull TagIdsRequest tagIdsRequest) throws ApiException {
        okhttp3.Call localVarCall = assignTagToOfferPOSTValidateBeforeCall(offerId, tagIdsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign tags to an offer (asynchronously)
     * Use this resource to assign a tag to offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param tagIdsRequest request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully assigned tag to offer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - offer is created by someone else or user is not brandzone user or doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be assigned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Offer not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignTagToOfferPOSTAsync(@javax.annotation.Nonnull String offerId, @javax.annotation.Nonnull TagIdsRequest tagIdsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignTagToOfferPOSTValidateBeforeCall(offerId, tagIdsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTagPOST1
     * @param tagRequest request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the requested tag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagPOST1Call(@javax.annotation.Nonnull TagRequest tagRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagRequest;

        // create path and map variables
        String localVarPath = "/sale/offer-tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagPOST1ValidateBeforeCall(@javax.annotation.Nonnull TagRequest tagRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagRequest' is set
        if (tagRequest == null) {
            throw new ApiException("Missing the required parameter 'tagRequest' when calling createTagPOST1(Async)");
        }

        return createTagPOST1Call(tagRequest, _callback);

    }

    /**
     * Create a tag
     * Use this resource to create a new tag. You can create up to 100 tags. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param tagRequest request (required)
     * @return TagId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the requested tag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public TagId createTagPOST1(@javax.annotation.Nonnull TagRequest tagRequest) throws ApiException {
        ApiResponse<TagId> localVarResp = createTagPOST1WithHttpInfo(tagRequest);
        return localVarResp.getData();
    }

    /**
     * Create a tag
     * Use this resource to create a new tag. You can create up to 100 tags. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param tagRequest request (required)
     * @return ApiResponse&lt;TagId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the requested tag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagId> createTagPOST1WithHttpInfo(@javax.annotation.Nonnull TagRequest tagRequest) throws ApiException {
        okhttp3.Call localVarCall = createTagPOST1ValidateBeforeCall(tagRequest, null);
        Type localVarReturnType = new TypeToken<TagId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tag (asynchronously)
     * Use this resource to create a new tag. You can create up to 100 tags. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param tagRequest request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the requested tag </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagPOST1Async(@javax.annotation.Nonnull TagRequest tagRequest, final ApiCallback<TagId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagPOST1ValidateBeforeCall(tagRequest, _callback);
        Type localVarReturnType = new TypeToken<TagId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTagUsingDELETE
     * @param tagId Tag identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagUsingDELETECall(@javax.annotation.Nonnull String tagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-tags/{tagId}"
            .replace("{" + "tagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagUsingDELETEValidateBeforeCall(@javax.annotation.Nonnull String tagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling deleteTagUsingDELETE(Async)");
        }

        return deleteTagUsingDELETECall(tagId, _callback);

    }

    /**
     * Delete a tag
     * Use this resource to delete the tag. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param tagId Tag identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTagUsingDELETE(@javax.annotation.Nonnull String tagId) throws ApiException {
        deleteTagUsingDELETEWithHttpInfo(tagId);
    }

    /**
     * Delete a tag
     * Use this resource to delete the tag. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param tagId Tag identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTagUsingDELETEWithHttpInfo(@javax.annotation.Nonnull String tagId) throws ApiException {
        okhttp3.Call localVarCall = deleteTagUsingDELETEValidateBeforeCall(tagId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a tag (asynchronously)
     * Use this resource to delete the tag. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param tagId Tag identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagUsingDELETEAsync(@javax.annotation.Nonnull String tagId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagUsingDELETEValidateBeforeCall(tagId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAssignedOfferTagsGET
     * @param offerId Offer identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of assigned tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssignedOfferTagsGETCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offers/{offerId}/tags"
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignedOfferTagsGETValidateBeforeCall(@javax.annotation.Nonnull String offerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling listAssignedOfferTagsGET(Async)");
        }

        return listAssignedOfferTagsGETCall(offerId, _callback);

    }

    /**
     * Get tags assigned to an offer
     * Use this resource to get a list of tags assigned to offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @return TagListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of assigned tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public TagListResponse listAssignedOfferTagsGET(@javax.annotation.Nonnull String offerId) throws ApiException {
        ApiResponse<TagListResponse> localVarResp = listAssignedOfferTagsGETWithHttpInfo(offerId);
        return localVarResp.getData();
    }

    /**
     * Get tags assigned to an offer
     * Use this resource to get a list of tags assigned to offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @return ApiResponse&lt;TagListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of assigned tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListResponse> listAssignedOfferTagsGETWithHttpInfo(@javax.annotation.Nonnull String offerId) throws ApiException {
        okhttp3.Call localVarCall = listAssignedOfferTagsGETValidateBeforeCall(offerId, null);
        Type localVarReturnType = new TypeToken<TagListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags assigned to an offer (asynchronously)
     * Use this resource to get a list of tags assigned to offer. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param offerId Offer identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned list of assigned tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssignedOfferTagsGETAsync(@javax.annotation.Nonnull String offerId, final ApiCallback<TagListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignedOfferTagsGETValidateBeforeCall(offerId, _callback);
        Type localVarReturnType = new TypeToken<TagListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSellerTagsGET1
     * @param limit The limit of elements in the response. (optional, default to 1000)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerTagsGET1Call(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sale/offer-tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSellerTagsGET1ValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return listSellerTagsGET1Call(limit, offset, _callback);

    }

    /**
     * Get the user&#39;s tags
     * Use this resource to get a list of tags defined by the specified user (Defaults: limit &#x3D; 1000, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 1000)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return TagListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public TagListResponse listSellerTagsGET1(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<TagListResponse> localVarResp = listSellerTagsGET1WithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get the user&#39;s tags
     * Use this resource to get a list of tags defined by the specified user (Defaults: limit &#x3D; 1000, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 1000)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @return ApiResponse&lt;TagListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListResponse> listSellerTagsGET1WithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listSellerTagsGET1ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<TagListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the user&#39;s tags (asynchronously)
     * Use this resource to get a list of tags defined by the specified user (Defaults: limit &#x3D; 1000, offset &#x3D; 0). Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;.
     * @param limit The limit of elements in the response. (optional, default to 1000)
     * @param offset The offset of elements in the response. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned the requested list of tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerTagsGET1Async(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<TagListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSellerTagsGET1ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TagListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTagPUT
     * @param tagId Tag identifier. (required)
     * @param tagRequest request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested tag </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagPUTCall(@javax.annotation.Nonnull String tagId, @javax.annotation.Nonnull TagRequest tagRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagRequest;

        // create path and map variables
        String localVarPath = "/sale/offer-tags/{tagId}"
            .replace("{" + "tagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.allegro.public.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer-token-for-user" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagPUTValidateBeforeCall(@javax.annotation.Nonnull String tagId, @javax.annotation.Nonnull TagRequest tagRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling updateTagPUT(Async)");
        }

        // verify the required parameter 'tagRequest' is set
        if (tagRequest == null) {
            throw new ApiException("Missing the required parameter 'tagRequest' when calling updateTagPUT(Async)");
        }

        return updateTagPUTCall(tagId, tagRequest, _callback);

    }

    /**
     * Modify a tag
     * Use this resource to update a tag. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 1 million changes per hour.
     * @param tagId Tag identifier. (required)
     * @param tagRequest request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested tag </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateTagPUT(@javax.annotation.Nonnull String tagId, @javax.annotation.Nonnull TagRequest tagRequest) throws ApiException {
        updateTagPUTWithHttpInfo(tagId, tagRequest);
    }

    /**
     * Modify a tag
     * Use this resource to update a tag. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 1 million changes per hour.
     * @param tagId Tag identifier. (required)
     * @param tagRequest request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested tag </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTagPUTWithHttpInfo(@javax.annotation.Nonnull String tagId, @javax.annotation.Nonnull TagRequest tagRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTagPUTValidateBeforeCall(tagId, tagRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modify a tag (asynchronously)
     * Use this resource to update a tag. Read more: &lt;a href&#x3D;\&quot;../../news/nowe-zasoby-zarzadzaj-tagami-i-zalacznikami-w-ofertach-1nzlmKLPyHl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;PL&lt;/a&gt; / &lt;a href&#x3D;\&quot;../../news/new-resources-manage-tags-and-attachments-in-offers-WvGz12BXrHL\&quot; target&#x3D;\&quot;_blank\&quot;&gt;EN&lt;/a&gt;. This resource is rate limited to 1 million changes per hour.
     * @param tagId Tag identifier. (required)
     * @param tagRequest request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the requested tag </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed - your request was correct, but the tag could not be updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized action </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not brandzone user and doesn&#39;t have tags subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tag not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagPUTAsync(@javax.annotation.Nonnull String tagId, @javax.annotation.Nonnull TagRequest tagRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagPUTValidateBeforeCall(tagId, tagRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
