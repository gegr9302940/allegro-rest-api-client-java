/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.allegro.api.client.model.OfferFixedPrice;
import pl.wtx.allegro.api.client.model.OfferPrice;
import pl.wtx.allegro.api.client.model.SellingModeFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * This section describes the selling format and prices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class OfferSellingMode {
  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private SellingModeFormat format;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private OfferPrice price;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "fixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  @javax.annotation.Nullable
  private OfferFixedPrice fixedPrice;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  @javax.annotation.Nullable
  private Integer popularity;

  public static final String SERIALIZED_NAME_POPULARITY_RANGE = "popularityRange";
  @SerializedName(SERIALIZED_NAME_POPULARITY_RANGE)
  @javax.annotation.Nullable
  private String popularityRange;

  public static final String SERIALIZED_NAME_BID_COUNT = "bidCount";
  @SerializedName(SERIALIZED_NAME_BID_COUNT)
  @javax.annotation.Nullable
  private Integer bidCount;

  public OfferSellingMode() {
  }

  public OfferSellingMode format(@javax.annotation.Nullable SellingModeFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public SellingModeFormat getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable SellingModeFormat format) {
    this.format = format;
  }


  public OfferSellingMode price(@javax.annotation.Nullable OfferPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public OfferPrice getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable OfferPrice price) {
    this.price = price;
  }


  public OfferSellingMode fixedPrice(@javax.annotation.Nullable OfferFixedPrice fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * Get fixedPrice
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public OfferFixedPrice getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(@javax.annotation.Nullable OfferFixedPrice fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public OfferSellingMode popularity(@javax.annotation.Nullable Integer popularity) {
    this.popularity = popularity;
    return this;
  }

  /**
   * Lower bound of popularity range of the offer for *BUY_NOW* selling format.
   * minimum: 0
   * @return popularity
   */
  @javax.annotation.Nullable
  public Integer getPopularity() {
    return popularity;
  }

  public void setPopularity(@javax.annotation.Nullable Integer popularity) {
    this.popularity = popularity;
  }


  public OfferSellingMode popularityRange(@javax.annotation.Nullable String popularityRange) {
    this.popularityRange = popularityRange;
    return this;
  }

  /**
   * Popularity ranges of the offer for *BUY_NOW* selling format. Possible values: 0, [1-5], [6-10], [11-20], [21-50], [51-100] and [101+]
   * @return popularityRange
   */
  @javax.annotation.Nullable
  public String getPopularityRange() {
    return popularityRange;
  }

  public void setPopularityRange(@javax.annotation.Nullable String popularityRange) {
    this.popularityRange = popularityRange;
  }


  public OfferSellingMode bidCount(@javax.annotation.Nullable Integer bidCount) {
    this.bidCount = bidCount;
    return this;
  }

  /**
   * Number of bidders for *AUCTION* selling format.
   * minimum: 0
   * @return bidCount
   */
  @javax.annotation.Nullable
  public Integer getBidCount() {
    return bidCount;
  }

  public void setBidCount(@javax.annotation.Nullable Integer bidCount) {
    this.bidCount = bidCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferSellingMode offerSellingMode = (OfferSellingMode) o;
    return Objects.equals(this.format, offerSellingMode.format) &&
        Objects.equals(this.price, offerSellingMode.price) &&
        Objects.equals(this.fixedPrice, offerSellingMode.fixedPrice) &&
        Objects.equals(this.popularity, offerSellingMode.popularity) &&
        Objects.equals(this.popularityRange, offerSellingMode.popularityRange) &&
        Objects.equals(this.bidCount, offerSellingMode.bidCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, price, fixedPrice, popularity, popularityRange, bidCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferSellingMode {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    popularityRange: ").append(toIndentedString(popularityRange)).append("\n");
    sb.append("    bidCount: ").append(toIndentedString(bidCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("format");
    openapiFields.add("price");
    openapiFields.add("fixedPrice");
    openapiFields.add("popularity");
    openapiFields.add("popularityRange");
    openapiFields.add("bidCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferSellingMode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferSellingMode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferSellingMode is not found in the empty JSON string", OfferSellingMode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferSellingMode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferSellingMode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        SellingModeFormat.validateJsonElement(jsonObj.get("format"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        OfferPrice.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `fixedPrice`
      if (jsonObj.get("fixedPrice") != null && !jsonObj.get("fixedPrice").isJsonNull()) {
        OfferFixedPrice.validateJsonElement(jsonObj.get("fixedPrice"));
      }
      if ((jsonObj.get("popularityRange") != null && !jsonObj.get("popularityRange").isJsonNull()) && !jsonObj.get("popularityRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `popularityRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("popularityRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferSellingMode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferSellingMode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferSellingMode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferSellingMode.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferSellingMode>() {
           @Override
           public void write(JsonWriter out, OfferSellingMode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferSellingMode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferSellingMode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferSellingMode
   * @throws IOException if the JSON string is invalid with respect to OfferSellingMode
   */
  public static OfferSellingMode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferSellingMode.class);
  }

  /**
   * Convert an instance of OfferSellingMode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

