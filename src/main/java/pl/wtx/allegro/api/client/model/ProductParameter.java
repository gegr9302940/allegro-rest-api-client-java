/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.ParameterRangeValue;
import pl.wtx.allegro.api.client.model.ProductParameterOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Product&#39;s parameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ProductParameter {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_RANGE_VALUE = "rangeValue";
  @SerializedName(SERIALIZED_NAME_RANGE_VALUE)
  @javax.annotation.Nullable
  private ParameterRangeValue rangeValue;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  @javax.annotation.Nullable
  private List<String> values = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUES_IDS = "valuesIds";
  @SerializedName(SERIALIZED_NAME_VALUES_IDS)
  @javax.annotation.Nullable
  private List<String> valuesIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUES_LABELS = "valuesLabels";
  @SerializedName(SERIALIZED_NAME_VALUES_LABELS)
  @javax.annotation.Nullable
  private List<String> valuesLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  @javax.annotation.Nullable
  private String unit;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  @javax.annotation.Nullable
  private ProductParameterOptions options;

  public ProductParameter() {
  }

  public ProductParameter id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public ProductParameter rangeValue(@javax.annotation.Nullable ParameterRangeValue rangeValue) {
    this.rangeValue = rangeValue;
    return this;
  }

  /**
   * Get rangeValue
   * @return rangeValue
   */
  @javax.annotation.Nullable
  public ParameterRangeValue getRangeValue() {
    return rangeValue;
  }

  public void setRangeValue(@javax.annotation.Nullable ParameterRangeValue rangeValue) {
    this.rangeValue = rangeValue;
  }


  public ProductParameter values(@javax.annotation.Nullable List<String> values) {
    this.values = values;
    return this;
  }

  public ProductParameter addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(@javax.annotation.Nullable List<String> values) {
    this.values = values;
  }


  public ProductParameter valuesIds(@javax.annotation.Nullable List<String> valuesIds) {
    this.valuesIds = valuesIds;
    return this;
  }

  public ProductParameter addValuesIdsItem(String valuesIdsItem) {
    if (this.valuesIds == null) {
      this.valuesIds = new ArrayList<>();
    }
    this.valuesIds.add(valuesIdsItem);
    return this;
  }

  /**
   * Get valuesIds
   * @return valuesIds
   */
  @javax.annotation.Nullable
  public List<String> getValuesIds() {
    return valuesIds;
  }

  public void setValuesIds(@javax.annotation.Nullable List<String> valuesIds) {
    this.valuesIds = valuesIds;
  }


  public ProductParameter valuesLabels(@javax.annotation.Nullable List<String> valuesLabels) {
    this.valuesLabels = valuesLabels;
    return this;
  }

  public ProductParameter addValuesLabelsItem(String valuesLabelsItem) {
    if (this.valuesLabels == null) {
      this.valuesLabels = new ArrayList<>();
    }
    this.valuesLabels.add(valuesLabelsItem);
    return this;
  }

  /**
   * Get valuesLabels
   * @return valuesLabels
   */
  @javax.annotation.Nullable
  public List<String> getValuesLabels() {
    return valuesLabels;
  }

  public void setValuesLabels(@javax.annotation.Nullable List<String> valuesLabels) {
    this.valuesLabels = valuesLabels;
  }


  public ProductParameter unit(@javax.annotation.Nullable String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(@javax.annotation.Nullable String unit) {
    this.unit = unit;
  }


  public ProductParameter options(@javax.annotation.Nullable ProductParameterOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public ProductParameterOptions getOptions() {
    return options;
  }

  public void setOptions(@javax.annotation.Nullable ProductParameterOptions options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductParameter productParameter = (ProductParameter) o;
    return Objects.equals(this.id, productParameter.id) &&
        Objects.equals(this.rangeValue, productParameter.rangeValue) &&
        Objects.equals(this.values, productParameter.values) &&
        Objects.equals(this.valuesIds, productParameter.valuesIds) &&
        Objects.equals(this.valuesLabels, productParameter.valuesLabels) &&
        Objects.equals(this.unit, productParameter.unit) &&
        Objects.equals(this.options, productParameter.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, rangeValue, values, valuesIds, valuesLabels, unit, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductParameter {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rangeValue: ").append(toIndentedString(rangeValue)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    valuesIds: ").append(toIndentedString(valuesIds)).append("\n");
    sb.append("    valuesLabels: ").append(toIndentedString(valuesLabels)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("rangeValue");
    openapiFields.add("values");
    openapiFields.add("valuesIds");
    openapiFields.add("valuesLabels");
    openapiFields.add("unit");
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductParameter is not found in the empty JSON string", ProductParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductParameter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `rangeValue`
      if (jsonObj.get("rangeValue") != null && !jsonObj.get("rangeValue").isJsonNull()) {
        ParameterRangeValue.validateJsonElement(jsonObj.get("rangeValue"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valuesIds") != null && !jsonObj.get("valuesIds").isJsonNull() && !jsonObj.get("valuesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuesIds` to be an array in the JSON string but got `%s`", jsonObj.get("valuesIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valuesLabels") != null && !jsonObj.get("valuesLabels").isJsonNull() && !jsonObj.get("valuesLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuesLabels` to be an array in the JSON string but got `%s`", jsonObj.get("valuesLabels").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        ProductParameterOptions.validateJsonElement(jsonObj.get("options"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductParameter>() {
           @Override
           public void write(JsonWriter out, ProductParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductParameter
   * @throws IOException if the JSON string is invalid with respect to ProductParameter
   */
  public static ProductParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductParameter.class);
  }

  /**
   * Convert an instance of ProductParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

