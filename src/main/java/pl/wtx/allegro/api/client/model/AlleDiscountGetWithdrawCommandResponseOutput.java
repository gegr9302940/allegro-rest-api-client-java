/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.allegro.api.client.model.AlleDiscountGetWithdrawCommandResponseOutputWithdrawnOfferParticipation;
import pl.wtx.allegro.api.client.model.ErrorsHolder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Withdraw offer command output data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AlleDiscountGetWithdrawCommandResponseOutput {
  /**
   * Status field possible values:   - NEW - command processing has not started   - IN_PROGRESS - command is being processed   - FAILED - processing of the command failed. Offer will not participate in AlleDiscount.   - SUCCESSFUL - processing of the command was successful. New participation was created. To make sure that the offer is participating in AlleDiscount, request the participation status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("NEW"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCESSFUL("SUCCESSFUL"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WITHDRAWN_OFFER_PARTICIPATION = "withdrawnOfferParticipation";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN_OFFER_PARTICIPATION)
  @javax.annotation.Nullable
  private AlleDiscountGetWithdrawCommandResponseOutputWithdrawnOfferParticipation withdrawnOfferParticipation;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  @javax.annotation.Nullable
  private List<ErrorsHolder> errors = new ArrayList<>();

  public AlleDiscountGetWithdrawCommandResponseOutput() {
  }

  public AlleDiscountGetWithdrawCommandResponseOutput status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status field possible values:   - NEW - command processing has not started   - IN_PROGRESS - command is being processed   - FAILED - processing of the command failed. Offer will not participate in AlleDiscount.   - SUCCESSFUL - processing of the command was successful. New participation was created. To make sure that the offer is participating in AlleDiscount, request the participation status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public AlleDiscountGetWithdrawCommandResponseOutput createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Command creation date. ISO 8601 format.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AlleDiscountGetWithdrawCommandResponseOutput updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Command update date. ISO 8601 format.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AlleDiscountGetWithdrawCommandResponseOutput withdrawnOfferParticipation(@javax.annotation.Nullable AlleDiscountGetWithdrawCommandResponseOutputWithdrawnOfferParticipation withdrawnOfferParticipation) {
    this.withdrawnOfferParticipation = withdrawnOfferParticipation;
    return this;
  }

  /**
   * Get withdrawnOfferParticipation
   * @return withdrawnOfferParticipation
   */
  @javax.annotation.Nullable
  public AlleDiscountGetWithdrawCommandResponseOutputWithdrawnOfferParticipation getWithdrawnOfferParticipation() {
    return withdrawnOfferParticipation;
  }

  public void setWithdrawnOfferParticipation(@javax.annotation.Nullable AlleDiscountGetWithdrawCommandResponseOutputWithdrawnOfferParticipation withdrawnOfferParticipation) {
    this.withdrawnOfferParticipation = withdrawnOfferParticipation;
  }


  public AlleDiscountGetWithdrawCommandResponseOutput errors(@javax.annotation.Nullable List<ErrorsHolder> errors) {
    this.errors = errors;
    return this;
  }

  public AlleDiscountGetWithdrawCommandResponseOutput addErrorsItem(ErrorsHolder errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ErrorsHolder> getErrors() {
    return errors;
  }

  public void setErrors(@javax.annotation.Nullable List<ErrorsHolder> errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlleDiscountGetWithdrawCommandResponseOutput alleDiscountGetWithdrawCommandResponseOutput = (AlleDiscountGetWithdrawCommandResponseOutput) o;
    return Objects.equals(this.status, alleDiscountGetWithdrawCommandResponseOutput.status) &&
        Objects.equals(this.createdAt, alleDiscountGetWithdrawCommandResponseOutput.createdAt) &&
        Objects.equals(this.updatedAt, alleDiscountGetWithdrawCommandResponseOutput.updatedAt) &&
        Objects.equals(this.withdrawnOfferParticipation, alleDiscountGetWithdrawCommandResponseOutput.withdrawnOfferParticipation) &&
        Objects.equals(this.errors, alleDiscountGetWithdrawCommandResponseOutput.errors);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, createdAt, updatedAt, withdrawnOfferParticipation, errors);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlleDiscountGetWithdrawCommandResponseOutput {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    withdrawnOfferParticipation: ").append(toIndentedString(withdrawnOfferParticipation)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("withdrawnOfferParticipation");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlleDiscountGetWithdrawCommandResponseOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlleDiscountGetWithdrawCommandResponseOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlleDiscountGetWithdrawCommandResponseOutput is not found in the empty JSON string", AlleDiscountGetWithdrawCommandResponseOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlleDiscountGetWithdrawCommandResponseOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlleDiscountGetWithdrawCommandResponseOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `withdrawnOfferParticipation`
      if (jsonObj.get("withdrawnOfferParticipation") != null && !jsonObj.get("withdrawnOfferParticipation").isJsonNull()) {
        AlleDiscountGetWithdrawCommandResponseOutputWithdrawnOfferParticipation.validateJsonElement(jsonObj.get("withdrawnOfferParticipation"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ErrorsHolder.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlleDiscountGetWithdrawCommandResponseOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlleDiscountGetWithdrawCommandResponseOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlleDiscountGetWithdrawCommandResponseOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlleDiscountGetWithdrawCommandResponseOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<AlleDiscountGetWithdrawCommandResponseOutput>() {
           @Override
           public void write(JsonWriter out, AlleDiscountGetWithdrawCommandResponseOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlleDiscountGetWithdrawCommandResponseOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlleDiscountGetWithdrawCommandResponseOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlleDiscountGetWithdrawCommandResponseOutput
   * @throws IOException if the JSON string is invalid with respect to AlleDiscountGetWithdrawCommandResponseOutput
   */
  public static AlleDiscountGetWithdrawCommandResponseOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlleDiscountGetWithdrawCommandResponseOutput.class);
  }

  /**
   * Convert an instance of AlleDiscountGetWithdrawCommandResponseOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

