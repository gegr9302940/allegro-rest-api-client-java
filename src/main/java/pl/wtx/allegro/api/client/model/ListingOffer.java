/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.OfferCategory;
import pl.wtx.allegro.api.client.model.OfferDelivery;
import pl.wtx.allegro.api.client.model.OfferImages;
import pl.wtx.allegro.api.client.model.OfferPromotion;
import pl.wtx.allegro.api.client.model.OfferPublication;
import pl.wtx.allegro.api.client.model.OfferSeller;
import pl.wtx.allegro.api.client.model.OfferSellingMode;
import pl.wtx.allegro.api.client.model.OfferStock;
import pl.wtx.allegro.api.client.model.OfferVendor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * ListingOffer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ListingOffer {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  @javax.annotation.Nullable
  private OfferSeller seller;

  public static final String SERIALIZED_NAME_PROMOTION = "promotion";
  @SerializedName(SERIALIZED_NAME_PROMOTION)
  @javax.annotation.Nullable
  private OfferPromotion promotion;

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  @javax.annotation.Nullable
  private OfferDelivery delivery;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  @javax.annotation.Nullable
  private List<OfferImages> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLING_MODE = "sellingMode";
  @SerializedName(SERIALIZED_NAME_SELLING_MODE)
  @javax.annotation.Nullable
  private OfferSellingMode sellingMode;

  public static final String SERIALIZED_NAME_STOCK = "stock";
  @SerializedName(SERIALIZED_NAME_STOCK)
  @javax.annotation.Nullable
  private OfferStock stock;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  @javax.annotation.Nullable
  private OfferVendor vendor;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nullable
  private OfferCategory category;

  public static final String SERIALIZED_NAME_PUBLICATION = "publication";
  @SerializedName(SERIALIZED_NAME_PUBLICATION)
  @javax.annotation.Nullable
  private OfferPublication publication;

  public ListingOffer() {
  }

  public ListingOffer id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * The offer ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ListingOffer name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The title of the offer.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ListingOffer seller(@javax.annotation.Nullable OfferSeller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public OfferSeller getSeller() {
    return seller;
  }

  public void setSeller(@javax.annotation.Nullable OfferSeller seller) {
    this.seller = seller;
  }


  public ListingOffer promotion(@javax.annotation.Nullable OfferPromotion promotion) {
    this.promotion = promotion;
    return this;
  }

  /**
   * Get promotion
   * @return promotion
   */
  @javax.annotation.Nullable
  public OfferPromotion getPromotion() {
    return promotion;
  }

  public void setPromotion(@javax.annotation.Nullable OfferPromotion promotion) {
    this.promotion = promotion;
  }


  public ListingOffer delivery(@javax.annotation.Nullable OfferDelivery delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Get delivery
   * @return delivery
   */
  @javax.annotation.Nullable
  public OfferDelivery getDelivery() {
    return delivery;
  }

  public void setDelivery(@javax.annotation.Nullable OfferDelivery delivery) {
    this.delivery = delivery;
  }


  public ListingOffer images(@javax.annotation.Nullable List<OfferImages> images) {
    this.images = images;
    return this;
  }

  public ListingOffer addImagesItem(OfferImages imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * The gallery of images. Only the URL of the original sized image is provided. The first image represents the thumbnail image used on listing.
   * @return images
   */
  @javax.annotation.Nullable
  public List<OfferImages> getImages() {
    return images;
  }

  public void setImages(@javax.annotation.Nullable List<OfferImages> images) {
    this.images = images;
  }


  public ListingOffer sellingMode(@javax.annotation.Nullable OfferSellingMode sellingMode) {
    this.sellingMode = sellingMode;
    return this;
  }

  /**
   * Get sellingMode
   * @return sellingMode
   */
  @javax.annotation.Nullable
  public OfferSellingMode getSellingMode() {
    return sellingMode;
  }

  public void setSellingMode(@javax.annotation.Nullable OfferSellingMode sellingMode) {
    this.sellingMode = sellingMode;
  }


  public ListingOffer stock(@javax.annotation.Nullable OfferStock stock) {
    this.stock = stock;
    return this;
  }

  /**
   * Get stock
   * @return stock
   */
  @javax.annotation.Nullable
  public OfferStock getStock() {
    return stock;
  }

  public void setStock(@javax.annotation.Nullable OfferStock stock) {
    this.stock = stock;
  }


  public ListingOffer vendor(@javax.annotation.Nullable OfferVendor vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * Get vendor
   * @return vendor
   */
  @javax.annotation.Nullable
  public OfferVendor getVendor() {
    return vendor;
  }

  public void setVendor(@javax.annotation.Nullable OfferVendor vendor) {
    this.vendor = vendor;
  }


  public ListingOffer category(@javax.annotation.Nullable OfferCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public OfferCategory getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nullable OfferCategory category) {
    this.category = category;
  }


  public ListingOffer publication(@javax.annotation.Nullable OfferPublication publication) {
    this.publication = publication;
    return this;
  }

  /**
   * Get publication
   * @return publication
   */
  @javax.annotation.Nullable
  public OfferPublication getPublication() {
    return publication;
  }

  public void setPublication(@javax.annotation.Nullable OfferPublication publication) {
    this.publication = publication;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingOffer listingOffer = (ListingOffer) o;
    return Objects.equals(this.id, listingOffer.id) &&
        Objects.equals(this.name, listingOffer.name) &&
        Objects.equals(this.seller, listingOffer.seller) &&
        Objects.equals(this.promotion, listingOffer.promotion) &&
        Objects.equals(this.delivery, listingOffer.delivery) &&
        Objects.equals(this.images, listingOffer.images) &&
        Objects.equals(this.sellingMode, listingOffer.sellingMode) &&
        Objects.equals(this.stock, listingOffer.stock) &&
        Objects.equals(this.vendor, listingOffer.vendor) &&
        Objects.equals(this.category, listingOffer.category) &&
        Objects.equals(this.publication, listingOffer.publication);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, seller, promotion, delivery, images, sellingMode, stock, vendor, category, publication);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingOffer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    promotion: ").append(toIndentedString(promotion)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    sellingMode: ").append(toIndentedString(sellingMode)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("seller");
    openapiFields.add("promotion");
    openapiFields.add("delivery");
    openapiFields.add("images");
    openapiFields.add("sellingMode");
    openapiFields.add("stock");
    openapiFields.add("vendor");
    openapiFields.add("category");
    openapiFields.add("publication");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingOffer is not found in the empty JSON string", ListingOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        OfferSeller.validateJsonElement(jsonObj.get("seller"));
      }
      // validate the optional field `promotion`
      if (jsonObj.get("promotion") != null && !jsonObj.get("promotion").isJsonNull()) {
        OfferPromotion.validateJsonElement(jsonObj.get("promotion"));
      }
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        OfferDelivery.validateJsonElement(jsonObj.get("delivery"));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            OfferImages.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // validate the optional field `sellingMode`
      if (jsonObj.get("sellingMode") != null && !jsonObj.get("sellingMode").isJsonNull()) {
        OfferSellingMode.validateJsonElement(jsonObj.get("sellingMode"));
      }
      // validate the optional field `stock`
      if (jsonObj.get("stock") != null && !jsonObj.get("stock").isJsonNull()) {
        OfferStock.validateJsonElement(jsonObj.get("stock"));
      }
      // validate the optional field `vendor`
      if (jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) {
        OfferVendor.validateJsonElement(jsonObj.get("vendor"));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        OfferCategory.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `publication`
      if (jsonObj.get("publication") != null && !jsonObj.get("publication").isJsonNull()) {
        OfferPublication.validateJsonElement(jsonObj.get("publication"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingOffer>() {
           @Override
           public void write(JsonWriter out, ListingOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingOffer
   * @throws IOException if the JSON string is invalid with respect to ListingOffer
   */
  public static ListingOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingOffer.class);
  }

  /**
   * Convert an instance of ListingOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

