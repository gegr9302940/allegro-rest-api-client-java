/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.allegro.api.client.model.ProductSetElementSafetyInformation;
import pl.wtx.allegro.api.client.model.ResponsibleProducerResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Suggested product safety data in accordance with GPSR. **Note:** Allegro does not assume responsibility for the accuracy of this data. It is the merchant&#39;s responsibility to verify its applicability to their product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ProductSafetyDto {
  public static final String SERIALIZED_NAME_RESPONSIBLE_PRODUCERS = "responsibleProducers";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PRODUCERS)
  @javax.annotation.Nullable
  private List<ResponsibleProducerResponse> responsibleProducers;

  public static final String SERIALIZED_NAME_SAFETY_INFORMATION = "safetyInformation";
  @SerializedName(SERIALIZED_NAME_SAFETY_INFORMATION)
  @javax.annotation.Nullable
  private ProductSetElementSafetyInformation safetyInformation;

  public static final String SERIALIZED_NAME_MARKETED_BEFORE_G_P_S_R_OBLIGATION = "marketedBeforeGPSRObligation";
  @SerializedName(SERIALIZED_NAME_MARKETED_BEFORE_G_P_S_R_OBLIGATION)
  @javax.annotation.Nullable
  private Boolean marketedBeforeGPSRObligation;

  public ProductSafetyDto() {
  }

  public ProductSafetyDto responsibleProducers(@javax.annotation.Nullable List<ResponsibleProducerResponse> responsibleProducers) {
    this.responsibleProducers = responsibleProducers;
    return this;
  }

  public ProductSafetyDto addResponsibleProducersItem(ResponsibleProducerResponse responsibleProducersItem) {
    if (this.responsibleProducers == null) {
      this.responsibleProducers = new ArrayList<>();
    }
    this.responsibleProducers.add(responsibleProducersItem);
    return this;
  }

  /**
   * Get responsibleProducers
   * @return responsibleProducers
   */
  @javax.annotation.Nullable
  public List<ResponsibleProducerResponse> getResponsibleProducers() {
    return responsibleProducers;
  }

  public void setResponsibleProducers(@javax.annotation.Nullable List<ResponsibleProducerResponse> responsibleProducers) {
    this.responsibleProducers = responsibleProducers;
  }


  public ProductSafetyDto safetyInformation(@javax.annotation.Nullable ProductSetElementSafetyInformation safetyInformation) {
    this.safetyInformation = safetyInformation;
    return this;
  }

  /**
   * Get safetyInformation
   * @return safetyInformation
   */
  @javax.annotation.Nullable
  public ProductSetElementSafetyInformation getSafetyInformation() {
    return safetyInformation;
  }

  public void setSafetyInformation(@javax.annotation.Nullable ProductSetElementSafetyInformation safetyInformation) {
    this.safetyInformation = safetyInformation;
  }


  public ProductSafetyDto marketedBeforeGPSRObligation(@javax.annotation.Nullable Boolean marketedBeforeGPSRObligation) {
    this.marketedBeforeGPSRObligation = marketedBeforeGPSRObligation;
    return this;
  }

  /**
   * Get marketedBeforeGPSRObligation
   * @return marketedBeforeGPSRObligation
   */
  @javax.annotation.Nullable
  public Boolean getMarketedBeforeGPSRObligation() {
    return marketedBeforeGPSRObligation;
  }

  public void setMarketedBeforeGPSRObligation(@javax.annotation.Nullable Boolean marketedBeforeGPSRObligation) {
    this.marketedBeforeGPSRObligation = marketedBeforeGPSRObligation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSafetyDto productSafetyDto = (ProductSafetyDto) o;
    return Objects.equals(this.responsibleProducers, productSafetyDto.responsibleProducers) &&
        Objects.equals(this.safetyInformation, productSafetyDto.safetyInformation) &&
        Objects.equals(this.marketedBeforeGPSRObligation, productSafetyDto.marketedBeforeGPSRObligation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(responsibleProducers, safetyInformation, marketedBeforeGPSRObligation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSafetyDto {\n");
    sb.append("    responsibleProducers: ").append(toIndentedString(responsibleProducers)).append("\n");
    sb.append("    safetyInformation: ").append(toIndentedString(safetyInformation)).append("\n");
    sb.append("    marketedBeforeGPSRObligation: ").append(toIndentedString(marketedBeforeGPSRObligation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responsibleProducers");
    openapiFields.add("safetyInformation");
    openapiFields.add("marketedBeforeGPSRObligation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSafetyDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSafetyDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSafetyDto is not found in the empty JSON string", ProductSafetyDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSafetyDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSafetyDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("responsibleProducers") != null && !jsonObj.get("responsibleProducers").isJsonNull()) {
        JsonArray jsonArrayresponsibleProducers = jsonObj.getAsJsonArray("responsibleProducers");
        if (jsonArrayresponsibleProducers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("responsibleProducers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responsibleProducers` to be an array in the JSON string but got `%s`", jsonObj.get("responsibleProducers").toString()));
          }

          // validate the optional field `responsibleProducers` (array)
          for (int i = 0; i < jsonArrayresponsibleProducers.size(); i++) {
            ResponsibleProducerResponse.validateJsonElement(jsonArrayresponsibleProducers.get(i));
          };
        }
      }
      // validate the optional field `safetyInformation`
      if (jsonObj.get("safetyInformation") != null && !jsonObj.get("safetyInformation").isJsonNull()) {
        ProductSetElementSafetyInformation.validateJsonElement(jsonObj.get("safetyInformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSafetyDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSafetyDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSafetyDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSafetyDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSafetyDto>() {
           @Override
           public void write(JsonWriter out, ProductSafetyDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSafetyDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSafetyDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSafetyDto
   * @throws IOException if the JSON string is invalid with respect to ProductSafetyDto
   */
  public static ProductSafetyDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSafetyDto.class);
  }

  /**
   * Convert an instance of ProductSafetyDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

