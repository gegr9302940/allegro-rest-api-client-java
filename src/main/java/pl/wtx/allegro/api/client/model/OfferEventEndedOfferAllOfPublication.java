/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * Information about publication of the given offer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class OfferEventEndedOfferAllOfPublication {
  /**
   * Indicates the reason for ending the offer:  - &#x60;USER&#x60; - offer ended by the seller.  - &#x60;ADMIN&#x60; - offer ended by an admin.  - &#x60;EXPIRATION&#x60; - offer duration had expired (valid for offers with specified duration).  - &#x60;EMPTY_STOCK&#x60; - offer ended because all available items had been sold out.  - &#x60;PRODUCT_DETACHMENT&#x60; - offer ended because its link to the product was removed. Status will only occur    if the base marketplace of offer requires full productization.  - &#x60;ERROR&#x60; - offer ended due to internal problem with offer publication. The publication command responded with    success status, but further processing failed.  - &#x60;UNKNOWN&#x60; - in rare cases the reason might be unknown.
   */
  @JsonAdapter(EndedByEnum.Adapter.class)
  public enum EndedByEnum {
    USER("USER"),
    
    ADMIN("ADMIN"),
    
    EXPIRATION("EXPIRATION"),
    
    EMPTY_STOCK("EMPTY_STOCK"),
    
    PRODUCT_DETACHMENT("PRODUCT_DETACHMENT"),
    
    ERROR("ERROR"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    EndedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndedByEnum fromValue(String value) {
      for (EndedByEnum b : EndedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EndedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENDED_BY = "endedBy";
  @SerializedName(SERIALIZED_NAME_ENDED_BY)
  @javax.annotation.Nonnull
  private EndedByEnum endedBy;

  public OfferEventEndedOfferAllOfPublication() {
  }

  public OfferEventEndedOfferAllOfPublication endedBy(@javax.annotation.Nonnull EndedByEnum endedBy) {
    this.endedBy = endedBy;
    return this;
  }

  /**
   * Indicates the reason for ending the offer:  - &#x60;USER&#x60; - offer ended by the seller.  - &#x60;ADMIN&#x60; - offer ended by an admin.  - &#x60;EXPIRATION&#x60; - offer duration had expired (valid for offers with specified duration).  - &#x60;EMPTY_STOCK&#x60; - offer ended because all available items had been sold out.  - &#x60;PRODUCT_DETACHMENT&#x60; - offer ended because its link to the product was removed. Status will only occur    if the base marketplace of offer requires full productization.  - &#x60;ERROR&#x60; - offer ended due to internal problem with offer publication. The publication command responded with    success status, but further processing failed.  - &#x60;UNKNOWN&#x60; - in rare cases the reason might be unknown.
   * @return endedBy
   */
  @javax.annotation.Nonnull
  public EndedByEnum getEndedBy() {
    return endedBy;
  }

  public void setEndedBy(@javax.annotation.Nonnull EndedByEnum endedBy) {
    this.endedBy = endedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferEventEndedOfferAllOfPublication offerEventEndedOfferAllOfPublication = (OfferEventEndedOfferAllOfPublication) o;
    return Objects.equals(this.endedBy, offerEventEndedOfferAllOfPublication.endedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferEventEndedOfferAllOfPublication {\n");
    sb.append("    endedBy: ").append(toIndentedString(endedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endedBy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferEventEndedOfferAllOfPublication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferEventEndedOfferAllOfPublication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferEventEndedOfferAllOfPublication is not found in the empty JSON string", OfferEventEndedOfferAllOfPublication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferEventEndedOfferAllOfPublication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferEventEndedOfferAllOfPublication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OfferEventEndedOfferAllOfPublication.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("endedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endedBy").toString()));
      }
      // validate the required field `endedBy`
      EndedByEnum.validateJsonElement(jsonObj.get("endedBy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferEventEndedOfferAllOfPublication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferEventEndedOfferAllOfPublication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferEventEndedOfferAllOfPublication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferEventEndedOfferAllOfPublication.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferEventEndedOfferAllOfPublication>() {
           @Override
           public void write(JsonWriter out, OfferEventEndedOfferAllOfPublication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferEventEndedOfferAllOfPublication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferEventEndedOfferAllOfPublication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferEventEndedOfferAllOfPublication
   * @throws IOException if the JSON string is invalid with respect to OfferEventEndedOfferAllOfPublication
   */
  public static OfferEventEndedOfferAllOfPublication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferEventEndedOfferAllOfPublication.class);
  }

  /**
   * Convert an instance of OfferEventEndedOfferAllOfPublication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

