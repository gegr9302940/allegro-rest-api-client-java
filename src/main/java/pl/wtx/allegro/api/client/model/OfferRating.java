/*
 * Allegro REST API
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.allegro.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.allegro.api.client.model.OfferRatingScoreDistributionInner;
import pl.wtx.allegro.api.client.model.OfferRatingSizeFeedbackInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.allegro.api.client.invoker.JSON;

/**
 * OfferRating
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class OfferRating {
  public static final String SERIALIZED_NAME_AVERAGE_SCORE = "averageScore";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORE)
  @javax.annotation.Nullable
  private String averageScore;

  public static final String SERIALIZED_NAME_SCORE_DISTRIBUTION = "scoreDistribution";
  @SerializedName(SERIALIZED_NAME_SCORE_DISTRIBUTION)
  @javax.annotation.Nullable
  private List<OfferRatingScoreDistributionInner> scoreDistribution = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_RESPONSES = "totalResponses";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESPONSES)
  @javax.annotation.Nullable
  private Integer totalResponses;

  public static final String SERIALIZED_NAME_SIZE_FEEDBACK = "sizeFeedback";
  @SerializedName(SERIALIZED_NAME_SIZE_FEEDBACK)
  @javax.annotation.Nullable
  private List<OfferRatingSizeFeedbackInner> sizeFeedback = new ArrayList<>();

  public OfferRating() {
  }

  public OfferRating averageScore(@javax.annotation.Nullable String averageScore) {
    this.averageScore = averageScore;
    return this;
  }

  /**
   * Average score of offer rating.
   * @return averageScore
   */
  @javax.annotation.Nullable
  public String getAverageScore() {
    return averageScore;
  }

  public void setAverageScore(@javax.annotation.Nullable String averageScore) {
    this.averageScore = averageScore;
  }


  public OfferRating scoreDistribution(@javax.annotation.Nullable List<OfferRatingScoreDistributionInner> scoreDistribution) {
    this.scoreDistribution = scoreDistribution;
    return this;
  }

  public OfferRating addScoreDistributionItem(OfferRatingScoreDistributionInner scoreDistributionItem) {
    if (this.scoreDistribution == null) {
      this.scoreDistribution = new ArrayList<>();
    }
    this.scoreDistribution.add(scoreDistributionItem);
    return this;
  }

  /**
   * List score distribution with count.
   * @return scoreDistribution
   */
  @javax.annotation.Nullable
  public List<OfferRatingScoreDistributionInner> getScoreDistribution() {
    return scoreDistribution;
  }

  public void setScoreDistribution(@javax.annotation.Nullable List<OfferRatingScoreDistributionInner> scoreDistribution) {
    this.scoreDistribution = scoreDistribution;
  }


  public OfferRating totalResponses(@javax.annotation.Nullable Integer totalResponses) {
    this.totalResponses = totalResponses;
    return this;
  }

  /**
   * Number of total responses.
   * minimum: 0
   * @return totalResponses
   */
  @javax.annotation.Nullable
  public Integer getTotalResponses() {
    return totalResponses;
  }

  public void setTotalResponses(@javax.annotation.Nullable Integer totalResponses) {
    this.totalResponses = totalResponses;
  }


  public OfferRating sizeFeedback(@javax.annotation.Nullable List<OfferRatingSizeFeedbackInner> sizeFeedback) {
    this.sizeFeedback = sizeFeedback;
    return this;
  }

  public OfferRating addSizeFeedbackItem(OfferRatingSizeFeedbackInner sizeFeedbackItem) {
    if (this.sizeFeedback == null) {
      this.sizeFeedback = new ArrayList<>();
    }
    this.sizeFeedback.add(sizeFeedbackItem);
    return this;
  }

  /**
   * List of size feedback.
   * @return sizeFeedback
   */
  @javax.annotation.Nullable
  public List<OfferRatingSizeFeedbackInner> getSizeFeedback() {
    return sizeFeedback;
  }

  public void setSizeFeedback(@javax.annotation.Nullable List<OfferRatingSizeFeedbackInner> sizeFeedback) {
    this.sizeFeedback = sizeFeedback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferRating offerRating = (OfferRating) o;
    return Objects.equals(this.averageScore, offerRating.averageScore) &&
        Objects.equals(this.scoreDistribution, offerRating.scoreDistribution) &&
        Objects.equals(this.totalResponses, offerRating.totalResponses) &&
        Objects.equals(this.sizeFeedback, offerRating.sizeFeedback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageScore, scoreDistribution, totalResponses, sizeFeedback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferRating {\n");
    sb.append("    averageScore: ").append(toIndentedString(averageScore)).append("\n");
    sb.append("    scoreDistribution: ").append(toIndentedString(scoreDistribution)).append("\n");
    sb.append("    totalResponses: ").append(toIndentedString(totalResponses)).append("\n");
    sb.append("    sizeFeedback: ").append(toIndentedString(sizeFeedback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageScore");
    openapiFields.add("scoreDistribution");
    openapiFields.add("totalResponses");
    openapiFields.add("sizeFeedback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferRating is not found in the empty JSON string", OfferRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("averageScore") != null && !jsonObj.get("averageScore").isJsonNull()) && !jsonObj.get("averageScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `averageScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("averageScore").toString()));
      }
      if (jsonObj.get("scoreDistribution") != null && !jsonObj.get("scoreDistribution").isJsonNull()) {
        JsonArray jsonArrayscoreDistribution = jsonObj.getAsJsonArray("scoreDistribution");
        if (jsonArrayscoreDistribution != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scoreDistribution").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scoreDistribution` to be an array in the JSON string but got `%s`", jsonObj.get("scoreDistribution").toString()));
          }

          // validate the optional field `scoreDistribution` (array)
          for (int i = 0; i < jsonArrayscoreDistribution.size(); i++) {
            OfferRatingScoreDistributionInner.validateJsonElement(jsonArrayscoreDistribution.get(i));
          };
        }
      }
      if (jsonObj.get("sizeFeedback") != null && !jsonObj.get("sizeFeedback").isJsonNull()) {
        JsonArray jsonArraysizeFeedback = jsonObj.getAsJsonArray("sizeFeedback");
        if (jsonArraysizeFeedback != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sizeFeedback").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sizeFeedback` to be an array in the JSON string but got `%s`", jsonObj.get("sizeFeedback").toString()));
          }

          // validate the optional field `sizeFeedback` (array)
          for (int i = 0; i < jsonArraysizeFeedback.size(); i++) {
            OfferRatingSizeFeedbackInner.validateJsonElement(jsonArraysizeFeedback.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferRating.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferRating>() {
           @Override
           public void write(JsonWriter out, OfferRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferRating
   * @throws IOException if the JSON string is invalid with respect to OfferRating
   */
  public static OfferRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferRating.class);
  }

  /**
   * Convert an instance of OfferRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

